--CREATE PROCEDURE usp_Report_MonthlyManagementReport @CompanyIds INT, @LocationIds VARCHAR(250),@PBLIds VARCHAR(250),@SelectAll INT,@FromDate DATETIME,@ToDate DATETIME

DECLARE @CompanyIds INT, @LocationIds VARCHAR(250),@PBLIds VARCHAR(250),@SelectAll INT,@FromDate DATETIME,@ToDate DATETIME
SET @CompanyIds = 1
SET @LocationIds = '14'
SET @PBLIds = '28'
SET @SelectAll = 2
SET @FromDate = '2014-04-01 00:00:00.000'
SET @ToDate = '2014-04-19 00:00:00.000'

SELECT
l.SequenceId,
a.[LocationId],
l.[Name] AS [Location],
upbla.PBLSequenceId,
a.PrincipalBusinessLineId,
upbla.[Principal ShortName] AS [PBL],
a.[Gross Sale Cash],
a.[Gross Sale Cr],
--a.[Gross UDL Discount Cash],
--a.[Gross PBL Discount Cash],
--a.[Gross UDL Discount Cr],
--a.[Gross PBL Discount Cr],
a.[SLN Cash],
a.[SLN Cr], 
a.[SLN UDL Discount Cash], 
a.[SLN PBL Discount Cash],
a.[SLN UDL Discount Cr],
a.[SLN PBL Discount Cr],
a.[Gross Sale Cash] - 0/*a.[UDL Discount Cash] - a.[PBL Discount Cash]*/ AS [Cash Sale],
a.[Gross Sale Cr] - 0/*a.[UDL Discount Credit] - a.[PBL Discount Credit]*/ AS [Credit Sale],
a.[SLN Cash] - a.[SLN UDL Discount Cash] - a.[SLN PBL Discount Cash] AS [Cash Sales Return],
a.[SLN Cr] - a.[SLN UDL Discount Cr] - a.[SLN PBL Discount Cr] AS [Credit Sales Return],
((a.[Gross Sale Cash] - 0/*a.[UDL Discount Cash] - a.[PBL Discount Cash]*/ ) + (a.[Gross Sale Cr] - 0/*a.[UDL Discount Cr] - a.[PBL Discount Cr]*/ ) -
(a.[SLN Cash] - a.[SLN UDL Discount Cash] - a.[SLN PBL Discount Cash]) - (a.[SLN Cr] - a.[SLN UDL Discount Cr] - a.[SLN PBL Discount Cr])) 
AS [Net Sale],
--a.[Gross UDL Discount Cash] + a.[Gross UDL Discount Cr] - a.[SLN UDL Discount Cash] - a.[SLN UDL Discount Cr] AS [UDL Discount],
--a.[Gross PBL Discount Cash] + a.[Gross PBL Discount Cr] - a.[SLN PBL Discount Cash] - a.[SLN PBL Discount Cr] AS [PBL Discount],
a.[Gross Sale Cash] + a.[Gross Sale Cr] - a.[SLN Cash] - a.[SLN Cr] AS [DSP Net Sale]
FROM

(
	SELECT
		usso.LocationId,
		usso.PrincipalBusinessLineId,
		usso.IsCash,
		case when usso.IsCash = 1 then SUM(usso.soldquantity*usso.tp) else 0 end AS [Gross Sale Cash],
		case when usso.IsCash = 1 then 0 else SUM(usso.soldquantity*usso.tp) end AS [Gross Sale Cr],
		--(case when usso.IsCash = 1 then (usso.udldiscount) else 0 end) AS [Gross UDL Discount Cash],
		--(case when usso.IsCash = 1 then (usso.pbldiscount) else 0 end) AS [Gross PBL Discount Cash],
		--(case when usso.IsCash = 1 then 0 else (usso.udldiscount) end) AS [Gross UDL Discount Cr],
		--(case when usso.IsCash = 1 then 0 else (usso.pbldiscount) end) AS [Gross PBL Discount Cr]  
		0 AS [SLN Cash],
		0 AS [SLN Cr], 
		0 AS [SLN UDL Discount Cash], 
		0 AS [SLN PBL Discount Cash],
		0 AS [SLN UDL Discount Cr],
		0 AS [SLN PBL Discount Cr] 
	FROM uv_Sales_SaleOrder usso
	INNER JOIN   DBO.Split(@PBLIds, ',') PBL ON  (PBL.Data = usso.PrincipalBusinessLineId OR @PBLIds = '')
	INNER JOIN   DBO.Split(@LocationIds, ',') Location ON  (Location.Data = usso.LocationId OR @LocationIds = '')
	
	WHERE usso.CompanyId = @CompanyIds
	AND (@SelectAll = 0 
		OR ( @SelectAll = 1 AND DATEDIFF(DAY,usso.SalePassDate,@FromDate)=0) 
		OR ( @SelectAll = 2 AND DATEDIFF(DAY,usso.SalePassDate,@FromDate)<=0 AND DATEDIFF(DAY,usso.SalePassDate,@ToDate)>=0))
	
	GROUP BY usso.IsCash,usso.PrincipalBusinessLineId,usso.LocationId
 
UNION ALL

	SELECT 
		sln.LocationId,
		sln.PrincipalBusinessLineId,
		sln.IsCash,
		0 AS [Gross Sale Cash],
		0 AS  [Gross Sale Cr],
		--0 AS [Gross UDL Discount Cash],
		--0 AS [Gross PBL Discount Cash],
		--0 AS [Gross UDL Discount Cr],
		--0 AS [Gross PBL Discount Cr],  
		(case when sln.IsCash = 1 then SUM(sln.Quantity * pc.TP) else 0 end) AS [SLN Cash],
		(case when sln.IsCash = 1 then 0 else SUM(sln.Quantity * pc.TP) end) AS [SLN Cr], 
		(case when sln.IsCash = 1 then SUM(sln.DiscountUDLPart) else 0 end) AS [SLN UDL Discount Cash], 
		(case when sln.IsCash = 1 then SUM(sln.DiscountPrincipalPart) else 0 end) AS [SLN PBL Discount Cash],
		(case when sln.IsCash = 1 then 0 else SUM(sln.DiscountUDLPart) end) AS [SLN UDL Discount Cr],
		(case when sln.IsCash = 1 then 0 else SUM(sln.DiscountPrincipalPart) end) AS [SLN PBL Discount Cr] 
	FROM uv_Sales_SLN sln
	INNER JOIN PriceCatalog pc ON pc.PriceCatalogId = sln.PriceId
	INNER JOIN   DBO.Split(@PBLIds, ',') PBL ON  (PBL.Data = sln.PrincipalBusinessLineId OR @PBLIds = '')
    INNER JOIN   DBO.Split(@LocationIds, ',') Location ON  (Location.Data = sln.LocationId OR @LocationIds = '')
	
	WHERE sln.CompanyId = @CompanyIds
	AND (@SelectAll = 0 
		OR ( @SelectAll = 1 AND DATEDIFF(DAY,sln.TransactionDate,@FromDate)=0) 
		OR ( @SelectAll = 2 AND DATEDIFF(DAY,sln.TransactionDate,@FromDate)<=0 AND DATEDIFF(DAY,sln.TransactionDate,@ToDate)>=0))
	
	GROUP BY sln.IsCash,sln.PrincipalBusinessLineId,sln.LocationId

) a
INNER JOIN Location l ON A.LocationId = l.LocationId
INNER JOIN uv_PrincipalBusinessLine_All upbla ON a.PrincipalBusinessLineId = upbla.PrincipalBusinessLineId
 GOSELECT ccl.LocationId,
		ccl.CustomerId,
		ccl.PrincipalBusinessLineId,
		pbl.[Name],
		ccl.CreditDays,
		ccl.CreditLimit
		
 FROM CustomerCreditLimit ccl 
INNER JOIN uv_PrincipalBusinessLine_all pbl ON ccl.PrincipalBusinessLineId = pbl.PrincipalBusinessLineId
WHERE ccl.LocationId = 14 AND ccl.CustomerId = 288 
 GOCREATE PROCEDURE usp_Report_CustomerWiseSales @LocationId VARCHAR(200),@PBLId VARCHAR(200),
@FromDate DATETIME,@ToDate DATETIME,
@TPValue DECIMAL,@Discount DECIMAL AS
 
--DECLARE @LocationId VARCHAR(200),@PBLId VARCHAR(200),
--@FromDate DATETIME,@ToDate DATETIME,
--@TPValue DECIMAL,@Discount DECIMAL 

SET @LocationId = '14'
SET @PBLId = '28,3'
SET @FromDate = '01/12/2012'
SET @ToDate = '01/3/2014'
SET @TPValue = 1000.00
SET @Discount = 5.00

SELECT l.SequenceId,ucws.LocationId,l.[Name] AS [Location Name],
	   upbla.PBLSequenceId,ucws.PrincipalBusinessLineId,upbla.[NAME] AS [PBL],
	   ucws.CustomerId,
	   ucws.CustomerName,
	   --ucws.TransactionDate,	   
	   SUM(ucws.SaleValue - ucws.SaleReturnValue) AS [SALES VALUE],
	   SUM(ucws.SaleValue - ucws.SaleReturnValue)*(@Discount/100) AS [DISCOUNT],
	   SUM(
	   		(ucws.SaleValue - ucws.SaleReturnValue)
	   		-
	   		(
	   			(ucws.SaleValue - ucws.SaleReturnValue)*(@Discount/100)
	   		)
	   )AS [AFTER Discount]
FROM 
dbo.uv_CustomerWiseSale ucws
INNER JOIN uv_PrincipalBusinessLine_All upbla ON ucws.PrincipalBusinessLineId = upbla.PrincipalBusinessLineId
INNER JOIN dbo.Location l ON ucws.LocationId = l.LocationId
INNER JOIN Dbo.[Split](@LocationId,',')LOC ON LOC.[Data] = ucws.LocationId OR (@LocationId = '')
INNER JOIN dbo.[Split](@PBLId,',')PBL ON PBL.[Data] =  ucws.PrincipalBusinessLineId OR (@PBLId = '')

WHERE (DATEDIFF(DAY,ucws.TransactionDate,  @FromDate) <= 0 
AND  DATEDIFF(DAY,ucws.TransactionDate,  @ToDate) >= 0)
--and ucws.CustomerId = 6156
GROUP BY l.SequenceId,ucws.LocationId,l.[Name],
	   upbla.PBLSequenceId,ucws.PrincipalBusinessLineId,upbla.[NAME],
	   ucws.CustomerId,
	   ucws.CustomerName
	   --ucws.TransactionDate	   
HAVING Sum(ucws.SaleValue - ucws.SaleReturnValue) >= @TPValue

 GOSELECT * FROM Employees e

BEGIN trans 
CREATE TABLE SAMPLE_PAYROLL(
	EMPLOYEEID   INT              NOT NULL,
   ENAME VARCHAR (20)     NOT NULL,
   HOURLYWAGE MONEY NOT NULL,
   WORKINGHOUR INT NOT NULL,
   --GROSSPAY MONEY NOT NULL,
   --FEDERALALLOW INT NOT NULL,
   --StateTax MONEY NOT NULL,
   --FederalIncomeTax MONEY NOT NULL,
   --SocialSecurity MONEY NOT NULL,
   --Medicare MONEY NOT NULL,
   --TotalTaxWithheld MONEY NOT NULL,
   --InsuranceDeduction MONEY NOT NULL,
   NetPay MONEY NOT NULL
);
SELECT * FROM targeted
INSERT INTO SAMPLE_PAYROLL
(
	EMPLOYEEID,
	ENAME,
	HOURLYWAGE,
	WORKINGHOUR,
	NetPay
)
SELECT * FROM targeted
COMMIT trans GOselect left(right(convert(varchar(20),getdate(),06),6),3)+'-'+right(convert(varchar(20),getdate(),06),2), DATEADD(dd, DATEDIFF(dd, 0, getdate()), 0),convert(varchar(20),getdate(),06) GOCREATE PROCEDURE usp_Report_GrossSaleAndMargin @CompanyId INT,@LocationIds NVARCHAR(250),@PBLIds NVARCHAR(500),@ProductIds NVARCHAR(1000),@SelectAll INT,@FromDate DATETIME,@ToDate DATETIME,@SalesCriteria INT as
--DECLARE @CompanyId INT,@LocationIds NVARCHAR(250),@PBLIds NVARCHAR(500),@ProductIds NVARCHAR(1000),@SelectAll INT,@FromDate DATETIME,@ToDate DATETIME,@SalesCriteria INT 
--SET @CompanyId = '1'
--SET @LocationIds = '11'
--SET @PBLIds = '37'
--SET @ProductIds = '896'
--SET @FromDate = '2014-04-01'
--SET @ToDate = '2014-04-04'
--SET @SalesCriteria = 1
--SET @SelectAll = 2
/*0-Gross Sale
* 1-Net Sale
* 2-SLN
* */
SELECT l.SequenceId,
		A.LocationId,
		l.ShortName,
		up.PBLSequenceId,
		A.PrincipalBusinessLineId,
		up.ShortName,
		up.ProductSequence,
		A.ProductId,
		up.[Name] AS ProductName,
		SUM(A.Quantity) AS Quantity,
		A.PP,
		SUM(A.Quantity) * A.PP AS [PPValue],
		--a.InputTaxAmount,
		A.TP, 
		SUM(A.Quantity) * A.TP AS [TPValue],
		--a.[OUTPUT TAX],
		A.TP-A.PP AS [Margin],
		(SUM(A.Quantity)* A.TP) - (SUM(A.Quantity) * A.PP) AS [MarginValue],
		((SUM(A.Quantity) * A.TP)-(SUM(A.Quantity)* A.PP)) / (SUM(A.Quantity) * A.PP) * 100 AS  [MarginPercentage]
FROM (
			SELECT
				ussl.LocationId,
				ussl.PrincipalBusinessLineId,
				ussl.ProductId,
				CASE WHEN @SalesCriteria = 0 THEN 0--SUM(ussl.Quantity) 
				     When @SalesCriteria = 1 THEN -SUM(ussl.Quantity)
				     When @SalesCriteria  = 2 THEN SUM(ussl.Quantity) END 
				 AS [Quantity],
				ussl.TransactionDate AS [Date],
				pc.PP,
				ussl.InputTaxAmount,
				pc.TP,
				ussl.OutputTaxAmount AS [OUTPUT TAX]
		    FROM uv_Sales_SLN ussl
		    INNER JOIN PriceCatalog pc ON ussl.PriceId = pc.PriceCatalogId
		    INNER JOIN   DBO.Split(@ProductIds, ',') Product ON  (Product.Data = ussl.ProductId OR @ProductIds = '')
			INNER JOIN   DBO.Split(@PBLIds, ',') PBL ON  (PBL.Data = ussl.PrincipalBusinessLineId OR @PBLIds = '')
			INNER JOIN   DBO.Split(@LocationIds, ',') Location ON  (Location.Data = ussl.LocationId OR @LocationIds = '')
			WHERE (  @SelectAll = 0	  
					OR  (@SelectAll = 1 AND ( DATEDIFF(DAY,ussl.TransactionDate,  @FromDate) = 0 ))
				    OR  (@SelectAll = 2 AND ( DATEDIFF(DAY, ussl.TransactionDate,  @FromDate) <= 0 AND DATEDIFF(day, ussl.TransactionDate, @ToDate) >= 0 ))   
			) and ussl.IsRollbacked = 0
		    GROUP BY 
				ussl.LocationId,
				ussl.PrincipalBusinessLineId,
				ussl.ProductId,
				ussl.TransactionDate,
				pc.PP,
				ussl.InputTaxAmount,
				pc.TP,
				ussl.OutputTaxAmount  
				
				UNION ALL
				
			SELECT
				usso.LocationId,
				usso.PrincipalBusinessLineId,
				usso.ProductId,
				Case When @SalesCriteria  = 0 then SUM(usso.SoldQuantity) 
				     When @SalesCriteria  = 1 then SUM(usso.SoldQuantity)
				     When @SalesCriteria  = 2 then 0 END 
				AS [Quantity],
				usso.SalePassDate AS [Date],
				pc.PP,
				0 InputTaxAmount ,
				pc.TP,
				usso.TotalOutputTax AS [OUTPUT TAX]
			FROM uv_Sales_SaleOrder usso
			INNER JOIN PriceCatalog pc ON usso.PriceId = pc.PriceCatalogId
			INNER JOIN   DBO.Split(@ProductIds, ',') Product ON  (Product.Data = usso.ProductId OR @ProductIds = '')
			INNER JOIN   DBO.Split(@PBLIds, ',') PBL ON  (PBL.Data = usso.PrincipalBusinessLineId OR @PBLIds = '')
			INNER JOIN   DBO.Split(@LocationIds, ',') Location ON  (Location.Data = usso.LocationId OR @LocationIds = '')
			WHERE 
			(  @SelectAll = 0	  
			 OR  (@SelectAll = 1 AND ( DATEDIFF(DAY, usso.SalePassDate,  @FromDate) = 0 ))
			 OR  (@SelectAll = 2 AND ( DATEDIFF(DAY, usso.SalePassDate,  @FromDate) <= 0 AND DATEDIFF(day, usso.SalePassDate, @ToDate) >= 0 ))   
			) AND usso.IsRollbacked = 0
		    GROUP BY 
				usso.LocationId,
				usso.PrincipalBusinessLineId,
				usso.ProductId,
				usso.SalePassDate,
				pc.PP,
				
				pc.TP,
				usso.TotalOutputTax
)A

--INNER JOIN PriceCatalog pc ON A.PriceId = pc.PriceCatalogId
INNER JOIN Location l ON A.LocationId = l.LocationId
INNER JOIN uv_Product up ON A.ProductId = up.ProductId
--INNER JOIN   DBO.Split(@ProductIds, ',') Product ON  (Product.Data = A.ProductId OR @LocationIds = '')
--INNER JOIN   DBO.Split(@PBLIds, ',') PBL ON  (PBL.Data = A.PrincipalBusinessLineId OR @PBLIds = '')
--INNER JOIN   DBO.Split(@LocationIds, ',') Location ON  (Location.Data = A.LocationId OR @LocationIds = '')


GROUP BY 
		l.SequenceId,  
		A.LocationId,
		l.ShortName,
		up.PBLSequenceId,
		A.PrincipalBusinessLineId,
		up.ShortName,
		up.ProductSequence,
		A.ProductId,
		up.[Name] ,
		A.PP,A.TP
		
HAVING  SUM(A.Quantity)<>0 GODECLARE @CompanyId INT,@LocationIds NVARCHAR(250),@PBLIds NVARCHAR(500),@ProductIds NVARCHAR(1000),@SelectAll INT,@FromDate DATETIME,@ToDate DATETIME,@SalesCriteria INT 
SET @CompanyId = '1'
SET @LocationIds = '11'
SET @PBLIds = '3'
SET @ProductIds = '172'
SET @FromDate = '2014-04-04'
SET @ToDate = '2014-04-15'
SET @SalesCriteria = 2
SET @SelectAll = 1
/*0-Gross Sale
* 1-Net Sale
* 2-SLN
* */	  

	----------------------------SALE---------------------------
	SELECT
	usso.LocationId,
	l.ShortName AS [Location Name],
	--up.PBLSequenceId,
	usso.PrincipalBusinessLineId,
	up.PBLShortName,
	--up.ProductSequence,
	--usso.SaleOrderId, 
	usso.ProductId,
	up.[Name] AS [Product Name],
	CASE WHEN @SalesCriteria=0 THEN sum(usso.SoldQuantity)
		 WHEN @SalesCriteria=1 THEN sum(usso.SoldQuantity) - SUM(ussln.[SLNQuantity])
		 WHEN @SalesCriteria=2 THEN -SUM(ussln.[SLNQuantity])
	END 
	AS [Sale Qty],	
	pc.PP,
	CASE WHEN @SalesCriteria=0 THEN sum(usso.SoldQuantity * pc.PP)
		 WHEN @SalesCriteria=1 THEN sum(usso.SoldQuantity * pc.PP)- SUM(ussln.[SLNQuantity] * pc.PP)
		 WHEN @SalesCriteria=2 THEN -SUM(ussln.[SLNQuantity] * pc.PP)
	END 
	AS [PPValue],	
	pc.TP,
	CASE WHEN @SalesCriteria=0 THEN sum(usso.SoldQuantity * pc.TP)
		 WHEN @SalesCriteria=1 THEN sum(usso.SoldQuantity * pc.TP) - SUM(ussln.[SLNQuantity] * pc.TP)
		 WHEN @SalesCriteria=2 THEN -sum(ussln.[SLNQuantity] * pc.TP)
	END 
	AS [TPValue]
	INTO TEMPSale
FROM uv_Sales_SaleOrder usso
--INNER JOIN SaleOrderTax sot ON usso.LocationId = sot.LocationId AND usso.SaleOrderId = sot.SaleOrderId
INNER JOIN uv_Product up ON usso.ProductId = up.ProductId 
INNER JOIN PriceCatalog pc ON usso.PriceId = pc.PriceCatalogId
INNER JOIN   DBO.Split(@LocationIds, ',') Location ON  (Location.Data = usso.LocationId OR @LocationIds = '')
INNER JOIN   DBO.Split(@PBLIds, ',') PBL ON  (PBL.Data = usso.PrincipalBusinessLineId OR @PBLIds = '')
INNER JOIN   DBO.Split(@ProductIds, ',') Product ON  (Product.Data = usso.ProductId OR @LocationIds = '')
INNER JOIN Location l ON usso.LocationId = l.LocationId

	WHERE (  @SelectAll = 0	  
		   OR  (@SelectAll = 1 AND ( DATEDIFF(DAY, usso.SalePassDate,  @FromDate) = 0 ))
		   OR  (@SelectAll = 2 AND ( DATEDIFF(DAY, usso.SalePassDate,  @FromDate) <= 0 AND DATEDIFF(day, usso.SalePassDate, @ToDate) >= 0 ))   
		  )  
		  AND usso.SalePassDate IS NOT NULL
		  AND usso.IsRollbacked  = 0

	GROUP BY 
	l.ShortName,
	l.SequenceId,
	usso.LocationId,
	up.PBLSequenceId,
	usso.PrincipalBusinessLineId, 
	up.PBLShortName,
	--usso.SaleOrderId,
	up.ProductSequence,
	usso.ProductId,
	up.[Name],
	pc.PP,
	pc.TP
	
ORDER BY 
	l.SequenceId,
	up.PBLSequenceId,
	up.ProductSequence  



/*
	SELECT SUM(Quantity) FROM uv_Sales_SLN usso  WHERE usso.LocationId = 11 AND usso.ProductId = 172 
	SELECT sum(SOLDQUANTITY) FROM uv_Sales_SaleOrder usso  WHERE usso.LocationId = 11 AND usso.ProductId = 172 AND usso.SalePassDate BETWEEN '2014-04-04' AND '2014-04-05'
*/	
	
SELECT
	usso.LocationId,
	l.ShortName AS [Location Name],
	--up.PBLSequenceId,
	usso.PrincipalBusinessLineId,
	up.PBLShortName,
	--up.ProductSequence,
	--usso.SaleOrderId, 
	usso.ProductId,
	up.[Name] AS [Product Name],
	CASE WHEN @SalesCriteria=0 THEN sum(usso.SoldQuantity)
		 WHEN @SalesCriteria=1 THEN sum(usso.SoldQuantity) - SUM(ussln.[SLNQuantity])
		 WHEN @SalesCriteria=2 THEN -SUM(ussln.[SLNQuantity])
	END 
	AS [Sale Qty],	
	pc.PP,
	CASE WHEN @SalesCriteria=0 THEN sum(usso.SoldQuantity * pc.PP)
		 WHEN @SalesCriteria=1 THEN sum(usso.SoldQuantity * pc.PP)- SUM(ussln.[SLNQuantity] * pc.PP)
		 WHEN @SalesCriteria=2 THEN -SUM(ussln.[SLNQuantity] * pc.PP)
	END 
	AS [PPValue],	
	pc.TP,
	CASE WHEN @SalesCriteria=0 THEN sum(usso.SoldQuantity * pc.TP)
		 WHEN @SalesCriteria=1 THEN sum(usso.SoldQuantity * pc.TP) - SUM(ussln.[SLNQuantity] * pc.TP)
		 WHEN @SalesCriteria=2 THEN -sum(ussln.[SLNQuantity] * pc.TP)
	END 
	AS [TPValue]
FROM uv_Sales_SLN ussl
GROUP BY 
				ussl.LocationId,
				ussl.PrincipalBusinessLineId,
				ussl.ProductId


	
 GOSELECT ptp.PrincipalBusinessLineId,up.PBLShortName ,pt.Name AS PrincipalTeam,
 ptp2.ProductId , up.[Name] AS ProductName
 INTO #Temp
 FROM PrincipalTeam pt 
INNER JOIN PrincipalTeamPBL ptp ON pt.PrincipalTeamId = ptp.PrincipalTeamId
INNER JOIN uv_Product up ON ptp.PrincipalBusinessLineId = up.PrincipalBusinessLineId
INNER JOIN PrincipalTeamProduct ptp2 ON pt.PrincipalTeamId = ptp2.PrincipalTeamId AND up.ProductId = ptp2.ProductId 
 GOALTER PROC [dbo].[usp_Report_GenericDataSetSales] 
	@LocationIds varchar(200), 
	@CompanyIds varchar(20),  
	@PBLIds varchar(100),   
	@SaleTypeIds varchar(100),   
	@MainAreaIds varchar(MAX),  
	@SubAreaIds varchar(MAX),  
	@CustomerIds varchar(MAX),  
	@ProductIds varchar(MAX),  	
	@BatchNo varchar(50), 
	@SelectAll int,
	@FromDate datetime, 
	@ToDate datetime,   	   
	@IsCash bit,
	@IsCredit bit,
	@CustStatus int ,
	@MAreaStatus INT,
	@SAreaStatus INT,
	@BookerStatus INT,
	@SupplierStatus INT,
    @IsinvoiceDate BIT,
    @PBLWise BIT
AS 

--DECLARE 
--	@LocationIds varchar(1000), 
--	@CompanyIds varchar(1000),  
--	@PBLIds varchar(1000),   
--	@SaleTypeIds varchar(1000),   
--	@MainAreaIds varchar(1000),  
--	@SubAreaIds varchar(1000),  
--	@CustomerIds varchar(1000),  
--	@ProductIds varchar(1000),   
--	@BatchNo varchar(10),  
--	@SelectAll int, 
--	@FromDate datetime, 
--	@ToDate datetime,   		      
--    @IsCash bit,
--	@IsCredit bit,
--	@MAreaStatus INT,
--	@SAreaStatus INT,
--	@BookerStatus INT,
--	@SupplierStatus INT,
--	@CustStatus INT,
--	@IsinvoiceDate  BIT ,
--  @PBLWise BIT 
--SET @LocationIds = '11'--'11,14'--'11,18,23,28,30,35,37,42,44'  
--SET @CompanyIds= '1'
--SET @PBLIds = '3'--3,4,'--'7,3,5,28,40,4,33,37,38,20,35,41,43,44,45,47,48,49,50,55,57,58,59,60,61,62'
--SET @SaleTypeIds = ''--'1,2,3,4,5'
--SET @MainAreaIds = ''--'24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43'
--SET @SubAreaIds = ''--'149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238'
--SET @ProductIds = '' --'2545'
--SET @BatchNo = ''
--SET @CustomerIds= ''--'2780,2781'
--SET @SelectAll=2
--SET @FromDate = '2014-05-01'  
--SET @ToDate = '2014-05-31' 
--SET @IsCash= 1
--SET @IsCredit= 1
--SET @CustStatus = 0
--SET @IsinvoiceDate = 0
--SET @MAreaStatus = 0
--SET @SAreaStatus = 0
--SET @BookerStatus = 0
--SET @SupplierStatus = 0
--SET @PBLWise = 0
--SELECT * 
--INTO #CUSTOMER 
--FROM
--(
--	SELECT so.LocationId,
--		   SO.SaleOrderId,
--		   so.TransactionDate,
--		   SO.SalePassDate,
--		   so.SaleTypeId,
--		   SO.BookerId,
--		   SO.SupplierId,
--		   so.IsCash,
--		   csa.Customerid,
--		   csa.[Customer Name],
--		   csa.[Address],
--		   sa.MainAreaId,
--		   csa.SubAreaId,
--		   csa.[Sub Area]
--	FROM SALEORDER SO 
--	INNER JOIN uv_CustomerSalesArea csa ON SO.LocationId = CSA.LocationId 
--	 AND SO.CustomerId = CSA.CUSTOMERID 
--	INNER JOIN SubArea sa ON sa.SubAreaId = csa.SubAreaId
--	INNER JOIN   DBO.Split(@CompanyIds, ',' ) Company ON ( Company.Data = so.CompanyId OR @CompanyIds = '' )
--	INNER JOIN   DBO.Split(@CustomerIds, ',' ) Customer ON ( Customer.Data = so.CustomerId OR @CustomerIds = '' )
--	INNER JOIN DBO.Split(@LocationIds, ',' ) Loc ON ( Loc.Data = csa.LocationId OR @LocationIds = '')
--	INNER JOIN DBO.Split(@MainAreaIds, ',' ) MainArea ON ( MainArea.Data = csa.MainAreaId OR @MainAreaIds = '')
--	INNER JOIN DBO.Split(@SubAreaIds, ',' )  SubArea  ON ( SubArea.Data = csa.SubAreaId   OR @SubAreaIds = '' )


--	WHERE SO.IsRollbacked = 0 AND  so.CustomerToBeOpenedSubAreaId IS NULL AND 
--	(
--		@MAreaStatus = 0
--		OR (
--			   @MAreaStatus = 1
--			   AND (
--					   DATEDIFF(DAY, csa.[Main Area EffectiveDate], GETDATE()) >= 0
--					   AND DATEDIFF(DAY, GETDATE(), ISNULL(csa.[Main Area EndDate], GETDATE() + 1)) > 0
--				   )
--		   )
--		OR (
--			   @MAreaStatus = 2
--			   AND DATEDIFF(DAY, csa.[Main Area EndDate], ISNULL(GETDATE(), GETDATE() + 1)) > 0
--		   )
--	)	
--		AND 
--	(
--		@SAreaStatus = 0
--		OR (
--			   @SAreaStatus = 1
--			   AND (
--					   DATEDIFF(DAY, sa.EffectiveDate, GETDATE()) >= 0
--					   AND DATEDIFF(DAY, GETDATE(), ISNULL(sa.EndDate, GETDATE() + 1)) > 0
--				   )
--		   )
--		OR (
--			   @SAreaStatus = 2
--			   AND DATEDIFF(DAY, sa.EndDate, ISNULL(GETDATE(), GETDATE() + 1)) > 0
--		   )
--	)
--		AND 
--	(
--		@CustStatus = 0
--		OR (
--			   @CustStatus = 1
--			   AND (
--					   DATEDIFF(DAY, csa.[Cus Effective Date], GETDATE()) >= 0
--					   AND DATEDIFF(DAY, GETDATE(), ISNULL(csa.[Cus End Date], GETDATE() + 1)) > 0
--				   )
--		   )
--		OR (
--			   @CustStatus = 2
--			   AND DATEDIFF(DAY, csa.[Cus End Date], ISNULL(GETDATE(), GETDATE() + 1)) > 0
--		   )
--	)

--	UNION ALL

--	SELECT so.LocationId,
--		   SO.SaleOrderId,
--		   so.TransactionDate,
--		   SO.SalePassDate,
--		   so.SaleTypeId,
--		   SO.BookerId,
--		   SO.SupplierId,
--		   so.IsCash,
--		   csa.Customerid,
--		   SO.CustomerToBeOpenedName [Customer Name],
--		   so.CustomerToBeOpenedAddress [Address],
--		   sa.MainAreaId,
--		   sa.SubAreaId,
--		   sa.[Name] [Sub Area]
--	FROM SaleOrder so 
--	INNER JOIN  Customer csa ON so.LocationId = csa.LocationId 
--	 AND so.CustomerId = csa.CustomerId
--	INNER JOIN SubArea sa ON sa.SubAreaId = so.CustomerToBeOpenedSubAreaId
--	INNER JOIN MainArea ma ON ma.MainAreaId = sa.MainAreaId
--	INNER JOIN location l ON csa.LocationId = l.LocationId
--	INNER JOIN DBO.Split(@LocationIds, ',' ) Loc ON ( Loc.Data = csa.LocationId OR @LocationIds = '')
--	INNER JOIN DBO.Split(@MainAreaIds, ',' ) MainArea ON ( MainArea.Data = sa.MainAreaId OR @MainAreaIds = '')
--	INNER JOIN DBO.Split(@SubAreaIds, ',' )  SubArea  ON ( SubArea.Data = sa.SubAreaId   OR @SubAreaIds = '' )

--	WHERE SO.IsRollbacked = 0   
--	AND so.CustomerToBeOpenedSubAreaId IS NOT NULL 
--	AND 
--	(
--		@MAreaStatus = 0
--		OR (
--			   @MAreaStatus = 1
--			   AND (
--					   DATEDIFF(DAY, ma.EffectiveDate, GETDATE()) >= 0
--					   AND DATEDIFF(DAY, GETDATE(), ISNULL(ma.EndDate, GETDATE() + 1)) > 0
--				   )
--		   )
--		OR (
--			   @MAreaStatus = 2
--			   AND DATEDIFF(DAY, ma.EndDate, ISNULL(GETDATE(), GETDATE() + 1)) > 0
--		   )
--	)	
--		AND 
--	(
--		@SAreaStatus = 0
--		OR (
--			   @SAreaStatus = 1
--			   AND (
--					   DATEDIFF(DAY, sa.EffectiveDate, GETDATE()) >= 0
--					   AND DATEDIFF(DAY, GETDATE(), ISNULL(sa.EndDate, GETDATE() + 1)) > 0
--				   )
--		   )
--		OR (
--			   @SAreaStatus = 2
--			   AND DATEDIFF(DAY, sa.EndDate, ISNULL(GETDATE(), GETDATE() + 1)) > 0
--		   )
--	)
--		AND 
--	(
--		@CustStatus = 0
--		OR (
--			   @CustStatus = 1
--			   AND (
--					   DATEDIFF(DAY, csa.EffectiveDate, GETDATE()) >= 0
--					   AND DATEDIFF(DAY, GETDATE(), ISNULL(csa.EndDate, GETDATE() + 1))
--						   > 0
--				   )
--		   )
--		OR (
--			   @CustStatus = 2
--			   AND DATEDIFF(DAY, csa.EndDate, ISNULL(GETDATE(), GETDATE() + 1)) > 0
--		   )
--	)
--)C


SELECT 	
	l.ShortName AS [LOCATION NAME], 	
	A.SaleOrderId AS [SO NO],
	a.[SO DATE] ,
	convert(VARCHAR(10),A.[SALE DATE],103) AS [SALE DATE],
	right(convert(varchar(20),[SALE DATE],06), len(convert(varchar(20),[SALE DATE],06)) -3)AS [PERIOD],            
	A.CustomerId AS [CODE],
	csa.[Customer Name] AS [CUSTOMER NAME],
	csa.Address AS [ADDRESS],
	csa.[Main Area] AS [MAIN AREA],
	csa.[Sub Area] AS [SUB AREA],
	a.[SALE NATURE] AS [SALE NATURE],
	a.SaleTypeId,
	A.[SALE TYPE],	
	us.Name AS [BOOKER],	
	US1.Name AS [SUPPLIER],
	up.PBLShortName AS [PBL],
	Case when @PBLWise = 0 then  pl.[Description] ELSE '' END AS [PRODUCT LINE],
	Case when @PBLWise = 0 then A.ProductId ELSE '' END AS [PROD ID], 	
	Case when @PBLWise = 0 then UP.Name ELSE '' END AS [PRODUCT NAME], 		
	Case when @PBLWise = 0 then A.BatchNumber ELSE '' END AS [BATCH NO],
	Case when @PBLWise = 0 then B.ExpiryDate ELSE '1900-01-01' END AS [BATCH EXPIRY],
	Case when @PBLWise = 0 then isnull(A.[ORDER Quantity],0) ELSE 0 END AS [ORDER QUANTITY],
	Case when @PBLWise = 0 then isnull(A.[Invoice Quantity],0) ELSE 0 END AS [INVOICE QUANTITY],
	Case when @PBLWise = 0 then A.TP ELSE 0 END AS [TP],  
	-- pl.[Description] [PRODUCT LINE],
	--A.ProductId [PROD ID], 	
	--UP.Name AS [PRODUCT NAME], 		
	--A.BatchNumber AS [BATCH NO],
	--B.ExpiryDate AS [BATCH EXPIRY],
	--isnull(A.[ORDER Quantity],0) AS [ORDER QUANTITY],
	--isnull(A.[Invoice Quantity],0) AS [INVOICE QUANTITY],
	--A.TP AS [TP], 
	CONVERT(DECIMAL(18, 4),CASE WHEN ST.IsFree = 1 THEN 0 ELSE a.[TP Value] END) [TP VALUE],
	A.[Discount Value], 
	A.[Tax Value]
	INTO #temp
FROM 
(
	SELECT 
		so.LocationId, 
		CONVERT(VARCHAR(10),SO.SaleOrderId) AS SaleOrderId,
		SO.TransactionDate AS [SO DATE],
		SO.SalePassDate AS [SALE DATE],
		SO.SaleTypeId, 	
		st1.Name AS [SALE TYPE],			
--		C.MainAreaId,
--		C.SubAreaId,	
--		C.[Sub Area] AS [Sub Area],	
		SO.BookerId, 
		SO.SupplierId,
		SO.CustomerId,
--		C.[Customer Name] AS [Customer],
--		C.Address AS [Address],
		sop.PrincipalBusinessLineId, 
		sop.ProductId, 
		sop.StockTypeId, 
		sop.BatchNumber, 
		sop.TP,
		CASE WHEN SO.IsCash=1 THEN 'CASH' ELSE 'CREDIT' END AS [SALE NATURE], 
		sop.OrderQuantity  AS [ORDER Quantity],
		sop.SoldQuantity AS [Invoice Quantity],			
		ISNULL(sop.SoldQuantity * sop.TP,0)  [TP Value],
		sop.TotalOutputTaxGST + sop.TotalOutputTaxOther AS [Tax],
		(sop.SoldQuantity * sop.TP) + (sop.TotalOutputTaxGST + sop.TotalOutputTaxOther) [Amount],
		CASE WHEN ((sop.SoldQuantity * sop.TP) = 0) THEN 0 ELSE ISNULL(sop.Discount,0)/*/(sop.SoldQuantity * sop.TP) END * 100 */ END AS [Discount Value],
		CASE WHEN ((sop.SoldQuantity * sop.TP) = 0) THEN 0 ELSE (isnull(sop.TotalOutputTaxGST,0) + isnull(sop.TotalOutputTaxOther,0)) /*/ (sop.SoldQuantity * sop.TP)   END * 100 */ END [Tax Value],
		SO.SaleOrderId AS [SO]
	FROM SaleOrder SO INNER JOIN SaleOrderProduct sop ON   sop.LocationId = SO.LocationId 
		 AND   sop.SaleOrderId = SO.SaleOrderId 				
		INNER JOIN SaleType st1 ON st1.SaleTypeId = SO.SaleTypeId 
		INNER JOIN   DBO.Split(@CompanyIds, ',' ) Company ON ( Company.Data = SO.CompanyId OR @CompanyIds = '' )	
		INNER JOIN   DBO.Split(@LocationIds, ',' ) Loc ON  ( Loc.Data = SO.LocationId OR @LocationIds = '' )
		INNER JOIN   DBO.Split(@CustomerIds, ',' ) Customer ON ( Customer.Data = SO.CustomerId OR @CustomerIds = '' )						
		INNER JOIN   DBO.Split(@PBLIds, ',' ) PBL ON (PBL.Data = sop.PrincipalBusinessLineId OR @PBLIds = '' )
		INNER JOIN   DBO.Split(@ProductIds, ',' ) Product ON ( Product.Data = sop.ProductId OR @ProductIds = '' )			 
		INNER JOIN   DBO.Split(@SaleTypeIds, ',' ) SaleTypes ON ( SaleTypes.Data = so.SaleTypeId OR @SaleTypeIds = '' )			 
	
	WHERE  SO.IsRollbacked = 0
		AND sop.EndDate IS NULL 
		AND (@SelectAll = 0 OR (@SelectAll = 1 AND ( DATEDIFF(DAY,CASE WHEN @IsinvoiceDate = 1 THEN SO.TransactionDate ELSE SO.SalePassDate END ,  @FromDate) = 0))
        OR (@SelectAll = 2 AND ( DATEDIFF(DAY,CASE WHEN @IsinvoiceDate = 1 THEN SO.TransactionDate ELSE SO.SalePassDate END ,  @FromDate) <= 0
              AND  DATEDIFF(DAY,CASE WHEN @IsinvoiceDate = 1 THEN SO.TransactionDate ELSE SO.SalePassDate END ,  @ToDate) >= 0)))
		                                              	
		AND((@IsCash=1 AND SO.IsCash=1)  OR (@IsCredit=1 AND SO.IsCash=0)) 
		AND (@BatchNo = '' OR SOP.BatchNumber = @BatchNo)		


		
	UNION ALL
	
	SELECT 
		S.LocationId, 
		'SLN-'+ CONVERT(VARCHAR(10),s.SLNId) AS SaleOrderId,
		s.TransactionDate AS [SO DATE],
		S.TransactionDate AS [SALE DATE],
		NULL AS SaleTypeId, 
		'' [SALE TYPE],			
--		sa.MainAreaId, 
--		SA.SubAreaId,
--		sa.Name AS [Sub Area],
		s.UDLSalesForceId AS [BookerId], 
		s.UDLSalesForceId AS SupplierId,
		s.CustomerId,
--		csa.[Customer Name] AS [Customer],
--		csa.Address AS [Address],
		s.PrincipalBusinessLineId, 
		s2.ProductId, 
		s2.StockTypeId, 
		s2.BatchNumber, 
		pc.TP, 
		CASE WHEN s.IsCash=1 THEN 'CASH' ELSE 'CREDIT' END  AS [SALE NATURE],
		-1*s2.Quantity AS [ORDER Quantity],
		-1*s2.Quantity AS [Invoice Quantity],		
		-1*s2.Quantity * pc.TP  [TP Value],
		-1*S2.OutputTaxAmount AS [Tax],
		-1*(S2.Quantity * pc.TP) + S2.OutputTaxAmount [Amount],		
		CASE WHEN (s2.Quantity * pc.TP) = 0 THEN 0 ELSE (s.DiscountUDLPart + s.DiscountPrincipalPart)/*/(s.TotalTP) END  * 100 */ END AS [Discount],
		CASE WHEN (s2.Quantity * pc.TP) = 0 THEN 0 ELSE (S2.OutputTaxAmount/*/(s2.Quantity * pc.TP)) END * 100 */ ) END AS [Tax],		
		9999999 AS [SO]
	FROM SLN s
		INNER JOIN SLNProduct s2 ON s2.LocationId = s.LocationId AND s2.SLNId = s.SLNId   
--		INNER JOIN uv_CustomerSalesArea csa ON csa.CustomerId=S.CustomerId AND csa.LocationId=S.LocationId
--		INNER JOIN SubArea sa ON sa.SubAreaId=csa.SubAreaId
		INNER JOIN PriceCatalog pc ON  pc.PriceCatalogId=s2.PriceId
		INNER JOIN   DBO.Split(@CompanyIds, ',' ) Company ON ( Company.Data = s.CompanyId OR @CompanyIds = '' )	
		INNER JOIN   DBO.Split(@LocationIds, ',' ) Loc ON  ( Loc.Data = s.LocationId OR @LocationIds = '' )
		INNER JOIN   DBO.Split(@CustomerIds, ',' ) Customer ON ( Customer.Data = s.CustomerId OR @CustomerIds = '' )						
		INNER JOIN   DBO.Split(@PBLIds, ',' ) PBL ON (PBL.Data = s.PrincipalBusinessLineId OR @PBLIds = '' )			 
		INNER JOIN   DBO.Split(@ProductIds, ',' ) Product ON ( Product.Data = s2.ProductId OR @ProductIds = '' )			
--		INNER JOIN   DBO.Split(@MainAreaIds, ',' ) MainArea ON ( MainArea.Data = sa.MainAreaId OR @MainAreaIds = '' )
--		INNER JOIN   DBO.Split(@SubAreaIds, ',' ) SubArea ON ( SubArea.Data = sa.SubAreaId OR @SubAreaIds = '' )
	WHERE s2.Quantity > 0 AND
		(
           @SelectAll = 0
       OR  (
               @SelectAll = 1
          AND  (   
                   DATEDIFF(DAY,s.TransactionDate,  @FromDate) = 0
               )
           )
       OR  (
               @SelectAll = 2
          AND  (
                   DATEDIFF(DAY,s.TransactionDate,  @FromDate) <= 0
              AND  DATEDIFF(DAY,s.TransactionDate,  @ToDate) >= 0
               )
           )
		)	
	
		AND((@IsCash=1 AND s.IsCash=1)  OR (@IsCredit=1 AND s.IsCash=0)) 
		AND (@BatchNo = '' OR s2.BatchNumber = @BatchNo )
		AND s2.IsFree=0
		AND S.IsRollbacked = 0	
)
 AS A 
INNER JOIN  Batch b ON ( b.BatchNumber = A.BatchNumber AND   b.ProductId = A.ProductId )
INNER JOIN  uv_Product up ON  up.ProductId = A.ProductId
INNER JOIN ProductLine pl ON up.ProductLineId = pl.ProductLineId
INNER JOIN  Location l ON  l.LocationId = A.LocationId
INNER JOIN  StockType st ON  st.StockTypeId = A.StockTypeId
INNER JOIN uv_CustomerSalesArea csa ON csa.LocationId=A.LocationId AND csa.CustomerId=A.CustomerId
INNER JOIN   DBO.Split(@MainAreaIds, ',' ) MainArea ON ( MainArea.Data = csa.MainAreaId OR @MainAreaIds = '' )
INNER JOIN   DBO.Split(@SubAreaIds, ',' ) SubArea ON ( SubArea.Data = csa.SubAreaId OR @SubAreaIds = '' )

--TO INCLUDE SPOT AND SHOP SALE 
LEFT JOIN  UDLSalesForce us ON US.UDLSalesForceId = a.BookerId AND ( @BookerStatus = 0 OR ( @BookerStatus = 1 AND ( DATEDIFF(day, us.EffectiveDate,GETDATE())>= 0 AND DATEDIFF(day,GETDATE(), isnull( us.EndDate,GETDATE()+1))> 0))
	OR ( @BookerStatus = 2 AND  DATEDIFF(day,us.EndDate,ISNULL(GETDATE(), GETDATE()+1))>0 ))
LEFT JOIN  UDLSalesForce us1 ON US1.UDLSalesForceId = a.SupplierId AND ( @SupplierStatus = 0 OR ( @SupplierStatus = 1 AND ( DATEDIFF(day, us1.EffectiveDate,GETDATE())>= 0 AND DATEDIFF(day,GETDATE(), isnull( us1.EndDate,GETDATE()+1))> 0))
	OR ( @SupplierStatus = 2 AND  DATEDIFF(day,us1.EndDate,ISNULL(GETDATE(), GETDATE()+1))>0 ))
WHERE
		( @CustStatus = 0 OR ( @CustStatus = 1 AND ( DATEDIFF(day, csa.[Cus Effective Date],GETDATE())>= 0 AND DATEDIFF(day,GETDATE(), isnull( csa.[Cus End Date],GETDATE()+1))> 0))
	OR ( @CustStatus = 2 AND  DATEDIFF(day,csa.[Cus End Date],ISNULL(GETDATE(), GETDATE()+1))>0 ))
	AND  
	( @MAreaStatus = 0 OR ( @MAreaStatus = 1 AND ( DATEDIFF(day, csa.[Main Area EffectiveDate],GETDATE())>= 0 AND DATEDIFF(day,GETDATE(), isnull( csa.[Main Area EndDate],GETDATE()+1))> 0))
	OR ( @MAreaStatus = 2 AND  DATEDIFF(day,csa.[Main Area EndDate],ISNULL(GETDATE(), GETDATE()+1))>0 ))	
	AND  
	( @SAreaStatus = 0 OR ( @SAreaStatus = 1 AND ( DATEDIFF(day, csa.[Sub Area EffectiveDate],GETDATE())>= 0 AND DATEDIFF(day,GETDATE(), isnull( csa.EndDate,GETDATE()+1))> 0))
	OR ( @SAreaStatus = 2 AND  DATEDIFF(day,csa.EndDate,ISNULL(GETDATE(), GETDATE()+1))>0 ))

 	
ORDER  BY   
	L.SequenceId ,
	A.LocationId,
	[Location Name],
	a.[SO DATE],	
	A.CustomerId, 
	csa.[Customer Name],
	A.PrincipalBusinessLineId, 	 	
	A.ProductId
	
	
--DECLARE @PBLWise BIT 
--SET @PBLWise = 1
SELECT [LOCATION NAME], 	
	[SO NO],
	[SO DATE],
	[PERIOD],
	[SALE DATE],
	[CODE],
	[CUSTOMER NAME],
	[ADDRESS],
	[MAIN AREA],
	[SUB AREA],
	[SALE NATURE],
	SaleTypeId,
	[SALE TYPE],	
	[BOOKER],	
	[SUPPLIER],
	[PBL], 
	[PRODUCT LINE],
	[PROD ID], 	
	[PRODUCT NAME], 		
	[BATCH NO],
	[BATCH EXPIRY],
	[ORDER QUANTITY],
	[INVOICE QUANTITY],
	[TP],  
	SUM([TP VALUE]) AS [TP VALUE],
	SUM([Discount Value]) AS [Discount Value], 
	SUM([Tax Value]) AS [Tax Value]
FROM #Temp
GROUP BY 
[LOCATION NAME], 	
	[SO NO],
	[SO DATE] ,
	[PERIOD],
	[SALE DATE],
	[CODE],
	[CUSTOMER NAME],
	[ADDRESS],
	[MAIN AREA],
	[SUB AREA],
	[SALE NATURE],
	SaleTypeId,
	[SALE TYPE],	
	[BOOKER],	
	[SUPPLIER],
	[PBL], 
	[PRODUCT LINE],
	[PROD ID], 	
	[PRODUCT NAME], 		
	[BATCH NO],
	[BATCH EXPIRY],
	[ORDER QUANTITY],
	[INVOICE QUANTITY],
	[TP]
--DROP TABLE #Temp
  GO/************************************************************
 * Code formatted by SoftTree SQL Assistant � v4.6.12
 * Time: 5/19/2014 11:42:15 AM
 ************************************************************/

DECLARE @CompanyId      INT,
        @LocationIds    NVARCHAR(MAX),
        @PBLIds         NVARCHAR(MAX),
        @SelectAll      INT,
        @FromDate       DATETIME,
        @ToDate         DATETIME,
        @IsConsignment  BIT,
        @IsCommercial   BIT,
        @StockTypeIds   NVARCHAR(MAX)
 
SET @CompanyId = '1'
SET @LocationIds = '11'
SET @PBLIds = '28'
SET @StockTypeIds = ''
SET @SelectAll = '0'
SET @FromDate = ''
SET @ToDate = ''
SET @IsConsignment = ''
SET @IsCommercial = 1
  
SELECT ussl.LocationId,
       ussl.PrincipalBusinessLineId ,
       ussl.ProductId,
       -SUM(ussl.Quantity) [SoldQuantity],
       0 GRNQuantity
       --ussl.TransactionDate AS [Date]
FROM   uv_Sales_SLN ussl
       INNER JOIN PriceCatalog pc
            ON  ussl.PriceId = pc.PriceCatalogId
       INNER JOIN DBO.Split(@PBLIds, ',') PBL
            ON  (PBL.Data = ussl.PrincipalBusinessLineId OR @PBLIds = '')
       INNER JOIN DBO.Split(@LocationIds, ',') Location
            ON  (Location.Data = ussl.LocationId OR @LocationIds = '')
WHERE  @CompanyId = ussl.CompanyId
       AND (
               @SelectAll = 0
               OR (
                      @SelectAll = 1
                      AND (DATEDIFF(DAY, ussl.TransactionDate, @FromDate) = 0)
                  )
               OR (
                      @SelectAll = 2
                      AND (
                              DATEDIFF(DAY, ussl.TransactionDate, @FromDate) <=
                              0
                              AND DATEDIFF(DAY, ussl.TransactionDate, @ToDate) >
                                  = 0
                          )
                  )
           )
GROUP BY
       ussl.LocationId,
       ussl.PrincipalBusinessLineId,
       ussl.ProductId,
       ussl.TransactionDate


UNION ALL

SELECT usso.LocationId,
       usso.PrincipalBusinessLineId ,
       usso.ProductId,
       SUM(usso.SoldQuantity) [SoldQuantity],
       0 GRNQuantity
       --usso.SalePassDate AS [Date]
FROM   uv_Sales_SaleOrder usso
       INNER JOIN DBO.Split(@PBLIds, ',') PBL
            ON  (PBL.Data = usso.PrincipalBusinessLineId OR @PBLIds = '')
       INNER JOIN DBO.Split(@LocationIds, ',') Location
            ON  (Location.Data = usso.LocationId OR @LocationIds = '')
WHERE  @CompanyId = usso.CompanyId
       AND (
               @SelectAll = 0
               OR (
                      @SelectAll = 1
                      AND (DATEDIFF(DAY, usso.SalePassDate, @FromDate) = 0)
                  )
               OR (
                      @SelectAll = 2
                      AND (
                              DATEDIFF(DAY, usso.SalePassDate, @FromDate) <= 0
                              AND DATEDIFF(DAY, usso.SalePassDate, @ToDate) >= 0
                          )
                  )
           )
GROUP BY
       usso.LocationId,
       usso.PrincipalBusinessLineId,
       usso.ProductId,
       usso.SalePassDate

UNION ALL   
 
SELECT g.LocationId,
       G.PrincipalBusinessLineId,
       gp.GRNProductId AS ProductId,
       0 SoldQuantity,
       gp.QuantityReceived AS GRNQuantity--,g.TransactionDate
FROM   GRN g
       INNER JOIN DBO.Split(@LocationIds, ',') l
            ON  (l.Data = g.LocationId OR @LocationIds = '')
       INNER JOIN DBO.Split(@PBLIds, ',') pbl
            ON  (pbl.Data = g.PrincipalBusinessLineId OR @PBLIds = '')
       INNER JOIN GRNProduct gp
            ON  gp.GRNId = g.GRNId
            AND gp.LocationId = g.LocationId
WHERE  @CompanyId = g.CompanyId
       AND (
               @SelectAll = 0
               OR (
                      @SelectAll = 1
                      AND (DATEDIFF(DAY, g.TransactionDate, @FromDate) = 0)
                  )
               OR (
                      @SelectAll = 2
                      AND (
                              DATEDIFF(DAY, g.TransactionDate, @FromDate) <= 0
                              AND DATEDIFF(DAY, g.TransactionDate, @ToDate) >= 0
                          )
                  )
           )
       AND g.IsRollbacked = 0
			
			
 GODECLARE @CompanyId INT, @LocationIds NVARCHAR(200), @PBLIds NVARCHAR(200), @SchemeBasedOn BIT, @SchemeIds NVARCHAR(MAX),  @FromDate DATETIME, @ToDate DATETIME,
@Sharing INT,@DateStatus INT 

SET @CompanyId = '1'
SET @LocationIds = '14'
SET @PBLIds = '40'

SET @SchemeBasedOn = ''
SET @SchemeIds = ''

/*0-All
* 1-Specific
* 2-Between*/
SET @DateStatus = '2'
SET @FromDate = '2013-11-23 00:00:00.000'
SET @ToDate = '2013-11-26 00:00:00.000'

SET @Sharing = ''

SELECT so.SaleOrderId,
	so.SalePassDate,
	so.CustomerId,
	ISNULL(so.CustomerToBeOpenedName , c.[Name]) AS CustomerName,
	sop.PrincipalBusinessLineId,sop.ProductId,sop.SoldQuantity,
	sos.SchemeId , s.[Description] AS [Scheme Description]

FROM 
dbo.SaleOrder so 
INNER JOIN dbo.SaleorderProduct sop ON so.LocationId = sop.LocationId AND so.SaleOrderId = sop.SaleOrderId
INNER JOIN dbo.SaleOrderScheme sos ON so.LocationId = sos.LocationId AND so.SaleOrderId = sos.SaleOrderId
INNER JOIN dbo.[Scheme] s ON sos.SchemeId = s.SchemeId
INNER JOIN dbo.Customer c ON so.LocationId = c.LocationId AND so.CustomerId = c.CustomerId
INNER JOIN DBO.[Split](@LocationIds,',')LOC ON LOC.[Data] = so.LocationId OR @LocationIds = ''
INNER JOIN DBO.[Split](@SchemeIds,',')SI ON SI.[Data] = sos.SchemeId OR @SchemeIds = ''

WHERE so.CompanyId = @CompanyId
AND sop.PrincipalBusinessLineId =@PBLIds
AND (@DateStatus = 0
     OR (@DateStatus = 1 AND so.SalePassDate = @FromDate)
     OR (@DateStatus = 2 AND so.salePassDate BETWEEN @FromDate AND @ToDate)) GOCREATE PROC usp_Report_SalesPromotionDiscount @CompanyId INT, @PBLIds VARCHAR(100), @LocationIds VARCHAR(100), @FromDate DATETIME, @ToDate DATETIME, @SchemeGroupIds VARCHAR(1000), 
@ClaimGroupIds VARCHAR(1000), @SchemeIds VARCHAR(1000), @SharingBy INT, @IncludeReturns BIT, @FromBCGId INT, @ToBCGId INT, @FromBCGDate DATETIME, @ToBCGDate DATETIME, 
@SpecificBCGIds VARCHAR(100) AS

--DECLARE @CompanyId INT, @PBLIds VARCHAR(100), @LocationIds VARCHAR(100), @FromDate DATETIME, @ToDate DATETIME, @SharingBy INT, 
--@IncludeReturns BIT, @SchemeGroupIds VARCHAR(1000), @ClaimGroupIds VARCHAR(1000), @SchemeIds VARCHAR(1000), 
--@FromBCGId INT, @ToBCGId INT, @FromBCGDate DATETIME, @ToBCGDate DATETIME
--SET @CompanyId = 4
--SET @PBLIds = '1'--'1,2,3,10,17,19,20,22,23,24,25'--'27,28,21,22,23,26,29'--
--SET @LocationIds = '32'--'63,64,59,58,62,51,60,54,53,47,50,57'--'2,14,16,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54'
--SET @FromDate = '1900-01-01 00:00:00'--'2011-01-01'
--SET @ToDate = '2013-07-13 00:00:00'
--SET @SharingBy = 0 /*0.)ALL;1.)UDL;2.)PRINCIPAL*/
--SET @IncludeReturns = 1
--SET @SchemeGroupIds = ''--'6,8,11,16,17'
--SET @ClaimGroupIds = ''--'7,9,12,14,16,18'
--SET @SchemeIds = ''--'1,3,4,5,7,8,12,14,15,70,71,75,77,85,86,111,113,114,115,116,117,121,123,124,131,132,133'
--SET @FromBCGId = 142--0
--SET @ToBCGId = 142--999999
--SET @FromBCGDate = '1900-01-01 00:00:00'--'2012-12-08 00:00:00.000'
--SET @ToBCGDate = '2013-07-13 00:00:00'


SELECT so.LocationId,
       so.CustomerId,
       so.CustomerToBeOpenedName,
       so.CustomerToBeOpenedAddress,
       so.CustomerToBeOpenedSubAreaId,
       so.SaleOrderId,
       so.TransactionDate,
       DATEADD(DAY, DATEDIFF(DAY, 0, so.SalePassDate), 0) SalePassDate,
       so.SaleTypeId,
       so.IsCash,
	   s.SchemeGroupId,
	   s.ClaimGroupId,
	   s.SchemeId,
	   s.[Description] [SchemeDescription],
	   s.IsInvoiceBased,
	   bc.BranchClaimId [BCG Id], 
	   bc.TransactionDate [BCG Date],
	   s.PrincipalBusinessLineId,
	   s.AppliedProductId [ProductId],
	   s.AppliedStockTypeId [StockTypeId],
	   SUM(sos.AppliedOnTPValue) AppliedOnTPValue,
	   SUM
	   (
   		sos.Discount * 
		   (
   			(
   				CASE 
   				WHEN @SharingBy = 1 THEN s.UDLPercentage 
   				WHEN @SharingBy = 2 THEN (100 - s.UDLPercentage)
   				ELSE 100 
   				END
   			)/100
		   )
	   ) [Discount]
INTO #TempScheme
	   
FROM SaleOrder so
INNER JOIN SaleOrderScheme sos ON sos.LocationId = so.LocationId AND sos.SaleOrderId = so.SaleOrderId
INNER JOIN Scheme s ON s.SchemeId = sos.SchemeId
INNER JOIN dbo.[Split](@LocationIds, ',') fl ON fl.[Data] = so.LocationId
INNER JOIN dbo.[Split](@PBLIds, ',') fp ON fp.[Data] = s.PrincipalBusinessLineId
INNER JOIN dbo.[Split](@SchemeIds, ',') fs ON (fs.[Data] = s.SchemeId OR @SchemeIds = '')
INNER JOIN dbo.[Split](@SchemeGroupIds, ',') fsg ON (fsg.[Data] = s.SchemeGroupId OR @SchemeGroupIds = '')
INNER JOIN dbo.[Split](@ClaimGroupIds, ',') fsc ON (fsc.[Data] = s.ClaimGroupId OR @ClaimGroupIds = '')
LEFT JOIN BranchClaim bc ON bc.LocationId = sos.LocationId
 AND bc.BranchClaimId = sos.BranchClaimId
INNER JOIN dbo.[Split](@SpecificBCGIds, ',') fbn ON (fbn.[Data] = bc.BranchClaimId OR @SpecificBCGIds = '') 
WHERE so.CompanyId = @CompanyId
AND	(DATEDIFF(DAY, @FromDate, so.SalePassDate) >= 0)
AND (DATEDIFF(DAY, @ToDate, so.SalePassDate) <= 0)	
AND	ISNULL(bc.BranchClaimId, 0) >= @FromBCGId 
AND ISNULL(bc.BranchClaimId, 0) <= @ToBCGId	 
AND	(DATEDIFF(DAY, @FromBCGDate, ISNULL(bc.TransactionDate, '1900-01-01 00:00:00')) >= 0) 
AND (DATEDIFF(DAY, @ToBCGDate, ISNULL(bc.TransactionDate, '1900-01-01 00:00:00')) <= 0)	 
AND s.IsDiscountBased = 1
AND sos.EndDate IS NULL
AND 
(
	@SharingBy = 0
	OR
	(
		@SharingBy = 1 
		AND s.UDLPercentage > 0
	) 
	OR 
	(
		@SharingBy = 2
		AND (100 - s.UDLPercentage) > 0 
	)
)
GROUP BY so.LocationId, so.CustomerId, so.CustomerToBeOpenedName, so.CustomerToBeOpenedAddress, 
so.CustomerToBeOpenedSubAreaId, so.SaleOrderId, so.TransactionDate, DATEADD(DAY, DATEDIFF(DAY, 0, so.SalePassDate), 0), 
so.SaleTypeId, so.IsCash, s.SchemeGroupId, s.ClaimGroupId, s.SchemeId, s.[Description], s.IsInvoiceBased,
bc.BranchClaimId, bc.TransactionDate,
s.PrincipalBusinessLineId, s.AppliedProductId, s.AppliedStockTypeId
HAVING SUM
	   (
   		sos.Discount * 
		   (
   			(
   				CASE 
   				WHEN @SharingBy = 1 THEN s.UDLPercentage 
   				WHEN @SharingBy = 2 THEN (100 - s.UDLPercentage)
   				ELSE 100 
   				END
   			)/100
		   )
	   ) > 0




SELECT l.ShortName [Location],
c.CustomerId [Customer Code], 
ISNULL(a.CustomerToBeOpenedName, c.[Name]) [Customer Name],
ISNULL(a.CustomerToBeOpenedAddress, (c.Address1 + ' ' + c.Address2)) [Customer Address],
ma.[Name] [Customer Main Area],
sa.[Name] [Customer Sub Area],
a.SaleOrderId [Sale Order Id],
a.TransactionDate [Sale Order Date],
a.SalePassDate [Sale Pass Date],
slt.Code [Sale Type],
CASE WHEN a.IsCash = 1 THEN 'CASH' ELSE 'CREDIT' END [Sale Nature],

sg.SchemeGroupId [Scheme Group Id], 
sg.[Name] [Scheme Group Name], 
sg.ShortName [Scheme Group Short Name],
cg.ClaimGroupId [Claim Group Id], 
cg.[Name] [Claim Group Name], 
cg.ShortName [Claim Group Short Name],
a.SchemeId [Scheme Code], 
a.[SchemeDescription] [Scheme Description],
CASE WHEN a.IsInvoiceBased = 1 THEN 'YES' ELSE 'NO' END [Invoice Based],
a.SLNId [SLN Id], 
a.[SLNDate] [SLN Date],

a.[BCG Id],
a.[BCG Date],

pbl.[Name] [PBL],

a.ProductId [Product Code],
up.ShortName [Product Name], 
st.[Name] [Stock Type], 
a.Quantity, 
a.Value [Applied On Value],
a.Discount [Discount Amount],
(a.Discount / a.Value) * 100 [Discount %], 
a.Value - a.Discount [Net Value]

FROM
(
	--SELECT 0 [IsReturn],
	--       so.LocationId,
	--       so.CustomerId,
	--       so.CustomerToBeOpenedName,
	--       so.CustomerToBeOpenedAddress,
	--       so.CustomerToBeOpenedSubAreaId,
	--       so.SaleOrderId,
	--       so.TransactionDate,
	--       so.SalePassDate,
	--       so.SaleTypeId,
	--       so.IsCash,
	--       sc.SchemeGroupId,
	--       sc.ClaimGroupId,
	--       sc.SchemeId,
	--       sc.[SchemeDescription],
	--       NULL SLNId,
	--       NULL [SLNDate],
	--       sc.PrincipalBusinessLineId,
	--       so.ProductId,
	--       so.StockTypeId,
	--       so.Quantity,
	--       so.Value,
	--       so.Discount
	--FROM  #TempScheme so
	--INNER JOIN
	--(
		SELECT 0 [IsReturn],
		       sos.LocationId,
		       sos.CustomerId,
		       sos.CustomerToBeOpenedName,
		       sos.CustomerToBeOpenedAddress,
		       sos.CustomerToBeOpenedSubAreaId,
		       sos.SaleOrderId,
		       sos.TransactionDate,
		       sos.SalePassDate,
		       sos.SaleTypeId,
		       sos.IsCash,
		       sos.SchemeGroupId,
		       sos.ClaimGroupId,
		       sos.SchemeId,
		       sos.[SchemeDescription],
		       sos.IsInvoiceBased,
		       NULL SLNId,
		       NULL [SLNDate],
		       sos.[BCG Id],
		       sos.[BCG Date],
		       sos.PrincipalBusinessLineId,
		       NULL ProductId,
		       NULL StockTypeId,
		       NULL Quantity,
		       sos.AppliedOnTPValue VALUE,
		       sos.Discount
		FROM #TempScheme sos
		WHERE sos.IsInvoiceBased = 1

		UNION ALL
					   
		SELECT 0 [IsReturn],
		       sos.LocationId,
		       sos.CustomerId,
		       sos.CustomerToBeOpenedName,
		       sos.CustomerToBeOpenedAddress,
		       sos.CustomerToBeOpenedSubAreaId,
		       sos.SaleOrderId,
		       sos.TransactionDate,
		       sos.SalePassDate,
		       sos.SaleTypeId,
		       sos.IsCash,
		       sos.SchemeGroupId,
		       sos.ClaimGroupId,
		       sos.SchemeId,
		       sos.[SchemeDescription],
		       sos.IsInvoiceBased,
		       NULL SLNId,
		       NULL [SLNDate],
		       sos.[BCG Id],
		       sos.[BCG Date],
		       sos.PrincipalBusinessLineId,
		       sop.ProductId,
		       sop.StockTypeId,
		       sop.Quantity,
		       sop.Value,
		       sos.Discount
		--SUM(sop.Quantity) Quantity, SUM(sop.Value) Value, SUM(sos.Discount) Discount
		FROM 
		(
			SELECT sop1.LocationId, sop1.SaleOrderId, sop1.ProductId, sop1.StockTypeId, SUM(sop1.SoldQuantity) Quantity, SUM(sop1.SoldQuantity * sop1.TP) VALUE--, SUM(sop1.Discount) Discount
			FROM SaleOrderProduct sop1
			WHERE sop1.EndDate IS NULL
			GROUP BY sop1.LocationId, sop1.SaleOrderId, sop1.ProductId, sop1.StockTypeId
		)
		sop 
		INNER JOIN #TempScheme sos ON sos.LocationId = sop.LocationId
		 AND sos.SaleOrderId = sop.SaleOrderId
		 AND sos.ProductId = sop.ProductId
		 AND sos.StockTypeId = sop.StockTypeId
		WHERE sos.IsInvoiceBased = 0 

		UNION ALL

		SELECT 1 [IsReturn],
			   s.LocationId,
			   s.CustomerId,
			   NULL CustomerToBeOpenedName,
			   NULL CustomerToBeOpenedAddress,
			   NULL CustomerToBeOpenedSubAreaId,
			   s.SaleOrderId,
			   so.TransactionDate,
			   so.SalePassDate,
			   so.SaleTypeId,
			   s.IsCash,
			   NULL SchemeGroupId,
			   NULL ClaimGroupId,
			   NULL SchemeId,
			   NULL [SchemeDescription],
			   0 IsInvoiceBased,
			   s.SLNId,
			   s.TransactionDate [SLNDate],
			   bc.BranchClaimId [BCG Id],
		       bc.TransactionDate [BCG Date],
			   s.PrincipalBusinessLineId,
			   s2.ProductId,
			   s2.StockTypeId,
			   -SUM(s2.Quantity) Quantity,
			   -SUM(s2.Quantity * pc.TP) VALUE,
			   -
			   (
   				--SUM
				   (
					   CASE 
							WHEN @SharingBy = 1 THEN s.DiscountUDLPart
							WHEN @SharingBy = 2 THEN s.DiscountPrincipalPart
							ELSE (s.DiscountUDLPart + s.DiscountPrincipalPart)
					   END
				   )
				   /
				   (SELECT COUNT(*) FROM SLNProduct s3 WHERE s3.LocationId = s.LocationId AND s3.SLNId = s.SLNId AND s3.Quantity > 0 AND s3.IsFree = 0) 
			   ) [Discount]
		FROM SLN s
		INNER JOIN SLNProduct s2 ON s2.LocationId = s.LocationId 
		 AND s2.SLNId = s.SLNId
		INNER JOIN PriceCatalog pc ON pc.PriceCatalogId = s2.PriceId 
		INNER JOIN dbo.[Split](@LocationIds, ',') fl ON fl.[Data] = s.LocationId
		INNER JOIN dbo.[Split](@PBLIds, ',') fp ON fp.[Data] = s.PrincipalBusinessLineId
		LEFT JOIN SaleOrder so ON so.LocationId = s.LocationId
		 AND so.SaleOrderId = s.SaleOrderId
		LEFT JOIN
		(
			SELECT DISTINCT bc.LocationId, bc.BranchClaimId, bc.TransactionDate, bcbd.SLNId 
			FROM BranchClaimBonusDiscount bcbd
			INNER JOIN BranchClaim bc ON bc.LocationId = bcbd.LocationId AND bc.BranchClaimId = bcbd.BranchClaimId
			INNER JOIN dbo.[Split](@SpecificBCGIds, ',') fbn ON (fbn.[Data] = bc.BranchClaimId OR @SpecificBCGIds = '')
			WHERE ISNULL(bcbd.SLNId, 0) > 0
			AND bcbd.ClaimAmount != 0
			AND bc.IsRollbacked = 0	
		) bc ON bc.LocationId = S.LocationId
		 AND bc.SLNId = S.SLNId 
		WHERE s.CompanyId = @CompanyId
		AND	(DATEDIFF(DAY, @FromDate, s.ApprovalDate) >= 0)
		AND (DATEDIFF(DAY, @ToDate, s.ApprovalDate) <= 0)
		AND	ISNULL(bc.BranchClaimId, 0) >= @FromBCGId 
		AND ISNULL(bc.BranchClaimId, 0) <= @ToBCGId	 
		AND	(DATEDIFF(DAY, @FromBCGDate, ISNULL(bc.TransactionDate, '1900-01-01 00:00:00')) >= 0) 
		AND (DATEDIFF(DAY, @ToBCGDate, ISNULL(bc.TransactionDate, '1900-01-01 00:00:00')) <= 0)	 
		AND @IncludeReturns = 1
		AND s2.IsFree = 0
		AND 
			(
				(
					@SharingBy = 0
					AND (ISNULL(s.DiscountUDLPart, 0) > 0 OR ISNULL(s.DiscountPrincipalPart, 0) > 0)
				)
				OR
				(
					@SharingBy = 1 
					AND ISNULL(s.DiscountUDLPart, 0) > 0
				) 
				OR 
				(
					@SharingBy = 2
					AND ISNULL(s.DiscountPrincipalPart, 0) = 0 
				)
			)
		GROUP BY s.LocationId,
			   s.CustomerId,
			   s.SaleOrderId,
			   so.TransactionDate,
			   so.SalePassDate,
			   so.SaleTypeId,
			   s.IsCash,
			   s.SLNId,
			   s.TransactionDate,
			   bc.BranchClaimId,
		       bc.TransactionDate,
			   s.PrincipalBusinessLineId,
			   s2.ProductId,
			   s2.StockTypeId,
			   s.DiscountUDLPart,
			   s.DiscountPrincipalPart
		HAVING SUM(s2.Quantity) > 0
) A
INNER JOIN Location l ON l.LocationId = a.LocationId
INNER JOIN Customer c ON c.LocationId = a.LocationId
 AND c.CustomerId = a.CustomerId
INNER JOIN uv_CustomerSalesArea csa ON csa.LocationId = A.LocationId 
 AND csa.CustomerId = A.CustomerId 
INNER JOIN SubArea sa ON sa.SubAreaId = ISNULL(a.CustomerToBeOpenedSubAreaId, csa.SubAreaId)
INNER JOIN MainArea ma ON ma.MainAreaId = sa.MainAreaId 
INNER JOIN uv_PrincipalBusinessLine_All pbl ON pbl.PrincipalBusinessLineId = a.PrincipalBusinessLineId

LEFT JOIN uv_Product up ON up.ProductId = a.ProductId
LEFT JOIN StockType st ON st.StockTypeId = a.StockTypeId
  
LEFT JOIN SaleType slt ON slt.SaleTypeId = a.SaleTypeId
LEFT JOIN SchemeGroup sg ON sg.SchemeGroupId = a.SchemeGroupId
LEFT JOIN ClaimGroup cg ON cg.ClaimGroupId = a.ClaimGroupId

ORDER BY ISNULL(l.SequenceId, 9999 + L.LocationId), c.CustomerId, a.[IsReturn], a.SaleOrderId, a.SchemeId, a.SLNId

DROP TABLE #TempScheme
 GO
--CREATE PROC usp_Report_PaidDCReport @LocationIds varchar(100),@SupplierIds varchar(100),@SaleTypeIds varchar(100),@FromDate datetime,
--@ToDate datetime,@DCSelectAll int,@DCRange varchar(1000), @FromDCID varchar(100), @ToDCID varchar(100)
--AS 

DECLARE  @LocationIds  varchar(1000),@SupplierIds  varchar(1000),@SaleTypeIds  varchar(1000),@FromDate datetime, @ToDate datetime,@DCSelectAll int,
@DCRange varchar(1000), @FromDCID varchar(100), @ToDCID varchar(100)

SET @LocationIds='14'
SET @SupplierIds=''
SET @SaleTypeIds=''
SET @FromDate='2012-07-20'
SET @ToDate='2014-01-20'
SET @DCSelectAll=0
SET @DCRange = '1'
SET @FromDCID = '1'
SET @ToDCID = '9999'

--SELECT    st.Code AS [Sale Type],
--		A.LocationId, 
--		l.ShortName AS [Location Name],
--		A.DeliveryChallanId AS [DC No], 
--		CONVERT(varchar(12),A.TransactionDate,103)  AS [DC Date],
--		CONVERT(varchar(12),A.ExpectedReturnDate,103) AS [ExpectedReturnDate], 
--		A.[Payment Id],-- AS [Payment Id], 
--		CONVERT(varchar(12),A.[Payment Date],103) AS [Payment Date], 
--		A.SupplierId,
--		us.Name AS [Supplier Name],		
--		sop.PrincipalBusinessLineId,
--		up.PBLShortName AS [PBL Name],
--		sop.ProductId,
--		up.Name AS [Product Name],
--		sop.StockTypeId,st2.Name AS [Stock Type],
--		sum(sop.SoldQuantity) AS SoldQuantity,
--		sum(sop.TP*sop.SoldQuantity) AS [TP Value],
--		sum(sop.Discount) AS [Discount],
--		sum(sop.TotalOutputTaxGST+sop.TotalOutputTaxOther) AS [Tax],
--		sum(A.TotalNet) TotalNet,
--		sum((sop.TP*sop.SoldQuantity)-sop.Discount +(sop.TotalOutputTaxGST+sop.TotalOutputTaxOther)) AS [Total-SOP]
SELECT *		
FROM    
(
	
	SELECT dc.LocationId,
		dc.DeliveryChallanId,
	    dc.TransactionDate,
		dc.ExpectedReturnDate, 
		CSP.TransactionDate AS [Payment Date],
		csp.CashSalePaymentId AS [Payment Id], 
		csp.IsApproved,
		csp.IsRollbacked, 
		dc.SupplierId,
		DC.TotalNet
	FROM DeliveryChallan dc 
	INNER JOIN CashSalePayment csp ON csp.LocationId = dc.LocationId AND csp.DeliveryChallanId = dc.DeliveryChallanId 
	--INNER JOIN Location l ON l.LocationId = dc.LocationId
	INNER JOIN DBO.Split(@LocationIds, ',') LOC ON   (LOC.Data = dc.LocationId OR @LocationIds = '')
	INNER JOIN DBO.Split(@SaleTypeIds, ',') SaleType ON   (SaleType.Data = dc.SaleTypeId OR @SaleTypeIds = '')
	INNER JOIN DBO.Split(@SupplierIds, ',') UDLSupplier ON (UDLSupplier.Data = dc.SupplierId OR @SupplierIds = '')
	WHERE   csp.IsRollbacked = 0
	--AND csp.IsApproved=1
	AND 
	  (
		@DCSelectAll = 0
		OR (@DCSelectAll = 2 AND ((@FromDCID = '0' OR  DC.DeliveryChallanId >= @FromDCID) AND  (@ToDCID = '0' OR  DC.DeliveryChallanId <= @ToDCID)))
		OR (@DCSelectAll = 1 AND  DC.DeliveryChallanId IN (SELECT S.DATA FROM   DBO.Split(@DCRange, ',') S))
	  ) 
	AND (@FromDate='' OR  DATEDIFF(DAY, csp.TransactionDate,  @FromDate) <= 0)
	AND (@ToDate='' OR  DATEDIFF(DAY, csp.TransactionDate,  @ToDate) >= 0)

	UNION ALL 

	SELECT dc.LocationId,
			dc.DeliveryChallanId,
			DC.TransactionDate,
			DC.ExpectedReturnDate,
			CSP.TransactionDate  AS [Payment Date],
			csp.CashSalePaymentId AS [Payment Id], 
			csp.IsApproved,
			csp.IsRollbacked, 
			dc.SupplierId,
			dc.TotalNet
	FROM DeliveryChallan dc 
	INNER JOIN CashSalePaymentShopSale cspss ON cspss.LocationId = dc.LocationId AND cspss.DeliveryChallanId = dc.DeliveryChallanId
	INNER JOIN CashSalePayment csp ON csp.LocationId = cspss.LocationId AND csp.CashSalePaymentId  = cspss.CashSalePaymentId
	--INNER JOIN Location l ON l.LocationId = dc.LocationId
	INNER JOIN DBO.Split(@LocationIds, ',') LOC ON   (LOC.Data = dc.LocationId OR @LocationIds = '')
	INNER JOIN DBO.Split(@SaleTypeIds, ',') SaleType ON   (SaleType.Data = dc.SaleTypeId OR @SaleTypeIds = '')
	WHERE   csp.IsRollbacked = 0
	--AND csp.IsApproved=1
	AND 
	  (
		@DCSelectAll = 0
		OR (@DCSelectAll = 2 AND ((@FromDCID = '0' OR  DC.DeliveryChallanId >= @FromDCID) AND  (@ToDCID = '0' OR  DC.DeliveryChallanId <= @ToDCID)))
		OR (@DCSelectAll = 1 AND  DC.DeliveryChallanId IN (SELECT S.DATA FROM   DBO.Split(@DCRange, ',') S))
	  ) 
	AND (@FromDate='' OR  DATEDIFF(DAY, csp.TransactionDate,  @FromDate) <= 0)
	AND (@ToDate='' OR  DATEDIFF(DAY, csp.TransactionDate,  @ToDate) >= 0)
) A
		INNER JOIN   SaleOrder so ON   so.LocationId = a.LocationId 
		AND   so.DeliveryChallanId = a.DeliveryChallanId
		INNER JOIN   SaleOrderProduct sop ON   sop.LocationId = so.LocationId 
		AND   sop.SaleOrderId = so.SaleOrderId
		
		INNER JOIN SaleType st ON st.SaleTypeId = so.SaleTypeId
		INNER JOIN uv_Product up ON up.ProductId = sop.ProductId
		INNER JOIN StockType st2 ON st2.StockTypeId = sop.StockTypeId
		--INNER JOIN Location l ON l.LocationId = A.LocationId	
		LEFT  JOIN UDLSalesForce us ON us.LocationId = a.LocationId 
		AND us.UDLSalesForceId = a.SupplierId	
		WHERE sop.EndDate IS NULL
		
--GROUP BY
--		a.LocationId,  l.ShortName,l.SequenceId,
--		a.DeliveryChallanId,
--		a.TransactionDate,
--		a.ExpectedReturnDate, 
--		a.[Payment Id], 
--		a.IsApproved,
--		a.IsRollbacked,
--		A.[Payment Date], 
--		a.SupplierId,
--		sop.PrincipalBusinessLineId,
--		up.PBLShortName,
--		sop.ProductId,
--		up.Name,
--		sop.StockTypeId,st2.Name,
--		us.Name,
--		st.Code
		
--		ORDER BY l.SequenceId GOSELECT s.SICId
	,s.PrincipalBusinessLineId
	,sp.SICProductId
	,sp.Quantity
  FROM SIC s inner join SICProduct sp on s.LocationId = sp.LocationId AND s.SICId = sp.SICId
  INNER JOIN SICType sict ON s.SICTypeId= sict.SICTypeId
  INNER JOIN StockType st ON st.StockTypeId = s.ToStockTypeId
  INNER JOIN uv_product up ON up.ProductId = sp.ProductId
  INNER JOIN batch b ON b.ProductId = sp.ProductId AND b.BatchNumber = sp.BatchNumber
--INNER JOIN PriceCatalog pc ON pc.PriceCatalogId = sp.PriceId
--INNER JOIN Location l ON l.LocationId = s.LocationId
  WHERE s.locationid = 14 AND s.PrincipalBusinessLineId = 3
  SELECT * FROM SICProduct s WHERE s.SICId = 18
  SELECT * FROM sic WHERE LocationId = 14 AND PrincipalBusinessLineId = 3 AND IsRollbacked = 0 GO--SELECT so.LocationId,so.SaleorderId,so.TotalNet AS SOAmount,SUM((sop.SoldQuantity * sop.TP)+(sop.TP/(sop.WHTRate*100))) AS SOProductAmount
--FROM Saleorder so 
--INNER JOIN SaleOrderProduct sop 
--	ON so.locationId = sop.LocationId
--	AND so.SaleOrderId = sop.SaleOrderId
--INNER JOIN PriceCatalog pc 
--	ON pc.PriceCatalogId = sop.PriceId
--WHERE   so.IsRollbacked = 0 
--		AND sop.SoldQuantity > 0
--		AND so.SalePassDate IS NOT NULL 
--		AND sop.EndDate IS  NULL
--		AND sop.WHTRate > 0 
--GROUP BY so.LocationId,so.SaleOrderId,so.TotalNet,sop.TP,sop.WHTRate
--HAVING  sum(so.TotalNet) <> SUM((sop.SoldQuantity * sop.TP)+ (sop.TP/(sop.WHTRate*100)))

SELECT * FROM (
SELECT sln.LocationId,sln.SLNId,sln.TransactionDate,sln.TotalNet as SLNAmount,SUM(sln.Quantity * pc.TP) AS SLNProductAmount,(sln.TotalNet+sln.DiscountUDLPart+sln.DiscountPrincipalPart) - SUM((sln.Quantity * pc.TP)+sln.OutputTaxAmount)  AS AmountDiff
FROM uv_sales_SLN sln 
INNER JOIN PriceCatalog pc 
	ON pc.PriceCatalogId = sln.PriceId
WHERE   sln.IsRollbacked = 0 
		AND sln.Quantity > 0 
		--AND locationId = 36 AND SLNID = 6
GROUP BY sln.LocationId,sln.SLNId,sln.TransactionDate,sln.TotalNet,sln.DiscountUDLPart,sln.DiscountPrincipalPart
)
a
WHERE a.AmountDiff>1
ORDER BY a.LocationId,a.SLNId

SELECT * FROM uv_Sales_SLN uss WHERE locationId = 12 AND SLNID = 18  GO/************************************************************
 * Code formatted by SoftTree SQL Assistant � v4.6.12
 * Time: 6/18/2014 11:06:23 AM
 ************************************************************/

DECLARE @FromDate     DATETIME,
        @ToDate       DATETIME,
        @IsCash       BIT,
        @IsCredit     BIT,
        @LocationIds  NVARCHAR(MAX),
        @PBLIds       NVARCHAR(MAX),
        @CustomerIds  NVARCHAR(MAX),
        @MainAreaIds  nvarchar(MAX),
        @SubAreaIds   NVARCHAR(MAX),
        @Product      NVARCHAR(MAX),
        @CompanyId    INT,
        @SaleTpyeIds  VARCHAR(50)

SET @FromDate = '2014-06-01'
SET @ToDate = '2014-06-17'
SET @IsCash = 1
SET @IsCredit = 1

SELECT l.ShortName,
       l.Name,
       l.SequenceId,
       sln.CustomerId,
       ucsa.[Customer Name],
       ucsa.[Sub Area],
       ucsa.[Main Area],
       sln.ProductId,
       up.Name AS ProductName,
       sln.PrincipalBusinessLineId,
       sln.PriceId,
       sln.Quantity,
       pc.TP,
       sln.Quantity * pc.TP AS [TP VALUE],
       sln.SLNId,
       sln.CompanyId
FROM   uv_Sales_SLN AS sln
       INNER JOIN Location AS l
            ON  sln.LocationId = l.LocationId
       INNER JOIN uv_CustomerSalesArea AS ucsa
            ON  sln.CustomerId = ucsa.CustomerId
       INNER JOIN uv_Product AS up
            ON  sln.ProductId = up.ProductId
            AND sln.PrincipalBusinessLineId = up.PrincipalBusinessLineId
       INNER JOIN PriceCatalog AS pc
            ON  sln.PriceId = pc.PriceCatalogId
WHERE  (sln.IsCash = 1 AND @IsCash = 1) OR (sln.IsCash = 0 AND @IsCredit = 1)
       AND (sln.IsRollbacked = 0)
       AND DATEDIFF(d, sln.TransactionDate, @FromDate) >= 0
       AND DATEDIFF(d, sln.TransactionDate, @ToDate) <= 0 
ORDER BY l.SequenceId,ucsa.MainAreaId,ucsa.SubAreaId,ucsa.CustomerId
 GOSELECT * FROM saleorder so 
WHERE locationid = 11 
	AND customerid = 8170
	AND saleorderid = 7
----------------------------
SELECT * FROM customer
WHERE customerid = 8170
	AND locationid = 11
----------------------------
SELECT * 
FROM saleorder so
WHERE so.LocationId = 11
	AND so.CustomerId = 6678
----------------------------
SELECT * 
FROM Creditcollection cc
WHERE cc.locationid = 11 
	AND	cc.CreditCollectionId = 6 GOSELECT * FROM Resource
SELECT * FROM resource r WHERE r.resourceid = 685
SELECT * FROM resource r WHERE r.ParentId = 542 ORDER BY r.SortOrderNo

SELECT * FROM Privilege p

--UPDATE resource 
--SET [Type] = 'REPORTS', [Name] = 'Gross Sale and Gross &Margin'
--WHERE ResourceId = 685 GOINSERT INTO [DBSV2_Live].[dbo].[Resource]
           ([FormFileName]
           ,[Name]
           ,[Code]
           ,[ParentId]
           ,[Type]
           ,[Depth]
           ,[SortOrderNo]
           ,[ShowInMenu]
           ,[ShortcutKey]
           ,[SeperatorInMenu]
           ,[IsStockReleatedScreen]
           ,[IsCustomerReleatedScreen]
           ,[IsConsignment]
           ,[IsCommercial]
           ,[IsUsageLoggingRequired]
           ,[ModuleId]
           ,[Parameter]
           ,[AllowDuringDayCycleOnly]
           ,[OnLoadBehaviorId]
           ,[OnSaveBehaviorId]
           ,[AllowProductOnes]
           ,[InsertDate]
           ,[InsertedBy]
           ,[UpdateDate]
           ,[UpdatedBy]
           ,[ToSend]
           ,[CommunicationId])
     VALUES(
           'frmGrossSaleAndGrossMargin'
           ,'Gross Sale and Gross Margin'
           ,'R174-'
           ,542
           ,'REPORT'
           ,3
           ,13
           ,1
           ,NULL
           ,0
           ,0
           ,0
           ,1
           ,1
           ,0
           ,6
           ,NULL
           ,0
           ,2
           ,2
           ,0
           ,'2013-05-18 14:17:33.697'
           ,1
           ,NULL
           ,0
           ,1
           ,NULL)
GO


 GOSELECT SUM(sop.SoldQuantity),sum(so.TotalOutputTax)
FROM saleorder so 
  INNER JOIN SaleOrderProduct sop  on so.locationid= sop.LocationId AND so.saleorderid = sop.SaleOrderId
  --INNER JOIN SaleOrderTax sot ON so.LocationId = sot.LocationId AND so.SaleOrderId = sot.SaleOrderId
  --INNER JOIN ProductTax pt ON sot.ProductTaxId =pt.ProductTaxId AND sop.ProductId = pt.ProductId 
  --INNER JOIN Tax t ON pt.TaxId = t.TaxId
WHERE so.LocationId = 11 AND sop.ProductId = 993 AND so.SalePassDate BETWEEN '2014-04-01 00:00:00.000' AND '2014-04-15 23:59:00.000'

SELECT slnp.productId,SUM(slnp.Quantity),SUM(slnp.InputTaxAmount),SUM(slnp.OutputTaxAmount)
FROM SLN sln 
  INNER JOIN SLNProduct slnp  on sln.locationid= slnp.LocationId AND sln.SLNID= slnp.SLNID
  --INNER JOIN SaleOrderTax sot ON sln.LocationId = sot.LocationId AND sln.SaleOrderId = slnp.SaleOrderId
  --INNER JOIN ProductTax pt ON sot.ProductTaxId =pt.ProductTaxId AND sop.ProductId = pt.ProductId 
  --INNER JOIN Tax t ON pt.TaxId = t.TaxId
WHERE sln.IsRollbacked = 0 and sln.TransactionDate BETWEEN '2014-04-01 00:00:00.000' AND '2014-04-15 23:59:00.000'
GROUP BY slnp.ProductId
HAVING SUM(slnp.InputTaxAmount)> 0 Or SUM(slnp.OutputTaxAmount)>0 

SELECT up.PrincipalBusinessLineId FROM uv_Product up WHERE up.ProductId IN (1523
,1977
,1978
,2161
,2465
,2520
,2526
,2527
,2532
,2545
,2546
,2549
,2555
,2556
,2561
,2566
,2577
,2578
,2698
,2701)




SELECT * FROM uv_Product up WHERE up.ProductId = 2545
 GOSELECT * FROM INFORMATION_SCHEMA.TABLES t
WHERE t.table_NAME LIKE '%inter%Branch%'
ORDER BY t.TABLE_NAME

SELECT * FROM InterBranchCollection 
SELECT * FROM InterBranchCollectionSaleOrder


SELECT * FROM SnDInterBranchCollection sdbc GOSELECT * FROM saleorder so WHERE so.LocationId = 14 AND so.SaleTypeId = (SELECT st.saletypeId FROM SaleType st WHERE st.Code = 'SPL')
SELECT * FROM SaleOrderProduct sop WHERE sop.LocationId = 14 AND sop.SaleOrderId = 2156

SELECT * FROM saleorder so --WHERE so.LocationId = 14 AND so.SaleTypeId = (SELECT st.saletypeId FROM SaleType st WHERE st.Code = 'SPL')) 
inner join saleorderscheme sos ON so.locationid = sos.locationid AND  so.saleorderid = sos.saleorderId
INNER JOIN SCHEME s ON sos.schemeId = s.SchemeId 
WHERE sos.locationid = 14 and s.IsDiscountBased = 0 AND s.IsInvoiceBased = 0 AND s.IsMBI=0 

SELECT * FROM schemeDetail sd WHERE sd.appliedQuantity <5 AND sd.appliedQuantity >0

SELECT * FROM saleorder so inner join saleorderscheme sos 
on so.locationid= sos.locationid and sos.saleorderid = so.saleorderid
INNER JOIN SCHEME s ON sos.schemeId = s.schemeId   
WHERE so.locationid = 14 AND so.deliverychallanId =251--IN (88,158,251,255)

SELECT * FROM SaleOrderProduct sop WHERE sop.LocationId = 14 AND sop.SaleOrderId = 251 GODECLARE @FromDate DATETIME, @ToDate DATETIME
SET @FromDate = '2009-12-26 00:00:00.000'--'2013-11-01 00:00:00'
SET @ToDate = '2011-01-01 23:59:59.000'

--/*NO CRITERIA*/
--SELECT * FROM SaleOrder so
--INNER JOIN SaleOrderProduct sop ON sop.LocationId = so.LocationId
--AND sop.SaleOrderId = so.SaleOrderId

--/*DATEDIFF*/
--SELECT * FROM SaleOrder so
--INNER JOIN SaleOrderProduct sop ON sop.LocationId = so.LocationId
--AND sop.SaleOrderId = so.SaleOrderId
--WHERE DATEDIFF(DAY, so.SalePassDate,  @FromDate) <= 0
--AND  DATEDIFF(DAY, so.SalePassDate,  @ToDate) >= 0

/*BETWEEN*/
SELECT * FROM SaleOrder so
INNER JOIN SaleOrderProduct sop ON sop.LocationId = so.LocationId
AND sop.SaleOrderId = so.SaleOrderId
WHERE so.SalePassDate BETWEEN @FromDate AND @ToDate



CHECKPOINT; 
GO 
DBCC DROPCLEANBUFFERS; 
GO
DBCC FREEPROCCACHE
GO
 GO--usp_Report_SNDOpeningBalance

--exec usp_Report_SNDOpeningBalance 5,58,29
CREATE PROC dbo.usp_Report_SNDOpeningBalance @CompanyId int, @LocationId int,@SNDID int
AS

Declare		@PreviousSNDID		numeric(5,0),
			@PreviousSndToDate	datetime,
			@OB_DD				numeric(15,2)
	
SELECT @PreviousSNDID = MAX(sndid),
		@PreviousSndToDate = ISNULL(MAX(s.ToDate), (SELECT MIN(sd.ToDate) FROM SnD sd WHERE sd.CompanyId = @CompanyId  
AND sd.LocationId = @LocationId AND sd.RollbackDate IS NULL))
FROM snd s WHERE s.CompanyId = @CompanyId  
AND s.LocationId=@LocationId AND s.SnDId < @SNDID AND s.RollbackDate IS NULL


--Create temp table
CREATE TABLE #TempSNDOpeningBalance (CompanyID numeric(9,0),LocationID numeric(9,0),SNDID numeric(9,0),
								Cash numeric(15,2),Cheque numeric(15,2),Vault numeric(15,2),DD_PO numeric(15,2),TC numeric(15,2),OtherDocument numeric(15,2)
								,BalanceDeposited numeric(15,2),BankBalance numeric(15,2),TotalBankBalance numeric(15,2),
								ReturnDocument numeric(15,2),BankCharges numeric(15,2),Shortage numeric(15,2),DirectlyRemitted numeric(15,2),
								Customer_ADJ numeric(15,2), OS_ADV_ADJ numeric(15,2), SLN_ADJ numeric(15,2), CN_ADJ numeric(15,2),
								WHT_ADJ numeric(15,2), IBC_ADJ numeric(15,2), ROUNDOFF numeric(15,2))


--Working for opening balance
--===========================
--Cash and Vault
INSERT INTO #TempSNDOpeningBalance (CompanyID,LocationID,SNDID,Cash,Vault)
(
SELECT	@CompanyId,@LocationId,@SNDID,
		OpeningBalanceSafe,OpeningBalanceVault 
FROM	SnD s inner JOIN SnDCashDetail scd ON s.LocationId = scd.LocationId AND s.SnDId = scd.SnDId
WHERE	s.CompanyId=@CompanyId AND s.LocationId=@LocationId AND s.SnDId=@SNDID AND s.RollbackDate IS NULL
)


--CHEQUE,DD_PO,TC,OTHER
INSERT INTO #TempSNDOpeningBalance (CompanyID,LocationID,SNDID,CHEQUE,DD_PO,TC,OtherDocument)
(
SELECT	@CompanyId,@LocationId,@SNDID,
		ISNULL(sum((CASE WHEN pm.typecode='CHQ' AND sdm.Type='D' THEN sdm.Amount ELSE 0 END)),0) AS CHEQUE,
		ISNULL(sum((CASE WHEN pm.typecode IN ('DD','PO') AND sdm.Type='D' THEN sdm.Amount ELSE 0 END)),0) AS DD,
		ISNULL(sum((CASE WHEN pm.typecode IN ('TC') AND sdm.Type='D' THEN sdm.Amount ELSE 0 END)),0) AS TC,
		ISNULL(sum((CASE WHEN pm.typecode NOT IN ('TC','CHQ','DD','PO','TC') AND sdm.Type='D' THEN sdm.Amount ELSE 0 END)),0) AS OTHER

FROM snd s
		INNER JOIN SnDBankDocMovement sdm ON sdm.LocationId = s.LocationId AND sdm.SnDId = s.SnDId
		INNER JOIN PaymentTransaction pt ON pt.LocationId = sdm.LocationId AND pt.PaymentTransactionId = sdm.PaymentTransactionId
		INNER JOIN PaymentMode pm ON pm.PaymentModeId=pt.PaymentModeId
WHERE	s.CompanyId=@CompanyId and	s.LocationId=@LocationId AND s.SnDId < @SNDID AND (sdm.DepositedSnDId >=@SNDID OR sdm.DepositedSnDId IS null) 
		AND s.RollbackDate IS null
)

--DD_PO,TC,OTHER (Other Doc Remit to HO)
INSERT INTO #TempSNDOpeningBalance (CompanyID,LocationID,SNDID,DD_PO,TC,OtherDocument)
(
SELECT @CompanyId,@LocationId,@SNDID,
		ISNULL(sum((CASE WHEN pm.typecode IN ('DD','PO') THEN v.AdjustedAmount ELSE 0 END)),0) AS DD,
		ISNULL(sum((CASE WHEN pm.typecode IN ('TC') THEN v.AdjustedAmount ELSE 0 END)),0) AS TC,
		ISNULL(sum((CASE WHEN pm.typecode NOT IN ('TC','DD','PO') THEN v.AdjustedAmount ELSE 0 END)),0) AS OTHER 
FROM snd s
		INNER JOIN uv_SNDPaymentTransaction v ON v.CompanyId=s.CompanyId AND  v.LocationId = s.LocationId AND v.SnDId = s.SnDId 
INNER JOIN PaymentTransaction pt ON pt.CompanyId = v.CompanyId AND pt.LocationId = v.LocationId AND pt.PaymentTransactionId = v.PaymentTransactionId
INNER JOIN PaymentMode pm ON pm.PaymentModeId = pt.PaymentModeId
WHERE  s.CompanyId=@CompanyId and	s.LocationId=@LocationId AND s.SnDId < @SNDID AND pm.IsToBeRemitted=1 AND s.RollbackDate IS null
AND Not exists (SELECT PaymentTransactionId FROM SnDRemittanceOtherDoc sdod  INNER JOIN SnD sdo ON sdo.LocationId = sdod.LocationId AND sdo.SnDId = sdod.SnDId
                WHERE  sdod.LocationId=v.LocationId and v.PaymentTransactionId=sdod.PaymentTransactionId   AND sdod.SnDId < @SNDID  AND sdo.RollbackDate IS null)
)

--CASH DD OB
INSERT INTO #TempSNDOpeningBalance (CompanyID,LocationID,SNDID,DD_PO)
(
SELECT	@CompanyId,@LocationId,@SNDID,
		ISNULL(sum(sdd.Amount),0)
FROM snd s
		INNER JOIN SnDCashDD sdd ON sdd.LocationId = s.LocationId AND sdd.SnDId = s.SnDId
WHERE	s.CompanyId=@CompanyId and	s.LocationId=@LocationId AND s.SnDId < @SNDID  AND s.RollbackDate IS null
)
--BANK DD OB
INSERT INTO #TempSNDOpeningBalance (CompanyID,LocationID,SNDID,DD_PO)
(
SELECT	@CompanyId,@LocationId,@SNDID,
		ISNULL(sum(sdd.Amount),0)
FROM snd s
		INNER JOIN SnDBankDD sdd ON sdd.LocationId = s.LocationId AND sdd.SnDId = s.SnDId
WHERE	s.CompanyId=@CompanyId and	s.LocationId=@LocationId AND s.SnDId < @SNDID  AND s.RollbackDate IS null
)
--CASH DD & BANK DD Remittance OB
INSERT INTO #TempSNDOpeningBalance (CompanyID,LocationID,SNDID,DD_PO)
(
SELECT	@CompanyId,@LocationId,@SNDID,
		(ISNULL(sum(sr.TotalCashDD),0)*-1 ) + (ISNULL(sum(sr.TotalbankDD),0)*-1 )
FROM snd s
		INNER JOIN SnDRemittance sr ON sr.LocationId = s.LocationId AND sr.SnDId = s.SnDId
WHERE	s.CompanyId=@CompanyId and	s.LocationId=@LocationId AND s.SnDId < @SNDID  AND s.RollbackDate IS null
)





--BalanceDeposited, BankBalance
--INSERT INTO #TempSNDOpeningBalance (CompanyID,LocationID,SNDID,BalanceDeposited,BankBalance)
--(
--SELECT	@CompanyId,@LocationId,@SNDID,	
--		isnull(sum(isnull(BalanceDeposited,0)),0) ,isnull(sum(isnull(BankBalance,0)),0)
--FROM	#TempBankBalance 
--WHERE	OB = 1
--)


--RETURN CHQ, BANK CHARGES
INSERT INTO #TempSNDOpeningBalance (CompanyID,LocationID,SNDID,ReturnDocument,BankCharges)
(
SELECT	@CompanyId,@LocationId,@SNDID,	
		sdb.BalanceReturned,sdb.TotalBankCharges
FROM	snd s inner JOIN SnDBankDetail sdb ON sdb.LocationId = s.LocationId AND sdb.SnDId = s.SnDId 
WHERE	s.CompanyId=@CompanyId and sdb.LocationId=@LocationId AND s.SnDId = @PreviousSNDID AND s.RollbackDate IS null
)

--Shortage OB from O/B Shortage

--Shortage OB from cash sale payment
INSERT INTO #TempSNDOpeningBalance (CompanyID,LocationID,SNDID,Shortage)
(
SELECT	@CompanyId,@LocationId,@SNDID,	
		SHORTAGE=ISNULL(sum(ISNULL(csp.Shortage,0)),0)
FROM	CashSalePayment csp 
		INNER JOIN SnDCashSalePayment sdsp ON sdsp.LocationId=csp.LocationId AND sdsp.CashSalePaymentId=csp.CashSalePaymentId
		INNER JOIN snd s ON s.LocationId = sdsp.LocationId AND s.SnDId = sdsp.SnDId
WHERE	s.CompanyId=@CompanyId  AND s.LocationId=@LocationId AND s.SnDId < @SNDID AND s.RollbackDate IS NULL AND csp.Shortage>0


--Shortage OB from credit collection

UNION all
SELECT	@CompanyId,@LocationId,@SNDID,	
		SHORTAGE=ISNULL(sum(ISNULL(cc.Shortage,0)),0)
FROM	CreditCollection cc 
		INNER JOIN SnDCreditCollection scc ON scc.LocationId=cc.LocationId AND scc.CreditCollectionId=cc.CreditCollectionId
		INNER JOIN snd s ON s.LocationId = scc.LocationId AND s.SnDId = scc.SnDId
WHERE	s.CompanyId=@CompanyId  AND s.LocationId=@LocationId AND s.SnDId < @SNDID AND s.RollbackDate IS NULL AND cc.Shortage>0
--Shortage OB from cash reduction
UNION all
SELECT	@CompanyId,@LocationId,@SNDID,	
		SHORTAGE=ISNULL(sum(ISNULL(cr.ReductionAmount,0)),0) 
FROM	SnDCashReduction cr
		INNER JOIN snd s ON s.LocationId = cr.LocationId AND s.SnDId = cr.SnDId
WHERE	s.CompanyId=@CompanyId  AND s.LocationId=@LocationId AND s.SnDId < @SNDID AND s.RollbackDate IS NULL 
--		SND Refrence table missing with opening balance shortage

UNION all
		SELECT  @CompanyId,@LocationId,@SNDID,
				SHORTAGE=ISNULL(sum(ISNULL(obs.Shortageamount,0)),0) FROM obSMShortage obs
		WHERE   obs.LocationId = @LocationId AND obs.CompanyId =@CompanyId 
--Shortage OB from Adjustment
UNION all
SELECT	@CompanyId,@LocationId,@SNDID,	
		SHORTAGE=ISNULL(sum(ISNULL(sc.CollectedAmount,0)),0) * -1 
FROM	SnDShortageCollection sc
		INNER JOIN snd s ON s.LocationId = sc.LocationId AND s.SnDId = sc.SnDId
WHERE	s.CompanyId=@CompanyId  AND s.LocationId=@LocationId AND s.SnDId < @SNDID AND s.RollbackDate IS NULL
)

-- Adjustment SLN, CN, WHT, Advance, OS Advance, IBC
-----------------------------------------------------------------------------------------------
INSERT INTO #TempSNDOpeningBalance (CompanyID,LocationID,SNDID,Customer_ADJ,OS_ADV_ADJ,SLN_ADJ,CN_ADJ,WHT_ADJ,IBC_ADJ)
(

SELECT	@CompanyId,@LocationId,@SNDID,
		ISNULL(sum(sd.CustomerAdvanceAdjusted),0) * -1,
		ISNULL(sum(sd.OutstationAdvanceAdjusted),0) *-1,
		ISNULL(sum(sd.SLNAdjusted),0),
		ISNULL(sum(sd.CustomerCNAdjusted),0),
		ISNULL(sum(sd.WHTDeducted ),0),
		ISNULL(sum(sd.InterBranchCollectionAdjusted ),0) * -1
FROM snd s 
		INNER JOIN SnDCollection sd ON sd.LocationId = s.LocationId AND sd.SnDId = s.SnDId
WHERE	s.CompanyId=@CompanyId  AND s.LocationId=@LocationId AND s.SnDId < @SNDID    AND s.RollbackDate IS null		
GROUP BY s.CompanyId,s.LocationId,s.SnDId

--SELECT	@CompanyId,@LocationId,@SNDID,	
--		ISNULL(sum(ISNULL(csp.CustomerAdvanceAdjusted,0)),0)  * -1 
--		,ISNULL(sum(ISNULL(csp.OSAdvanceAdjusted,0)),0) * -1
--		,ISNULL(sum(ISNULL(csp.SLNAdjusted,0)),0)
--		,ISNULL(sum(ISNULL(csp.CreditNoteAdjusted,0)),0)
--		,ISNULL(sum(ISNULL(csp.WHTAdjusted,0)),0)
--		,0 --IBC
--FROM	CashSalePayment csp 
--		INNER JOIN SnDCashSalePayment sdsp ON sdsp.LocationId=csp.LocationId AND sdsp.CashSalePaymentId=csp.CashSalePaymentId
--		INNER JOIN snd s ON s.LocationId = sdsp.LocationId AND s.SnDId = sdsp.SnDId
--WHERE	s.CompanyId=@CompanyId  AND s.LocationId=@LocationId AND s.SnDId < @SNDID    AND s.RollbackDate IS null
--		AND s.RollbackDate IS null
--GROUP BY s.CompanyId,s.LocationId,s.SnDId
--UNION all

--SELECT	@CompanyId,@LocationId,@SNDID,	
--		sum(ISNULL(cc.CustomerAdvanceAdjusted,0))  * -1
--		,sum(ISNULL(cc.OSAdvanceAdjusted,0))  * -1
--		,sum(ISNULL(cc.SLNAdjusted,0))
--		,sum(ISNULL(cc.CreditNoteAdjusted,0))
--		,sum(ISNULL(cc.WHTAdjusted,0))
--		,sum(ISNULL(cc.InterBranchCollectionAmount,0)) * -1
--FROM	CreditCollection cc 
--		INNER JOIN SnDCreditCollection scc ON scc.LocationId=cc.LocationId AND scc.CreditCollectionId=cc.CreditCollectionId
--		INNER JOIN snd s ON s.LocationId = scc.LocationId AND s.SnDId = scc.SnDId
--WHERE	s.CompanyId=@CompanyId  AND s.LocationId=@LocationId AND s.SnDId < @SNDID  AND s.RollbackDate IS null
--GROUP BY s.CompanyId,s.LocationId,s.SnDId

UNION ALL

SELECT	@CompanyId,@LocationId,@SNDID,	
		sum(ISNULL(da.TotalAdvance,0))  * -1
		,0 --OSAdvanceAdjusted
		,sum(ISNULL(da.TotalSLN,0))
		,sum(ISNULL(da.TotalCreditNote,0))
		,0 --WHTAdjusted
		,0 --InterBranchCollectionAmount
FROM DirectAdjustment da
WHERE da.CompanyId=@CompanyId and da.LocationId=@LocationId AND da.TransactionDate <@PreviousSndToDate AND da.ApprovalDate IS NOT null

UNION ALL
SELECT	@CompanyId,@LocationId,@SNDID,	
		0 -- AdvanceAdjusted
		,0 --OSAdvanceAdjusted
		,0 --SLN Adjusted
		,0 --CN Adjusted
		,sum(ISNULL(ow.Amount,0))   --WHTAdjusted
		,0 --InterBranchCollectionAmount
FROM obWHT ow
WHERE ow.CompanyId=@CompanyId  AND ow.LocationId=@LocationId 


--======================================
--Credit Entry -- Customer CN Adjustment
--======================================

UNION ALL
--Credit Entry -- CN Adjustment
SELECT	@CompanyId,@LocationId,@SNDID,	
		0 -- AdvanceAdjusted
		,0 --OSAdvanceAdjusted
		,0 -- SLN Adjusted
		,sum(ISNULL(cn.amount,0)) * -1
		,0 --WHTAdjusted
		,0 --InterBranchCollectionAmount
FROM CustomerCreditNote cn
WHERE cn.CompanyId=@CompanyId and cn.LocationId=@LocationId AND cn.BranchApprovalDate <@PreviousSndToDate AND cn.BranchApprovalDate IS NOT NULL

--Credit Entry -- SLN Adjustment
UNION all
SELECT	@CompanyId,@LocationId,@SNDID,	
		 0 -- AdvanceAdjusted
		,0 --OSAdvanceAdjusted
		,sum(ISNULL(s.TotalNet,0)) * -1 
		,0 --CN Adjusted
		,0 --WHTAdjusted
		,0 --InterBranchCollectionAmount
FROM SLN s
WHERE s.CompanyId=@CompanyId and s.LocationId=@LocationId AND s.ApprovalDate <@PreviousSndToDate  AND s.RollbackDate IS NULL
UNION ALL

--Credit Entry -- Customer ADV Adjustment
SELECT	@CompanyId,@LocationId,@SNDID,	
		sum(ISNULL(ca.Amount,0)) -- AdvanceAdjusted
		,0 --OSAdvanceAdjusted
		,0 --SLN Adjusted
		,0 --CN Adjusted
		,0 --WHTAdjusted
		,0 --InterBranchCollectionAmount
FROM CustomerAdvance ca
INNER JOIN SnDCustomerAdvance sd ON sd.LocationId = ca.LocationId AND sd.CustomerAdvanceId = ca.CustomerAdvanceId
INNER JOIN snd s ON s.LocationId = sd.LocationId AND s.SnDId = sd.SnDId
WHERE	s.CompanyId=@CompanyId  AND s.LocationId=@LocationId AND s.SnDId < @SNDID AND  s.RollbackDate IS null

UNION ALL

--Credit Entry -- OS ADV Adjustment
SELECT	@CompanyId,@LocationId,@SNDID,	
		0 -- AdvanceAdjusted
		,sum(ISNULL(oa.Amount,0)) --OSAdvanceAdjusted
		,0 --SLN Adjusted
		,0 --CN Adjusted
		,0 --WHTAdjusted
		,0 --InterBranchCollectionAmount
FROM OutstationAdvance oa
INNER JOIN SnDOutstationAdvance sd ON sd.LocationId = oa.LocationId AND sd.OutstationAdvanceId = oa.OutstationAdvanceId
INNER JOIN snd s ON s.LocationId = sd.LocationId AND s.SnDId = sd.SnDId
WHERE	s.CompanyId=@CompanyId  AND s.LocationId=@LocationId AND s.SnDId < @SNDID AND s.ApprovalDate IS NOT NULL  AND s.RollbackDate IS null

UNION ALL
--Credit Entry -- WHT Adjustment

SELECT	@CompanyId,@LocationId,@SNDID,	
		0 -- AdvanceAdjusted
		,0 --OSAdvanceAdjusted
		,0 --SLN Adjusted
		,0 --CN Adjusted
		,sum(ISNULL(ws.adjustedAmount,0))   * -1   --WHTAdjusted
		,0 --InterBranchCollectionAmount
FROM WHTChallan w
INNER JOIN WHTChallanSaleOrder ws ON ws.LocationId = w.LocationId AND ws.WHTChallanId = w.WHTChallanId
INNER JOIN CashSalePayment csp ON csp.LocationId = ws.LocationId AND csp.CashSalePaymentId = ws.CashSalePaymentId
INNER JOIN SnDCashSalePayment scsp ON scsp.LocationId = csp.LocationId AND scsp.CashSalePaymentId = csp.CashSalePaymentId
INNER JOIN snd s ON s.LocationId = scsp.LocationId AND s.SnDId = scsp.SnDId
WHERE s.CompanyId=@CompanyId AND s.LocationId=@LocationId AND s.SnDId<@SNDID AND ws.CashSalePaymentId IS NOT NULL  AND s.RollbackDate IS null

UNION ALL

SELECT	@CompanyId,@LocationId,@SNDID,	
		0 -- AdvanceAdjusted
		,0 --OSAdvanceAdjusted
		,0 --SLN Adjusted
		,0 --CN Adjusted
		,sum(ISNULL(ws.adjustedAmount,0))   * -1   --WHTAdjusted
		,0 --InterBranchCollectionAmount
FROM WHTChallan w
INNER JOIN WHTChallanSaleOrder ws ON ws.LocationId = w.LocationId AND ws.WHTChallanId = w.WHTChallanId
INNER JOIN CreditCollection cc ON cc.LocationId = ws.LocationId AND cc.CreditCollectionId = ws.CreditCollectionId
INNER JOIN SnDCreditCollection scc ON scc.LocationId = cc.LocationId AND scc.CreditCollectionId = cc.CreditCollectionId
INNER JOIN snd s ON s.LocationId = scc.LocationId AND s.SnDId = scc.SnDId
WHERE s.CompanyId=@CompanyId AND s.LocationId=@LocationId AND s.SnDId<@SNDID AND ws.CreditCollectionId IS NOT NULL  AND s.RollbackDate IS null

UNION all
SELECT	@CompanyId,@LocationId,@SNDID,	
		0 -- AdvanceAdjusted
		,0 --OSAdvanceAdjusted
		,0 --SLN Adjusted
		,0 --CN Adjusted
		,sum(ISNULL(wr.AdjustedAmount,0))   * -1   --WHTAdjusted
		,0 --InterBranchCollectionAmount
FROM WHTReversal wr 
INNER JOIN SnDWHTReversal sd ON sd.LocationId = wr.LocationId AND sd.WHTReversalId = wr.WHTReversalId
INNER JOIN snd s ON s.LocationId = sd.LocationId AND s.SnDId = sd.SnDId
WHERE s.CompanyId=@CompanyId AND s.LocationId=@LocationId AND s.SnDId<@SNDID  AND s.RollbackDate IS null




UNION all

SELECT	@CompanyId,@LocationId,@SNDID,	
		0 -- AdvanceAdjusted
		,0 --OSAdvanceAdjusted
		,0 --SLN Adjusted
		,0 --CN Adjusted
		,0 --WHTAdjusted
		,sum(ISNULL(ibc.TotalAmount,0))  --InterBranchCollectionAmount
FROM InterBranchCollection ibc
INNER JOIN SnDInterBranchCollection sibc ON sibc.LocationId = ibc.LocationId AND sibc.InterBranchCollectionId = ibc.InterBranchCollectionId
INNER JOIN snd s ON s.LocationId = sibc.LocationId AND s.SnDId = sibc.SnDId AND s.CompanyId=ibc.CompanyId
WHERE s.CompanyId=@CompanyId AND s.LocationId=@LocationId AND s.SnDId<@SNDID AND s.RollbackDate IS NULL

)

SELECT CompanyID,LocationID,SNDID
		,ISNULL(SUM(ISNULL(Cash,0)),0) AS Cash
		,ISNULL(SUM(ISNULL(Cheque,0)),0) AS Cheque
		,ISNULL(SUM(ISNULL(Vault,0)),0) AS Vault
		,ISNULL(SUM(ISNULL(DD_PO,0)),0) AS DD_PO
		,ISNULL(SUM(ISNULL(TC,0)),0) AS TC
		,ISNULL(SUM(ISNULL(OtherDocument,0)),0) AS OtherDocument
		,ISNULL(SUM(ISNULL(BalanceDeposited,0)),0) AS BalanceDeposited
		,ISNULL(SUM(ISNULL(BankBalance,0)),0) AS BankBalance
		,ISNULL(SUM(ISNULL(TotalBankBalance,0)),0) AS TotalBankBalance
		,ISNULL(SUM(ISNULL(ReturnDocument,0)),0) AS ReturnDocument
		,ISNULL(SUM(ISNULL(BankCharges,0)),0) AS BankCharges
		,ISNULL(SUM(ISNULL(Shortage,0)),0) AS Shortage
		,ISNULL(SUM(ISNULL(DirectlyRemitted,0)),0) AS DirectlyRemitted
		,ISNULL(SUM(ISNULL(Customer_ADJ,0)),0) AS Customer_ADJ
		,ISNULL(SUM(ISNULL(OS_ADV_ADJ,0)),0) AS OS_ADV_ADJ
		,ISNULL(SUM(ISNULL(SLN_ADJ,0)),0) AS SLN_ADJ
		,ISNULL(SUM(ISNULL(CN_ADJ,0)),0) AS CN_ADJ
		,ISNULL(SUM(ISNULL(WHT_ADJ,0)),0) AS WHT_ADJ
		,ISNULL(SUM(ISNULL(IBC_ADJ,0)),0) AS IBC_ADJ
		,ISNULL(SUM(ISNULL(ROUNDOFF,0)),0) AS ROUNDOFF
--INTO #SNDOpeningBalance	
FROM #TempSNDOpeningBalance
GROUP BY CompanyID,LocationID,SNDID

--DELETE FROM #TempSNDOpeningBalance

--INSERT INTO #TempSNDOpeningBalance
--SELECT * FROM #SNDOpeningBalance

--DROP TABLE #SNDOpeningBalance
--SELECT * FROM #TempSNDOpeningBalance
DROP TABLE #TempSNDOpeningBalance
 GO
CREATE PROCEDURE usp_Report_MonthlyManagementReport @CompanyIds INT, @LocationIds VARCHAR(250),@PBLIds VARCHAR(250),@SelectAll INT,@FromDate DATETIME,@ToDate DATETIME
AS
--DECLARE @CompanyIds INT, @LocationIds VARCHAR(250),@PBLIds VARCHAR(250),@SelectAll INT,@FromDate DATETIME,@ToDate DATETIME
--SET @CompanyIds = 1
--SET @LocationIds = ''
--SET @PBLIds = ''
--SET @SelectAll = 2
--SET @FromDate = '2014-04-01 00:00:00.000'
--SET @ToDate = '2014-04-06 00:00:00.000'


SELECT usso.LocationId, usso.SaleOrderId, usso.PrincipalBusinessLineId, usso.IsCash, SUM(usso.soldquantity*usso.tp) [TotalTP]
INTO #TempSO
FROM uv_Sales_SaleOrder usso
INNER JOIN   DBO.Split(@PBLIds, ',') PBL ON  (PBL.Data = usso.PrincipalBusinessLineId OR @PBLIds = '')
INNER JOIN   DBO.Split(@LocationIds, ',') Location ON  (Location.Data = usso.LocationId OR @LocationIds = '')
WHERE usso.CompanyId = @CompanyIds
AND 
(
	@SelectAll = 0 
	OR ( @SelectAll = 1 AND DATEDIFF(DAY,usso.SalePassDate,@FromDate)=0) 
	OR ( @SelectAll = 2 AND DATEDIFF(DAY,usso.SalePassDate,@FromDate)<=0 AND DATEDIFF(DAY,usso.SalePassDate,@ToDate)>=0)
)
GROUP BY usso.LocationId, usso.SaleOrderId, usso.PrincipalBusinessLineId, usso.IsCash	

SELECT
l.SequenceId,
a.[LocationId],
l.ShortName AS [LOCATION],
upbla.PBLSequenceId,
a.PrincipalBusinessLineId,
upbla.[Name] AS [PBL],
--SUM(a.[GROSS SALE CASH]) AS [GROSS SALE CASH],
--SUM(a.[GROSS SALE CR]) AS [GROSS SALE CR],
--SUM(a.[GROSS UDL DISCOUNT CASH]) AS [GROSS UDL DISCOUNT CASH],
--SUM(a.[GROSS PBL DISCOUNT CASH]) AS [GROSS PBL DISCOUNT CASH],
--SUM(a.[GROSS UDL DISCOUNT CR]) AS [GROSS UDL DISCOUNT CR],
--SUM(a.[GROSS PBL DISCOUNT CR]) AS [GROSS PBL DISCOUNT CR],
--SUM(a.[SLN CASH]) AS [SLN CASH],
--SUM(a.[SLN CR]) AS [SLN CR], 
--SUM(a.[SLN UDL DISCOUNT CASH]) AS [SLN UDL DISCOUNT CASH], 
--SUM(a.[SLN PBL DISCOUNT CASH]) AS [SLN PBL DISCOUNT CASH],
--SUM(a.[SLN UDL DISCOUNT CR]) AS [SLN UDL DISCOUNT CR],
--SUM(a.[SLN PBL DISCOUNT CR]) AS [SLN PBL DISCOUNT CR]
(SUM(a.[GROSS SALE CASH]) -SUM(a.[GROSS UDL DISCOUNT CASH]) - SUM(a.[GROSS PBL DISCOUNT CASH])) AS [CASH SALE],
(SUM(a.[GROSS SALE CR]) - SUM(a.[GROSS UDL DISCOUNT CR]) - SUM(a.[GROSS PBL DISCOUNT CR])) AS [CREDIT SALE],
(SUM(a.[SLN CASH]) - SUM(a.[SLN UDL DISCOUNT CASH]) - SUM(a.[SLN PBL DISCOUNT CASH])) AS [CASH S.RTN],
(SUM(a.[SLN CR]) - SUM(a.[SLN UDL DISCOUNT CR]) - SUM(a.[SLN PBL DISCOUNT CR])) AS [CREDIT S.RTN],
((SUM(a.[GROSS SALE CASH]) - SUM(a.[GROSS UDL DISCOUNT CASH]) - SUM(a.[GROSS PBL DISCOUNT CASH])) + (SUM(a.[GROSS SALE CR]) - SUM(a.[GROSS UDL DISCOUNT CR]) - SUM(a.[GROSS PBL DISCOUNT CR])) -
(SUM(a.[SLN CASH]) - SUM(a.[SLN UDL DISCOUNT CASH]) - SUM(a.[SLN PBL DISCOUNT CASH])) - (SUM(a.[SLN CR]) - SUM(a.[SLN UDL DISCOUNT CR]) - SUM(a.[SLN PBL DISCOUNT CR]))) 
AS [NET SALE],
SUM((a.[GROSS UDL DISCOUNT CASH])) + SUM(a.[GROSS UDL DISCOUNT CR]) - SUM(a.[SLN UDL DISCOUNT CASH]) - SUM(a.[SLN UDL DISCOUNT CR]) AS [UDL DISCOUNT],
SUM(a.[GROSS PBL DISCOUNT CASH]) + SUM(a.[GROSS PBL DISCOUNT CR]) - SUM(a.[SLN PBL DISCOUNT CASH]) - SUM(a.[SLN PBL DISCOUNT CR]) AS [PBL DISCOUNT],
SUM(a.[GROSS SALE CASH]) + SUM(a.[GROSS SALE CR]) - SUM(a.[SLN CASH]) - SUM(a.[SLN CR]) AS [DSP NET SALE]
FROM

(
      SELECT
            usso.LocationId,
            usso.PrincipalBusinessLineId,
            usso.IsCash,
            CASE 
                 WHEN usso.IsCash = 1 THEN usso.TotalTP
                 ELSE 0
            END AS [Gross Sale Cash],
            CASE 
                 WHEN usso.IsCash = 1 THEN 0
                 ELSE usso.TotalTP
            END AS [Gross Sale Cr],
            (
                CASE 
                     WHEN usso.IsCash = 1 THEN ISNULL(disc.[UDL Discount],0)
                     ELSE 0
                END
            ) AS [Gross UDL Discount Cash],
			(
				CASE 
					 WHEN usso.IsCash = 1 THEN ISNULL(disc.[PBL Discount],0)
					 ELSE 0
				END
			) AS [Gross PBL Discount Cash],
			(
				CASE 
					 WHEN usso.IsCash = 1 THEN 0
					 ELSE ISNULL(disc.[UDL Discount],0)
				END
			) AS [Gross UDL Discount Cr],
			(
				CASE 
					 WHEN usso.IsCash = 1 THEN 0
					 ELSE ISNULL(disc.[PBL Discount],0)
				END
			) AS [Gross PBL Discount Cr], 
            0 AS [SLN Cash],
            0 AS [SLN Cr], 
            0 AS [SLN UDL Discount Cash], 
            0 AS [SLN PBL Discount Cash],
            0 AS [SLN UDL Discount Cr],
            0 AS [SLN PBL Discount Cr] 
      FROM 
      (
		SELECT usso.LocationId, usso.PrincipalBusinessLineId, usso.IsCash, SUM([TotalTP]) [TotalTP]
		FROM #TempSO usso
		GROUP BY usso.LocationId, usso.PrincipalBusinessLineId, usso.IsCash
      ) usso
      LEFT JOIN 
      (
		SELECT usso.LocationId,
		s.PrincipalBusinessLineId,
		usso.IsCash,
		ISNULL(SUM(sos.Discount * ((100 - s.UDLPercentage) / 100)), 0) [PBL Discount],
		ISNULL(SUM(sos.Discount * (s.UDLPercentage / 100)), 0) [UDL Discount]

		FROM
		(
			SELECT DISTINCT usso.LocationId, usso.SaleOrderId, usso.IsCash
			FROM #TempSO usso
		) usso
		INNER JOIN SaleOrderScheme sos ON sos.LocationId = usso.LocationId
		AND sos.SaleOrderId = usso.SaleOrderId
		INNER JOIN [Scheme] s ON s.SchemeId = sos.SchemeId 
		WHERE sos.EndDate IS NULL
		AND s.IsDiscountBased = 1
		GROUP BY usso.LocationId, s.PrincipalBusinessLineId, usso.IsCash
      ) disc ON disc.LocationId = usso.LocationId
       AND disc.PrincipalBusinessLineId = usso.PrincipalBusinessLineId
       AND disc.IsCash = usso.IsCash
      
      

UNION ALL

      SELECT 
            sln.LocationId,
            sln.PrincipalBusinessLineId,
            sln.IsCash,
            0 AS [Gross Sale Cash],
            0 AS  [Gross Sale Cr],
            0 AS [Gross UDL Discount Cash],
            0 AS [Gross PBL Discount Cash],
            0 AS [Gross UDL Discount Cr],
            0 AS [Gross PBL Discount Cr],  
            (case when sln.IsCash = 1 then SUM(sln.TotalTP) else 0 end) AS [SLN Cash],
            (case when sln.IsCash = 1 then 0 else SUM(sln.TotalTP) end) AS [SLN Cr], 
            (case when sln.IsCash = 1 then SUM(sln.DiscountUDLPart) else 0 end) AS [SLN UDL Discount Cash], 
            (case when sln.IsCash = 1 then SUM(sln.DiscountPrincipalPart) else 0 end) AS [SLN PBL Discount Cash],
            (case when sln.IsCash = 1 then 0 else SUM(sln.DiscountUDLPart) end) AS [SLN UDL Discount Cr],
            (case when sln.IsCash = 1 then 0 else SUM(sln.DiscountPrincipalPart) end) AS [SLN PBL Discount Cr] 
      FROM 
      (
      	SELECT sln.LocationId, sln.SLNId, sln.PrincipalBusinessLineId, sln.IsCash, isnull(sln.DiscountUDLPart,0) AS DiscountUDLPart, 
      	isnull(sln.DiscountPrincipalPart,0) AS DiscountPrincipalPart, SUM(sln.Quantity * pc.TP) TotalTP
      	FROM uv_Sales_SLN sln
		INNER JOIN PriceCatalog pc ON pc.PriceCatalogId = sln.PriceId
		INNER JOIN   DBO.Split(@PBLIds, ',') PBL ON  (PBL.Data = sln.PrincipalBusinessLineId OR @PBLIds = '')
		INNER JOIN   DBO.Split(@LocationIds, ',') Location ON  (Location.Data = sln.LocationId OR @LocationIds = '')

		WHERE sln.CompanyId = @CompanyIds
		AND (@SelectAll = 0 
			OR ( @SelectAll = 1 AND DATEDIFF(DAY,sln.TransactionDate,@FromDate)=0) 
			OR ( @SelectAll = 2 AND DATEDIFF(DAY,sln.TransactionDate,@FromDate)<=0 AND DATEDIFF(DAY,sln.TransactionDate,@ToDate)>=0))
      	GROUP BY sln.LocationId, sln.SLNId, sln.PrincipalBusinessLineId, sln.IsCash, sln.DiscountUDLPart, 
      	sln.DiscountPrincipalPart			
      ) sln
      GROUP BY sln.IsCash,sln.PrincipalBusinessLineId,sln.LocationId

) a
INNER JOIN Location l ON A.LocationId = l.LocationId
INNER JOIN uv_PrincipalBusinessLine_All upbla ON a.PrincipalBusinessLineId = upbla.PrincipalBusinessLineId
GROUP BY l.SequenceId,
	a.[LocationId],
	l.ShortName,
	upbla.PBLSequenceId,
	a.PrincipalBusinessLineId,
	upbla.[Name] 

ORDER BY l.SequenceId, upbla.PBLSequenceId

DROP TABLE #TempSO GODECLARE @CompanyIds varchar(100),
	@PBLIds varchar(100), @LocationIds varchar(100),@ProductIds VARCHAR(500),
	@IsCash bit,
	@IsCredit bit,
	@IsTP bit,
	@SaleCriteria int,
	@SelectAll int,
	@FromDate datetime,
	@ToDate datetime      
 
SET @CompanyIds = '1'
SET @PBLIds = '3'
SET @LocationIds ='11'
SET @ProductIds = '172'

SET @SaleCriteria = 2
SET @SelectAll=2
SET @FromDate = '2014/04/04'
SET @ToDate = '2014/04/15'
SET @IsTP = 1


/*
Sale Criteria 
0-Gross Sale --Only Value
1-Net Sale -- Value-SLN
2-SLN--Only SLN
*/

SELECT 
	[A].CompanyId,
	l.SequenceId AS [LocSeq],	
	l.ShortName AS [Location Name],
	UPBLA.PBLSequenceId,
	upbla.PrincipalBusinessLineId,
	upbla.Name AS [PBL Name],	
	up.ProductSequence ,
	up.ProductId,
	up.Name AS [Product Name],
	--MAX(l.MaxDate) AS [Date],
	CASE WHEN @SaleCriteria=0 THEN sum(A.GrossQuantity)
		 WHEN @SaleCriteria=1 THEN sum(A.GrossQuantity)-SUM(A.SLN)
		 WHEN @SaleCriteria=2 THEN sum(A.SLN)
	END 
	AS [Sale Qty],	
	(CASE WHEN @SaleCriteria=0 THEN sum(A.GrossQuantity * A.Price)
		 WHEN @SaleCriteria=1 THEN sum(A.GrossQuantity * A.Price)-SUM(A.SLN*A.Price)
		 WHEN @SaleCriteria=2 THEN sum(A.SLN * A.Price)
	END 
	)
	AS [Sale Amount]	
FROM   uv_Product up
LEFT OUTER  JOIN   
( 
		SELECT 
		des.CompanyId, 	
		des.LocationId, 			
		des.ProductId,
		CASE WHEN @ISTP=1 THEN (pc.TP) ELSE (PC.PP) END Price,
		SUM
		(
			 isnull(des.BookedLocalCash,0) + isnull(des.BookedOSCash,0) + isnull(des.Shop,0)+ isnull(des.SpotLocal,0)+ isnull(des.SpotOS,0) 
			+ isnull(des.BookedLocalCredit,0)+isnull(des.BookedOSCredit,0) 
		) AS [GrossQuantity], 					
		SUM(isnull((des.SLNCash),0)  + isnull((des.SLNCredit),0) ) AS [SLN]					
		FROM uv_DayEndSale des				
		INNER JOIN PriceCatalog pc ON pc.PriceCatalogId=des.PriceId	
		INNER JOIN   DBO.Split(@CompanyIds, ',') Company ON  (Company.Data = des.companyId OR @CompanyIds = '')
		INNER JOIN   DBO.Split(@LocationIds, ',') Location ON  (Location.Data = des.LocationId OR @LocationIds = '')		
		WHERE		
		 (
			   @SelectAll = 0
			   OR  (
					   @SelectAll = 1
				  AND  (
						   DATEDIFF(DAY,des.[Date],  @FromDate) >= 0
					   )
				   )
			   OR  (
					   @SelectAll = 2
				  AND  (
						   DATEDIFF(DAY,des.[Date],  @FromDate) <= 0
					  AND  DATEDIFF(DAY,des.[Date],  @ToDate) >= 0
					   )
				   )
			 
		 )
		GROUP BY des.CompanyId, 	
		des.LocationId, 			
		des.ProductId,
		CASE WHEN @ISTP=1 THEN (pc.TP) ELSE (PC.PP) END
) AS [A] ON [A].ProductId = up.ProductId
INNER JOIN   DBO.Split(@PBLIds, ',') PBL ON  (PBL.Data = up.PrincipalBusinessLineId OR @PBLIds = '')
INNER JOIN   DBO.Split(@ProductIds, ',') P ON  (P.Data = up.ProductId OR @ProductIds = '')
INNER JOIN uv_PrincipalBusinessLine_All upbla ON upbla.PrincipalBusinessLineId=up.PrincipalBusinessLineId
INNER JOIN (
				SELECT l1.SequenceId,l1.LocationId, l1.ShortName, max (des2.Date) AS MaxDate
				FROM Location l1
				INNER JOIN uv_DayEndSale des2 ON des2.LocationId = l1.LocationId
				WHERE DATEDIFF(DAY, des2.[Date],  @ToDate) >= 0
				GROUP BY l1.SequenceId,l1.LocationId, l1.ShortName
			)l 
ON l.LocationId = [A].LocationId
		
WHERE [A].LocationId IS NOT NULL

GROUP BY
	[A].CompanyId,
	l.SequenceId,	
	l.ShortName,
	UPBLA.PBLSequenceId,
	upbla.PrincipalBusinessLineId,
	upbla.Name,	
	up.ProductSequence ,
	up.ProductId,
	up.Name
	
ORDER BY 
l.SequenceId,
UPBLA.PBLSequenceId,
up.ProductSequence

 GOusp_report_DSP
dbo.fn_MonthEnd_Get_ClosingDSP
fn_MonthEnd_Get_DSPByDateRange GODECLARE @COMPANYID INT = 1
		,@LOCATIONID INT = 11
		,@SNDID INT = 5
		
--SELECT	@CompanyId,@LocationId,@SNDID,
--		ISNULL(sum(sd.CustomerAdvanceAdjusted),0) * -1,
--		ISNULL(sum(sd.OutstationAdvanceAdjusted),0) *-1,
--		ISNULL(sum(sd.SLNAdjusted),0),
--		ISNULL(sum(sd.CustomerCNAdjusted),0),
--		ISNULL(sum(sd.WHTDeducted ),0),
--		ISNULL(sum(sd.InterBranchCollectionAdjusted ),0) * -1
--FROM snd s 
--		INNER JOIN SnDCollection sd ON sd.LocationId = s.LocationId AND sd.SnDId = s.SnDId
--WHERE	s.CompanyId=@CompanyId  AND s.LocationId=@LocationId AND s.SnDId < @SNDID    AND s.RollbackDate IS null		
--GROUP BY s.CompanyId,s.LocationId,s.SnDId

--SELECT	@CompanyId,@LocationId,@SNDID,	
--		sum(ISNULL(cc.CustomerAdvanceAdjusted,0))  * -1
--		,sum(ISNULL(cc.OSAdvanceAdjusted,0))  * -1
--		,sum(ISNULL(cc.SLNAdjusted,0))
--		,sum(ISNULL(cc.CreditNoteAdjusted,0))
--		,sum(ISNULL(cc.WHTAdjusted,0))
--		,sum(ISNULL(cc.InterBranchCollectionAmount,0)) * -1
--FROM	CreditCollection cc 
--		INNER JOIN SnDCreditCollection scc ON scc.LocationId=cc.LocationId AND scc.CreditCollectionId=cc.CreditCollectionId
--		INNER JOIN snd s ON s.LocationId = scc.LocationId AND s.SnDId = scc.SnDId
--WHERE	s.CompanyId=@CompanyId  AND s.LocationId=@LocationId AND s.SnDId < @SNDID  AND s.RollbackDate IS null
--GROUP BY s.CompanyId,s.LocationId,s.SnDId

SELECT	@CompanyId,@LocationId,@SNDID,	
		 0 --AdvanceAdjusted
		,0 --OSAdvanceAdjusted
		,0 --SLN Adjusted
		,0 --CN Adjusted
		,0 --WHTAdjusted
		,sum(ISNULL(ibc.TotalAmount,0))  --InterBranchCollectionAmount
FROM InterBranchCollection ibc
INNER JOIN SnDInterBranchCollection sibc ON sibc.LocationId = ibc.LocationId AND sibc.InterBranchCollectionId = ibc.InterBranchCollectionId
INNER JOIN snd s ON s.LocationId = sibc.LocationId AND s.SnDId = sibc.SnDId AND s.CompanyId=ibc.CompanyId
WHERE s.CompanyId=@CompanyId AND s.LocationId=@LocationId AND s.SnDId<@SNDID AND s.RollbackDate IS NULL





--SELECT SNDID 
--FROM SnD 
--WHERE SND.LOCATIONID = 11 AND SND.SNDNUMBER = 2
 GOSELECT * FROM sndInterBranchCollection sibc
SELECT * FROM InterBranchCollection ibc



SELECT * FROM INFORMATION_SCHEMA.columns 
WHERE column_name LIKE '%open%bal%'--'%inter%Branch%coll%'
	OR TABLE_NAME LIKE '%open%bal%'--'%inter%Branch%coll%'


--SELECT * FROM CreditCollectionInterBranch
SELECT * FROM sndcollection


SELECT * FROM sndremittance GOSELECT DISTINCT usso.SalePassDate,Count(usso.CustomerId)
  FROM uv_Sales_SaleOrder usso WHERE usso.LocationId = 11 AND usso.BookerId = 1 AND usso.PrincipalBusinessLineId = 3  AND DATEDIFF(DAY, usso.SalePassDate ,  '04/06/2014') <= 0 AND datediff (day,usso.SalePassDate , '04/06/2014') >= 0

GROUP BY usso.SalePassDate
  
   GO


--EXEC usp_Report_SND 5,64,45
--CREATED BY : RIZWAN AHMED KHAN
--DATE       : 16 FEB, 2013
--PURPOSE    : GENERATE SND MAIN REPORT.

--CREATE PROC [dbo].usp_Report_SND @CompanyId int, @LocationId int,@SNDID int AS

DECLARE @CompanyId INT = 1, @LocationId INT = 11,@SNDID INT = 4 

SET @CompanyId = 1--@CompanyId
SET @LocationId = 11--@LocationId
SET @SNDID = 7--@SNDID
--Declaration for Adjustment
--drop table #TempCollectionReceipt

DECLARE
	@Cash					numeric(15,2),
	@Vault					numeric(15,2),
	@Cheque					numeric(15,2),
	@DD_PO					numeric(15,2),
	@TC 					numeric(15,2),
	@RS 					numeric(15,2),
	@DS_HO					numeric(15,2),
	@OtherDocument			numeric(15,2),
	@BalanceDeposited		numeric(15,2),
	@BankBalance			numeric(15,2),
	@TransferBankDOC		numeric(15,2),
	@RertunDocument			numeric(15,2),
	@BankChanrges			numeric(15,2),
	@Customer_ADJ			numeric(15,2),
	@OS_ADV_ADJ				numeric(15,2),
	@SLN_ADJ				numeric(15,2),
	@CN_ADJ					numeric(15,2),
	@WHT_ADJ				numeric(15,2),
	@IBC_ADJ				numeric(15,2),
	@SHORTAGE				numeric(15,2),
	@ROUNDOFF				numeric(15,2),
	@DS_BR					numeric(15,2),
	@ShortageCollection		numeric(15,2),
	@FromDate				datetime,
	@ToDate					datetime,
	
	--Remittance related variable
	@Remittance_OB						numeric(15,2),
	@Remittance_CollAccChqDishonoured	numeric(15,2),
	@Remittance_CollAccChqRedeposited	numeric(15,2),
	@Remittance_CashInHandDepInHOAcc	numeric(15,2),
	@Remittance_HOC						numeric(15,2),
	@Remittance_TC						numeric(15,2),
	@Remittance_DD_PO					numeric(15,2),
	@Remittance_CASH_DD					numeric(15,2),
	@Remittance_BANK_DD					numeric(15,2),
	@Remittance_OtherDocument			numeric(15,2),
	@Remittance_CollAccChqDepInHOAcc	numeric(15,2),
	@Remittance_TTFromCollAcc			numeric(15,2),
	@Remittance_DirectRemToHODS			numeric(15,2),
	@Remittance_DirectRemToHORS			numeric(15,2),
	@Remittance_TOTALREMITTEDTODAY		numeric(15,2),
	@Remittance_CF						numeric(15,2)
	

SELECT	@FromDate=s.FromDate, 
		@ToDate=s.ToDate 
FROM	SnD s
WHERE	s.CompanyId=@CompanyId and s.LocationId=@LocationID AND s.SnDId=@SNDID



SELECT c.Name AS CompanyName,l.ShortName AS LocationName,s.SnDNumber,s.FromDate,s.ToDate 
FROM snd s 
INNER JOIN Company c ON c.CompanyId = s.CompanyId
INNER JOIN Location l ON s.LocationId=l.LocationId
WHERE	s.CompanyId=@CompanyId and s.LocationId=@LocationID AND s.SnDId=@SNDID


--Create table for SND Reconciliation data
CREATE TABLE #SnDReconciliation (GroupID numeric(5,0),GroupDescription Varchar(50),SortID numeric(5,0),SourceReceipt Varchar(100),CompanyID numeric(9,0),LocationID numeric(9,0),SNDID numeric(9,0),
								Cash numeric(15,2),Cheque numeric(15,2),Vault numeric(15,2),DD_PO numeric(15,2),TC numeric(15,2),OtherDocument numeric(15,2)
								,BalanceDeposited numeric(15,2),BankBalance numeric(15,2),TotalBankBalance numeric(15,2),
								ReturnDocument numeric(15,2),BankCharges numeric(15,2),Shortage numeric(15,2),DirectlyRemitted numeric(15,2),
								Customer_ADJ numeric(15,2), OS_ADV_ADJ numeric(15,2), SLN_ADJ numeric(15,2), CN_ADJ numeric(15,2),
								WHT_ADJ numeric(15,2), IBC_ADJ numeric(15,2), ROUNDOFF numeric(15,2), TOTALREMITTABEBALANCE numeric(15,2))

--Create table for SND Remittance data
CREATE TABLE #SnDRemittance    (SortID numeric(5,0),SourceReceipt Varchar(100),CompanyID numeric(9,0),LocationID numeric(9,0),SNDID numeric(9,0),
								TotalAmount numeric(15,2))


----------------------------------------------------------------------------------------------------------------------------------------
-- BEGIN - SND COLLECTION
----------------------------------------------------------------------------------------------------------------------------------------

CREATE TABLE #TempSnDCollection (CompanyID numeric(9,0),LocationID numeric(9,0),SNDID numeric(9,0),SnDNumber numeric(9,0),SortID numeric(5,0),SourceReceipt Varchar(100),
								Cash numeric(15,2),Cheque numeric(15,2),DD_PO numeric(15,2),TC numeric(15,2)
								,RS numeric(15,2),DS_HO numeric(15,2),DS_BR numeric(15,2),OtherDocument  numeric(15,2),
								Customer_ADJ numeric(15,2), OS_ADV_ADJ numeric(15,2), SLN_ADJ numeric(15,2), CN_ADJ numeric(15,2),
								WHT_ADJ numeric(15,2), IBC_ADJ numeric(15,2),Shortage numeric(15,2), ROUNDOFF numeric(15,2), SUBTOTAL numeric(15,2), ALREADYINREMITTABLE numeric(15,2), ADDEDTOREMITTABLE numeric(15,2))

INSERT INTO #TempSnDCollection
exec usp_Report_SNDCollection @CompanyId,@LocationId,@SnDId
SELECT * FROM #TempSnDCollection

----------------------------------------------------------------------------------------------------------------------------------------
-- END - SND COLLECTION
----------------------------------------------------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------------------------------------------------
-- BEGIN - SND BANK BALANCE
----------------------------------------------------------------------------------------------------------------------------------------

CREATE TABLE #TempBankBalance (BankAccountID int, ShortName VarChar(75), OB int, BalanceDeposited numeric(15,4),BankBalance numeric(15,4))
INSERT INTO #TempBankBalance
exec usp_Report_SND_BankBalance @CompanyId,@LocationId,@SnDId

SELECT BankAccountID,ShortName,isnull(sum(isnull(BalanceDeposited,0)) ,0) AS BalanceDeposited
								,isnull(sum(isnull(BankBalance,0)) ,0) AS BankBalance
FROM #TempBankBalance
GROUP BY BankAccountID,ShortName
---------------------------------------------------------------------------------------------------------------------------------------
-- END - SND BANK BALANCE
----------------------------------------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------------------------------------
-- BEGIN - SND RECONCILLIATION OPENING BALANCE
----------------------------------------------------------------------------------------------------------------------------------------

CREATE TABLE #TempSnDOpeningBalance (CompanyID numeric(9,0),LocationID numeric(9,0),SNDID numeric(9,0),
								Cash numeric(15,2),Cheque numeric(15,2),Vault numeric(15,2),DD_PO numeric(15,2),TC numeric(15,2),OtherDocument numeric(15,2)
								,BalanceDeposited numeric(15,2),BankBalance numeric(15,2),TotalBankBalance numeric(15,2),
								ReturnDocument numeric(15,2),BankCharges numeric(15,2),Shortage numeric(15,2),DirectlyRemitted numeric(15,2),
								Customer_ADJ numeric(15,2), OS_ADV_ADJ numeric(15,2), SLN_ADJ numeric(15,2), CN_ADJ numeric(15,2),
								WHT_ADJ numeric(15,2), IBC_ADJ numeric(15,2), ROUNDOFF numeric(15,2))
INSERT INTO #TempSnDOpeningBalance
exec usp_Report_SNDOpeningBalance @CompanyId,@LocationId,@SnDId

-- Bank Balance Updates

UPDATE #TempSnDOpeningBalance SET BalanceDeposited =	(SELECT isnull(sum(isnull(BalanceDeposited,0)),0) FROM #TempBankBalance WHERE OB=1)
UPDATE #TempSnDOpeningBalance SET BankBalance =			(SELECT isnull(sum(isnull(BankBalance,0)),0) FROM #TempBankBalance WHERE OB=1)

--Reconciliation OPENING BALANCE
----------------------------------------------------------------------------------------------------------------------------------------
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,Cash,Cheque,Vault,DD_PO,TC,OtherDocument
								,BalanceDeposited,BankBalance,TotalBankBalance,ReturnDocument,BankCharges,Shortage,DirectlyRemitted,Customer_ADJ
								,OS_ADV_ADJ,SLN_ADJ,CN_ADJ,WHT_ADJ,IBC_ADJ,ROUNDOFF)	
SELECT		1 AS  GroupID, 'OPENING BALANCE' AS  GroupDescription,1 AS SortID,'OPENING BALANCE' AS SourceReceipt,
			CompanyID,LocationID,SNDID,Cash,Cheque,Vault,DD_PO,TC,OtherDocument,BalanceDeposited,BankBalance,TotalBankBalance = 0--BalanceDeposited + BankBalance
			,ReturnDocument,BankCharges,Shortage,DirectlyRemitted,Customer_ADJ,OS_ADV_ADJ,SLN_ADJ,CN_ADJ,WHT_ADJ,IBC_ADJ,ROUNDOFF
FROM #TempSnDOpeningBalance tsdb
----------------------------------------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------------------------------------
-- END - SND RECONCILLIATION OPENING BALANCE
----------------------------------------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------------------------------------
-- BEGIN - SND RECONCILLIATION 
----------------------------------------------------------------------------------------------------------------------------------------

---GET RECONCILIATION DATA
----------------------------------------------------------------------------------------------------------------------------------------
SELECT	 @CASH			=	ISNULL(sum(isnull(Cash,0)),0)
		,@CHEQUE		=	ISNULL(sum(isnull(Cheque,0)),0)
		,@DD_PO			=	ISNULL(sum(isnull(DD_PO,0)),0)
		,@TC			=	ISNULL(sum(isnull(TC,0)),0)
		,@OtherDocument	=	ISNULL(sum(isnull(OtherDocument,0)),0)
		,@Shortage		=	ISNULL(sum(isnull(Shortage,0)),0) --+ ISNULL(sum(isnull(ROUNDOFF,0)),0)
		,@RS			=	ISNULL(sum(isnull(RS,0)),0)
		,@DS_HO			=	ISNULL(sum(isnull(DS_HO,0)),0)
		,@DS_BR			=	ISNULL(sum(isnull(DS_BR,0)),0)
		,@Remittance_DirectRemToHODS	=	ISNULL(sum(isnull(DS_HO,0)),0)
		,@Remittance_DirectRemToHORS	=	ISNULL(sum(isnull(RS,0)),0)
FROM	#TempSnDCollection tsd

--GET REMITTANCE DATA
SELECT	@Remittance_OB						= sr.OpeningBalance
		,@Remittance_TTFromCollAcc			= sr.TotalCollectionAccountRemittance
		,@Remittance_DD_PO					= sr.TotalBankDD + sr.TotalCashDD
		,@Remittance_CASH_DD				= sr.TotalCashDD
		,@Remittance_BANK_DD				= sr.TotalBankDD 
		,@Remittance_CollAccChqDishonoured	= sr.TotalCollectionAccountReturned
		,@Remittance_CollAccChqRedeposited	= sr.TotalCollectionAccountRedeposited 

FROM	snd s 
		INNER JOIN SnDRemittance sr ON sr.LocationId = s.LocationId AND sr.SnDId = s.SnDId
WHERE	s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL


--GET OTHER REMITTANCE DATA
SELECT	 @Remittance_DD_PO			= @Remittance_DD_PO + isnull(sum(isnull(DD_PO,0)),0)
		,@Remittance_TC				= isnull(sum(isnull(TC,0)),0)
		,@Remittance_OtherDocument	= isnull(sum(isnull(OtherDocument,0)),0)
		
from	(
		SELECT	DD_PO = (CASE WHEN pm.TypeCode IN ('DD','PO') THEN isnull(sum(isnull(PT.Amount,0)),0) ELSE 0 END)
				,TC = (CASE WHEN pm.TypeCode='TC' THEN isnull(sum(isnull(PT.Amount,0)),0) ELSE 0 END)
				,OtherDocument = (CASE WHEN pm.TypeCode NOT IN ('DD','PO','TC','RS') THEN isnull(sum(isnull(PT.Amount,0)),0) ELSE 0 END)
				
		FROM snd s 
		INNER JOIN SnDRemittanceOtherDoc ROD ON s.LocationId=ROD.LocationId AND s.SnDId=ROD.SnDId
		INNER JOIN PaymentTransaction pt ON pt.LocationId = ROD.LocationId AND pt.PaymentTransactionId = ROD.PaymentTransactionId
		INNER JOIN PaymentMode pm ON pt.PaymentModeId=pm.PaymentModeId
		WHERE s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL
		GROUP BY pm.TypeCode
		) tmp



----------------------------------------------------------------------------------------------------------------------------------------
--ADDITION-1: RECEIVED TODAY / DIRECT REMITTED
----------------------------------------------------------------------------------------------------------------------------------------

--ADD: RECEIVED TODAY / DIRECT REMITTED
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID
			,Cash,Cheque,DD_PO,TC,OtherDocument,DirectlyRemitted,BankBalance)
(
SELECT	2 AS  GroupID, 'ADDITION' AS  GroupDescription,1 AS SortID,'ADD: RECEIVED TODAY / DIRECT REMITTED' AS SourceReceipt,@CompanyID,@LocationID,@SNDID
		,@CASH,@CHEQUE,@DD_PO,@TC,@OtherDocument,@RS+@DS_HO,@DS_BR
)		



----------------------------------------------------------------------------------------------------------------------------------------
--ADDITION-2: DEPOSITED IN BANK
----------------------------------------------------------------------------------------------------------------------------------------
--		CASH Deposit in Collection A/C

SELECT	@Cash = sum(cash)
		,@Vault = sum(Vault)
FROM
(
SELECT	Cash=(CASE WHEN scd.VaultCompanyId IS NULL then isnull(sum(isnull(DepositAmount ,0)),0) ELSE 0 END),
		Vault=(CASE WHEN scd.VaultCompanyId IS not NULL then isnull(sum(isnull(DepositAmount ,0)),0) ELSE 0 END)
		
FROM	SnD s 
		LEFT Outer JOIN SnDCashDepositBank scd ON s.LocationId = scd.LocationId AND s.SnDId = scd.SnDId
		LEFT Outer JOIN PaymentTransaction pt ON scd.LocationId=pt.LocationId AND scd.PaymentTransactionId=pt.PaymentTransactionId  
		LEFT Outer JOIN BankAccount ba ON  pt.SystemBankAccountId=ba.BankAccountId 
WHERE	s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL AND ba.AccountType='BR'
GROUP BY s.CompanyId,s.LocationId,s.SnDId,scd.VaultCompanyId
) tmp
--ADD: CASH DEPOSITED IN BANK
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,BankBalance)
(
SELECT	2 AS  GroupID, 'ADDITION' AS  GroupDescription,2 AS SortID,'ADD: DEPOSITED IN BANK' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@Cash+@Vault
)
--LESS: DEPOSITED IN COLLECTION A/C
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,Cash,Vault)
(
SELECT	3 AS  GroupID, 'DEDUCTION' AS  GroupDescription,1 AS SortID,'LESS: DEPOSITED IN COLLECTION A/C' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@Cash,@Vault
)





--		DOC Deposit in bank but not credited



SELECT	@Cheque=isnull(sum(isnull(Cheque,0)),0)
		,@DD_PO=isnull(sum(isnull(DD_PO,0)),0)
		,@TC=isnull(sum(isnull(TC,0)),0)
		,@OtherDocument=isnull(sum(isnull(OtherDocument,0)),0)
		,@TransferBankDOC=isnull(sum(isnull(TransferBankDOC,0)),0)
from	(
		SELECT	Cheque = (CASE WHEN sbd.Type='D' AND pm.TypeCode='CHQ' THEN isnull(sum(isnull(sbd.Amount,0)),0) ELSE 0 END)
				,DD_PO = (CASE WHEN sbd.Type='D' AND pm.TypeCode IN ('DD','PO') THEN isnull(sum(isnull(sbd.Amount,0)),0) ELSE 0 END)
				,TC = (CASE WHEN sbd.Type='D' AND pm.TypeCode='TC' THEN isnull(sum(isnull(sbd.Amount,0)),0) ELSE 0 END)
				,OtherDocument = (CASE WHEN sbd.Type='D' AND pm.TypeCode NOT IN ('CHQ','CASH','DD','PO','TC') THEN isnull(sum(isnull(sbd.Amount,0)),0) ELSE 0 END)
				,TransferBankDOC = (CASE WHEN sbd.Type='T' THEN isnull(sum(isnull(sbd.Amount,0)),0) ELSE 0 END)
		FROM snd s 
		LEFT Outer  JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.DepositedSnDId
		LEFT Outer  JOIN PaymentTransaction pt ON pt.LocationId = sbd.LocationId AND pt.PaymentTransactionId = sbd.PaymentTransactionId
		LEFT Outer  JOIN PaymentMode pm ON pt.PaymentModeId=pm.PaymentModeId
		WHERE sbd.Type IN ('D','T') AND pm.IsToBeDeposited=1 
		AND s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL
		GROUP BY pm.TypeCode,sbd.Type
		) tmp
--ADD: DOC DEPOSITED IN BANK
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,BalanceDeposited)
(
SELECT	2 AS  GroupID, 'ADDITION' AS  GroupDescription,2 AS SortID,'ADD: DEPOSITED IN BANK' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@Cheque+@DD_PO+@TC+@OtherDocument+@TransferBankDOC
)
--LESS: DOC DEPOSITED IN COLLECTION A/C
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,Cheque,DD_PO,TC,OtherDocument,BankBalance)
(
SELECT	3 AS  GroupID, 'DEDUCTION' AS  GroupDescription,1 AS SortID,'LESS: DEPOSITED IN COLLECTION A/C' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@Cheque,@DD_PO,@TC,@OtherDocument,@TransferBankDOC
)
----------------------------------------------------------------------------------------------------------------------------------------
--ADD: RETURNED CHQ. REDEPOSITED
----------------------------------------------------------------------------------------------------------------------------------------
SELECT	@Cheque=isnull(sum(isnull(Cheque,0)),0)
		,@DD_PO=isnull(sum(isnull(DD_PO,0)),0)
		,@TC=isnull(sum(isnull(TC,0)),0)
		,@OtherDocument=isnull(sum(isnull(OtherDocument,0)),0)
		,@TransferBankDOC=isnull(sum(isnull(TransferBankDOC,0)),0)
from	(
		SELECT	Cheque = (CASE WHEN sbd.Type='D' AND pm.TypeCode='CHQ' THEN isnull(sum(isnull(sbd.Amount,0)),0) ELSE 0 END)
				,DD_PO = (CASE WHEN sbd.Type='D' AND pm.TypeCode IN ('DD','PO') THEN isnull(sum(isnull(sbd.Amount,0)),0) ELSE 0 END)
				,TC = (CASE WHEN sbd.Type='D' AND pm.TypeCode='TC' THEN isnull(sum(isnull(sbd.Amount,0)),0) ELSE 0 END)
				,OtherDocument = (CASE WHEN sbd.Type='D' AND pm.TypeCode NOT IN ('CHQ','CASH','DD','PO','TC','DS') THEN isnull(sum(isnull(sbd.Amount,0)),0) ELSE 0 END)
				,TransferBankDOC = (CASE WHEN sbd.Type='T' THEN isnull(sum(isnull(sbd.Amount,0)),0) ELSE 0 END)
		FROM snd s 
		LEFT Outer  JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.DepositedSnDId
		LEFT Outer  JOIN PaymentTransaction pt ON pt.LocationId = sbd.LocationId AND pt.PaymentTransactionId = sbd.PaymentTransactionId
		LEFT Outer  JOIN PaymentMode pm ON pt.PaymentModeId=pm.PaymentModeId
		WHERE sbd.Type IN ('D','T') AND pm.IsToBeDeposited=1 
		AND s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND sbd.LastSettlementSnDId=@SNDID AND s.RollbackDate IS NULL
		--All Redeposit Doc
		AND EXISTS (SELECT sbd2.SnDBankDocMovementId FROM SnDBankDocMovement sbd2 
						WHERE sbd2.PaymentTransactionId=sbd.PaymentTransactionId
						AND sbd2.DepositedSnDId=sbd.LastSettlementSnDId)
		GROUP BY pm.TypeCode,sbd.Type
		) tmp


INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,Cheque,DD_PO,TC,OtherDocument,BankBalance)
(
SELECT	2 AS  GroupID, 'ADDITION' AS  GroupDescription,3 AS SortID,'ADD: RETURNED CHQ. REDEPOSITED' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@Cheque,@DD_PO,@TC,@OtherDocument,@TransferBankDOC
)

INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,BankBalance)
(
SELECT	3 AS  GroupID, 'DEDUCTION' AS  GroupDescription,10 AS SortID,'LESS: COLLECTION A/C CHEQUE REDEPOSITED' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@TransferBankDOC
)
--LESS: RETURN DOCUMENT SETTLEMENT
--INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,ReturnDocument)
--(
--SELECT	3 AS  GroupID, 'DEDUCTION' AS  GroupDescription,11 AS SortID,'LESS: DEDUCTED / ADJUSTED /CLEARED'  AS SourceReceipt
--		,@CompanyID,@LocationID,@SNDID, @Cheque + @DD_PO + @TC + @OtherDocument
--)
----------------------------------------------------------------------------------------------------------------------------------------
--ADD: CHEQUE CLEARED & REMITTABLE BY BANK
----------------------------------------------------------------------------------------------------------------------------------------
SELECT	@BankBalance = isnull(sum(isnull(sbd.Amount,0)),0)
FROM snd s 
LEFT Outer  JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.ClearedSnDId
LEFT Outer  JOIN PaymentTransaction pt ON pt.LocationId = sbd.LocationId AND pt.PaymentTransactionId = sbd.PaymentTransactionId
LEFT Outer  JOIN PaymentMode pm ON pt.PaymentModeId=pm.PaymentModeId
WHERE sbd.Type IN ('D','T') AND pm.IsToBeDeposited=1 
AND s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL

INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,BankBalance)
(
SELECT	2 AS  GroupID, 'ADDITION' AS  GroupDescription,4 AS SortID,'ADD: CHEQUE CLEARED & REMITTABLE BY BANK' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@BankBalance
)
--LESS: DOC DEPOSITED IN COLLECTION A/C
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,BalanceDeposited)
(
SELECT	3 AS  GroupID, 'DEDUCTION' AS  GroupDescription,6 AS SortID,'LESS: CHEQUE CLEARED FROM NOT CREDATED' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@BankBalance
)
----------------------------------------------------------------------------------------------------------------------------------------
--ADD: CASH DD / BANK DD PREPARED
----------------------------------------------------------------------------------------------------------------------------------------
SELECT	@Cash=(CASE WHEN scd.VaultCompanyId IS NULL then isnull(sum(isnull(SCD.Amount  ,0)),0) ELSE 0 END),
		@Vault=(CASE WHEN scd.VaultCompanyId IS not NULL then isnull(sum(isnull(SCD.Amount ,0)),0) ELSE 0 END)
FROM	SnD s 
		LEFT Outer  JOIN SnDCashDD scd ON s.LocationId = scd.LocationId AND s.SnDId = scd.SnDId
WHERE	s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL 
GROUP BY s.CompanyId,s.LocationId,s.SnDId,scd.VaultCompanyId

SELECT	@BankBalance=isnull(sum(isnull(bd.Amount  ,0)),0)
FROM	SnD s 
		LEFT Outer  JOIN SnDBankDD bd ON s.LocationId = bd.LocationId AND s.SnDId = bd.SnDId
WHERE	s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL 
GROUP BY s.CompanyId,s.LocationId,s.SnDId

--ADD: CASH DEPOSITED IN BANK
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,DD_PO)
(
SELECT	2 AS  GroupID, 'ADDITION' AS  GroupDescription,5 AS SortID,'ADD: CASH DD / BANK DD PREPARED' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@Cash+@Vault+@BankBalance
)
--LESS: DEPOSITED IN COLLECTION A/C
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,Cash,Vault,BankBalance)
(
SELECT	3 AS  GroupID, 'DEDUCTION' AS  GroupDescription,4 AS SortID,'LESS: CASH DD / BANK DD PREPARED' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@Cash,@Vault,@BankBalance
)

----------------------------------------------------------------------------------------------------------------------------------------
--ADD: COLLECTION A/C CHEQUE RETURN
----------------------------------------------------------------------------------------------------------------------------------------
SELECT	@BankBalance = isnull(sum(isnull(sbd.Amount,0)),0)
FROM snd s 
LEFT Outer  JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.ReturnedSnDId
LEFT Outer  JOIN PaymentTransaction pt ON pt.LocationId = sbd.LocationId AND pt.PaymentTransactionId = sbd.PaymentTransactionId
LEFT Outer  JOIN PaymentMode pm ON pt.PaymentModeId=pm.PaymentModeId
WHERE sbd.Type IN ('R','T') AND pm.IsToBeDeposited=1 
AND s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL

INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,BankBalance)
(
SELECT	2 AS  GroupID, 'ADDITION' AS  GroupDescription,6 AS SortID,'ADD: COLLECTION A/C CHEQUE RETURN' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@BankBalance
)
----------------------------------------------------------------------------------------------------------------------------------------
--ADD: ADDED / RECEIVED
----------------------------------------------------------------------------------------------------------------------------------------
SET @Customer_ADJ=0
SET @OS_ADV_ADJ=0
SET @WHT_ADJ=0
SET @RertunDocument=0
SET @BankChanrges=0
SET @Cash=0
SET @Vault=0


--RETURN CHQ
SELECT	@RertunDocument = isnull(sum(isnull(sbd.Amount,0)),0)
FROM snd s 
LEFT Outer  JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.ReturnedSnDId
LEFT Outer  JOIN PaymentTransaction pt ON pt.LocationId = sbd.LocationId AND pt.PaymentTransactionId = sbd.PaymentTransactionId
LEFT Outer  JOIN PaymentMode pm ON pt.PaymentModeId=pm.PaymentModeId
WHERE sbd.Type IN ('D') AND pm.IsToBeDeposited=1 
AND s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL

--Customer Advance , OS Advance  Receiving and WHT deducted
SELECT	@Customer_ADJ = isnull(sum(isnull(sc.CustomerAdvance ,0)),0)
		,@OS_ADV_ADJ = isnull(sum(isnull(sc.OutstationAdvance ,0)),0)
		,@WHT_ADJ = isnull(sum(isnull(sc.WHTDeducted,0)),0)
FROM snd s 
LEFT Outer  JOIN SnDCollection sc ON s.LocationId=sc.LocationId AND s.SnDId=sc.SnDId
WHERE s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL

--Bank Charges
SELECT	@BankChanrges = isnull(sum(isnull(bc.Amount ,0)),0)
FROM snd s 
LEFT Outer  JOIN SnDBankCharges bc ON s.LocationId=bc.LocationId AND s.SnDId=bc.SnDId
WHERE s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL


--SND Cash Reduction
SELECT	@Cash = isnull(sum(isnull(cr.ReductionAmount ,0)),0)
FROM snd s 
LEFT Outer  JOIN SnDCashReduction cr ON s.LocationId=cr.LocationId AND s.SnDId=cr.SnDId
WHERE s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL

--Cash Deposit in Vault
SELECT	@Vault = isnull(sum(isnull(cd.DepositedInVault ,0)),0)
FROM snd s 
LEFT Outer  JOIN SnDCashDetail cd ON s.LocationId=cd.LocationId AND s.SnDId=cd.SnDId
WHERE s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL


--SLN
SELECT @SLN_ADJ= isnull(sum(isnull(s.TotalNet ,0)),0) --*-1
FROM SLN s
WHERE  s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.BLMApprovalDate BETWEEN @FromDate AND @Todate AND s.totalnet>0

--CN
SELECT @CN_ADJ = isnull(sum(isnull(cn.Amount  ,0)),0) --*-1
FROM CustomerCreditNote cn
WHERE  cn.CompanyId=@CompanyId AND cn.LocationId=@LocationID AND cn.BranchApprovalDate BETWEEN @FromDate AND @Todate AND cn.Amount>0

--IBC --CHANGED BY OVAIS ON 24 OCT 2013
SELECT @IBC_ADJ = isnull(sum(isnull(ibc.TotalAmount  ,0)),0) --* -1
--FROM InterBranchCollection ibc
--WHERE  ibc.CompanyId=@CompanyId AND ibc.LocationId=@LocationID AND ibc.ApprovalDate BETWEEN @FromDate AND @Todate AND ibc.TotalAmount>0
FROM InterBranchCollection ibc
INNER JOIN SnDInterBranchCollection sibc ON sibc.LocationId = ibc.LocationId AND sibc.InterBranchCollectionId = ibc.InterBranchCollectionId
INNER JOIN snd s ON s.LocationId = sibc.LocationId AND s.SnDId = sibc.SnDId AND s.CompanyId=ibc.CompanyId
WHERE s.CompanyId=@CompanyId AND s.LocationId=@LocationId AND s.SnDId = @SNDID AND s.RollbackDate IS NULL


--ADDED / RECEIVED
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,Vault,ReturnDocument,BankCharges
								,Shortage,Customer_ADJ,OS_ADV_ADJ,SLN_ADJ,CN_ADJ,WHT_ADJ,IBC_ADJ)
(
SELECT	2 AS  GroupID, 'ADDITION' AS  GroupDescription,7 AS SortID,'ADD: ADDED / RECEIVED' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@Vault,@RertunDocument,@BankChanrges,@SHORTAGE+@CASH,@Customer_ADJ,@OS_ADV_ADJ,@SLN_ADJ,@CN_ADJ,@WHT_ADJ,@IBC_ADJ
)

--LESS: CHEQUE DISHONOURED
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,BalanceDeposited)
(
SELECT	3 AS  GroupID, 'DEDUCTION' AS  GroupDescription,7 AS SortID,'LESS: CHEQUE DISHONOURED' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@RertunDocument
)
--LESS: BANK CHARGES
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,BankBalance)
(
SELECT	3 AS  GroupID, 'DEDUCTION' AS  GroupDescription,8 AS SortID,'LESS: BANK CHARGES' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@BankChanrges
)
--LESS: CASH DEPOSIT IN VAULT
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,Cash)
(
SELECT	3 AS  GroupID, 'DEDUCTION' AS  GroupDescription,11 AS SortID,'LESS: DEDUCTED / ADJUSTED /CLEARED'  AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@Vault
)


SET @Vault=0
--Cash Received From Vault
SELECT	@Vault = isnull(sum(isnull(cd.ReceivedFromVault ,0)),0)
FROM snd s 
LEFT Outer  JOIN SnDCashDetail cd ON s.LocationId=cd.LocationId AND s.SnDId=cd.SnDId
WHERE s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL
--ADDED / RECEIVED
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,Cash)
(
SELECT	2 AS  GroupID, 'ADDITION' AS  GroupDescription,7 AS SortID,'ADD: ADDED / RECEIVED' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@Vault
)
--LESS: CASH DEPOSIT IN VAULT
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,Vault)
(
SELECT	3 AS  GroupID, 'DEDUCTION' AS  GroupDescription,11 AS SortID,'LESS: DEDUCTED / ADJUSTED /CLEARED'  AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@Vault
)


----------------------------------------------------------------------------------------------------------------------------------------
--LESS: DEPOSITED IN HO A/C
----------------------------------------------------------------------------------------------------------------------------------------
SET @Cash=0
SET @Vault=0
SET @Remittance_CashInHandDepInHOAcc=0
SET @DD_PO=0
SET @TC=0
SET @OtherDocument=0

SELECT	@Cash=(CASE WHEN scd.VaultCompanyId IS NULL then isnull(sum(isnull(DepositAmount ,0)),0) ELSE 0 END)
		,@Vault=(CASE WHEN scd.VaultCompanyId IS not NULL then isnull(sum(isnull(DepositAmount ,0)),0) ELSE 0 END)
		,@Remittance_CashInHandDepInHOAcc = isnull(sum(isnull(DepositAmount ,0)),0)
		
FROM	SnD s 
		LEFT Outer  JOIN SnDCashDepositBank scd ON s.LocationId = scd.LocationId AND s.SnDId = scd.SnDId
		LEFT Outer  JOIN PaymentTransaction pt ON scd.LocationId=pt.LocationId AND scd.PaymentTransactionId=pt.PaymentTransactionId  
		LEFT Outer  JOIN BankAccount ba ON pt.CompanyId=ba.CompanyId and pt.SystemBankAccountId=ba.BankAccountId  AND ba.CloseDate IS null
WHERE	s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL  AND ba.AccountType IN ('HO','HOBR')
GROUP BY s.CompanyId,s.LocationId,s.SnDId,scd.VaultCompanyId

SET @Cash = isnull(@Cash,0)
SET @Vault = isnull(@Vault,0)
SET @Remittance_CashInHandDepInHOAcc = isnull(@Remittance_CashInHandDepInHOAcc,0)

SELECT	@DD_PO			= isnull(sum((CASE WHEN pm.TypeCode IN ('DD','PO') THEN pt.Amount ELSE 0 END)),0) ,
		@TC				= isnull(sum((CASE WHEN pm.TypeCode='TC' THEN pt.Amount ELSE 0 END)),0),
		@OtherDocument	=	isnull(sum((CASE WHEN pm.TypeCode NOT IN ('DD','PO','TC') THEN pt.Amount ELSE 0 END)),0)
FROM	snd s 
		LEFT OUTER JOIN SnDRemittanceOtherDoc sro ON sro.LocationId = s.LocationId AND sro.SnDId = s.SnDId
		LEFT OUTER JOIN PaymentTransaction pt ON pt.LocationId = sro.LocationId AND pt.PaymentTransactionId = sro.PaymentTransactionId 
		LEFT OUTER JOIN PaymentMode pm ON pm.PaymentModeId= pt.PaymentModeId AND pm.IsToBeRemitted=1 
WHERE	s.CompanyId =@CompanyId and s.LocationId=@LocationID AND s.SnDId = @SNDID


--LESS: DEPOSITED IN COLLECTION A/C
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,Cash,Vault,DD_PO,TC,OtherDocument)
(
SELECT	3 AS  GroupID, 'DEDUCTION' AS  GroupDescription,2 AS SortID,'LESS: DEPOSITED IN HO A/C' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@Cash,@Vault,@DD_PO,@TC,@OtherDocument
)



----------------------------------------------------------------------------------------------------------------------------------------
--LESS: WITHDRAWAL AG. HOC
----------------------------------------------------------------------------------------------------------------------------------------
SELECT	@Cash	=	isnull(sum(isnull(h.Amount ,0)),0) 
		,@Remittance_HOC=	isnull(sum(isnull(h.Amount ,0)),0) 
FROM	HOC h 
WHERE	h.CompanyId=@CompanyId AND h.LocationId=@LocationID AND h.WithdrawSnDId=@SNDID AND h.ApprovalDate IS NOT null


--LESS: DEPOSITED IN COLLECTION A/C
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,Cash)
(
SELECT	3 AS  GroupID, 'DEDUCTION' AS  GroupDescription,3 AS SortID,'LESS: WITHDRAWAL AG. HOC' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@Cash
)


----------------------------------------------------------------------------------------------------------------------------------------
--LESS: COLLECTION A/C CHEQUE DEPOSITED
----------------------------------------------------------------------------------------------------------------------------------------
SELECT @Remittance_CollAccChqDepInHOAcc = sum(Remittance_CollAccChqDepInHOAcc)
		,@Remittance_TTFromCollAcc=sum(Remittance_TTFromCollAcc)
FROM
(
SELECT	--@BankBalance = isnull(sum(isnull(sbd.Amount,0)),0)
		Remittance_CollAccChqDepInHOAcc = (CASE WHEN pm.IsDirectRemitted<>1 THEN isnull(sum(isnull(sbd.Amount,0)),0) ELSE 0 END)
		,Remittance_TTFromCollAcc = (CASE WHEN pm.IsDirectRemitted=1 THEN isnull(sum(isnull(sbd.Amount,0)),0) ELSE 0 END)
		
FROM snd s 
LEFT Outer JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.DepositedSnDId
LEFT Outer  JOIN PaymentTransaction pt ON pt.LocationId = sbd.LocationId AND pt.PaymentTransactionId = sbd.PaymentTransactionId
LEFT Outer  JOIN PaymentMode pm ON pt.PaymentModeId=pm.PaymentModeId
WHERE sbd.Type IN ('R') --AND pm.IsToBeDeposited=1 
AND s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL
GROUP BY pm.IsDirectRemitted
) tmp

--LESS: DOC DEPOSITED IN COLLECTION A/C
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,BankBalance)
(
SELECT	3 AS  GroupID, 'DEDUCTION' AS  GroupDescription,9 AS SortID,'LESS: COLLECTION A/C CHEQUE DEPOSITED' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@Remittance_CollAccChqDepInHOAcc
)
----------------------------------------------------------------------------------------------------------------------------------------
--LESS: SENT / TRANSFERRED TO HO
----------------------------------------------------------------------------------------------------------------------------------------

--LESS: SENT / TRANSFERRED TO HO
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,BankBalance, DD_PO)
(
SELECT	3 AS  GroupID, 'DEDUCTION' AS  GroupDescription,5 AS SortID,'LESS: SENT / TRANSFERRED TO HO' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@Remittance_TTFromCollAcc,@Remittance_CASH_DD+@Remittance_BANK_DD
)
--LESS: COLLECTION A/C CHEQUE REDEPOSITED
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,BalanceDeposited)
(
SELECT	3 AS  GroupID, 'DEDUCTION' AS  GroupDescription,10 AS SortID,'LESS: COLLECTION A/C CHEQUE REDEPOSITED' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@Remittance_CollAccChqRedeposited
)


--SELECT * FROM SnDRemittance sdd


----------------------------------------------------------------------------------------------------------------------------------------
--LESS: DEDUCTED / ADJUSTED / CLEARED
----------------------------------------------------------------------------------------------------------------------------------------
--Bank Charges Recorded
--SELECT	@BankBalance = isnull(sum(isnull(bc.Amount ,0)),0)
--FROM snd s 
--LEFT Outer  JOIN SnDBankCharges bc ON s.LocationId=bc.LocationId AND s.SnDId=bc.SnDId
--WHERE s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL

--Bank Charges Collected
--SELECT	@BankChanrges = isnull(sum(isnull(bc.Amount ,0)),0)
--FROM snd s 
--LEFT Outer JOIN SnDBankCharges bc ON s.LocationId=bc.LocationId AND s.SnDId=bc.CollectionSnDId
--WHERE s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL

--SND Cash Reduction
SELECT	@Cash = isnull(sum(isnull(cr.ReductionAmount ,0)),0)
FROM snd s 
LEFT Outer JOIN SnDCashReduction cr ON s.LocationId=cr.LocationId AND s.SnDId=cr.SnDId
WHERE s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL


SELECT	@ShortageCollection = isnull(sum(isnull(SC.CollectedAmount ,0)),0)
FROM snd s 
LEFT Outer JOIN SnDShortageCollection SC ON s.LocationId=SC.LocationId AND s.SnDId=SC.SnDId
WHERE s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL



SELECT	 @RS			=	ISNULL(sum(isnull(RS,0)),0)
		,@DS_HO			=	ISNULL(sum(isnull(DS_HO,0)),0)
		,@IBC_ADJ		=	ISNULL(sum(isnull(IBC_ADJ,0)),0)
		,@Customer_ADJ	=	ISNULL(sum(isnull(Customer_ADJ,0)),0)
		,@OS_ADV_ADJ	=	ISNULL(sum(isnull(OS_ADV_ADJ,0)),0)
		,@SLN_ADJ		=	ISNULL(sum(isnull(SLN_ADJ,0)),0)
		--,@WHT_ADJ		=	ISNULL(sum(isnull(WHT_ADJ,0)),0)
		,@CN_ADJ		=	ISNULL(sum(isnull(CN_ADJ,0)),0)
FROM #TempSnDCollection tsd


SELECT @RertunDocument= isnull(sum(isnull(sd.SettlementAmount, 0) ),0)
FROM    SnD s LEFT Outer JOIN
		SnDBankDocSettlement sd ON sd.LocationId = s.LocationId AND sd.SnDId = s.SnDId
WHERE	s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL

--WHT
SELECT @WHT_ADJ = isnull(sum(isnull(wr.AdjustedAmount  ,0)),0)
FROM WHTReversal wr 
WHERE  wr.CompanyId=@CompanyId AND wr.LocationId=@LocationID AND wr.ApprovalDate BETWEEN @FromDate AND @Todate AND wr.AdjustedAmount>0

SELECT @WHT_ADJ =@WHT_ADJ + isnull(sum(isnull(wso.AdjustedAmount  ,0)),0)
FROM WHTChallanSaleOrder wso 
WHERE  wso.LocationId=@LocationID AND CONVERT(datetime,CONVERT(varchar(10),wso.insertdate,101)) BETWEEN @FromDate AND @Todate AND wso.AdjustedAmount>0


--LESS: DOC DEPOSITED IN COLLECTION A/C
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,Cash,ReturnDocument
								,Shortage,DirectlyRemitted,Customer_ADJ,OS_ADV_ADJ,SLN_ADJ,CN_ADJ,WHT_ADJ,IBC_ADJ)
(
SELECT	3 AS  GroupID, 'DEDUCTION' AS  GroupDescription,11 AS SortID,'LESS: DEDUCTED / ADJUSTED /CLEARED' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@Cash,@RertunDocument,@ShortageCollection,@DS_HO+@RS
		,@Customer_ADJ,@OS_ADV_ADJ,@SLN_ADJ,@CN_ADJ,@WHT_ADJ,@IBC_ADJ
)

SELECT GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID
		,ISNULL(SUM(ISNULL(Cash,0)),0) AS Cash
		,ISNULL(SUM(ISNULL(Cheque,0)),0) AS Cheque
		,ISNULL(SUM(ISNULL(Vault,0)),0) AS Vault
		,ISNULL(SUM(ISNULL(DD_PO,0)),0) AS DD_PO
		,ISNULL(SUM(ISNULL(TC,0)),0) AS TC
		,ISNULL(SUM(ISNULL(OtherDocument,0)),0) AS OtherDocument
		,ISNULL(SUM(ISNULL(BalanceDeposited,0)),0) AS BalanceDeposited
		,ISNULL(SUM(ISNULL(BankBalance,0)),0) AS BankBalance
		,ISNULL(SUM(ISNULL(TotalBankBalance,0)),0) AS TotalBankBalance
		,ISNULL(SUM(ISNULL(ReturnDocument,0)),0) AS ReturnDocument
		,ISNULL(SUM(ISNULL(BankCharges,0)),0) AS BankCharges
		,ISNULL(SUM(ISNULL(Shortage,0)),0) AS Shortage
		,ISNULL(SUM(ISNULL(DirectlyRemitted,0)),0) AS DirectlyRemitted
		,ISNULL(SUM(ISNULL(Customer_ADJ,0)),0) AS Customer_ADJ
		,ISNULL(SUM(ISNULL(OS_ADV_ADJ,0)),0) AS OS_ADV_ADJ
		,ISNULL(SUM(ISNULL(SLN_ADJ,0)),0) AS SLN_ADJ
		,ISNULL(SUM(ISNULL(CN_ADJ,0)),0) AS CN_ADJ
		,ISNULL(SUM(ISNULL(WHT_ADJ,0)),0) AS WHT_ADJ
		,ISNULL(SUM(ISNULL(IBC_ADJ,0)),0) AS IBC_ADJ
		,ISNULL(SUM(ISNULL(ROUNDOFF,0)),0) AS ROUNDOFF
		,ISNULL(SUM(ISNULL(TOTALREMITTABEBALANCE,0)),0) AS TOTALREMITTABEBALANCE
		
FROM #SnDReconciliation
GROUP BY GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID

---------------------------------------------------------------------------------------------------------------------------------------
-- END - SND RECONCILLIATION 
----------------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------------------------
-- BEGIN - REIMTTANCE RELATED INFORMATION
----------------------------------------------------------------------------------------------------------------------------------------

	--REMITTANCE-1   (REMITTANCE TO HO B/F)
	INSERT INTO #SnDRemittance(SortID,SourceReceipt,CompanyID,LocationID,SNDID,TotalAmount)
	(
	SELECT	1 AS SortID,
			'REMITTANCE TO HO B/F' AS SourceReceipt,
			@CompanyID,
			@LocationID,
			@SNDID,
			isnull(@Remittance_OB,0)
	)
	
	--REMITTANCE-2   (ADD: COLLECTION A/C CHEQUE DISHONOURED)
	INSERT INTO #SnDRemittance(SortID,SourceReceipt,CompanyID,LocationID,SNDID,TotalAmount)
	(
	SELECT	2 AS SortID,'ADD: COLLECTION A/C CHEQUE DISHONOURED' AS SourceReceipt
			,@CompanyID,@LocationID,@SNDID,isnull(@Remittance_CollAccChqDishonoured,0)
	)
	
	--REMITTANCE-3   (LESS: COLLECTION A/C CHEQUE REDEPOSITED)
	INSERT INTO #SnDRemittance(SortID,SourceReceipt,CompanyID,LocationID,SNDID,TotalAmount)
	(
	SELECT	3 AS SortID,'LESS: COLLECTION A/C CHEQUE REDEPOSITED' AS SourceReceipt
			,@CompanyID,@LocationID,@SNDID,isnull(@Remittance_CollAccChqRedeposited,0)
	)
	
	--REMITTANCE-4   (REMITTABLE BALANCE TOTAL:')
	INSERT INTO #SnDRemittance(SortID,SourceReceipt,CompanyID,LocationID,SNDID,TotalAmount)
	(
	SELECT	4 AS SortID,'TOTAL BEFORE TODAY REMITTANCE:' AS SourceReceipt
			,@CompanyID,@LocationID,@SNDID,isnull(@Remittance_OB,0)  + isnull(@Remittance_CollAccChqDishonoured,0) - isnull(@Remittance_CollAccChqRedeposited,0)
	)
	
	--REMITTANCE-5   (ADD: CASH IN HAND DEPOSITED IN HO A/C)
	INSERT INTO #SnDRemittance(SortID,SourceReceipt,CompanyID,LocationID,SNDID,TotalAmount)
	(
	SELECT	5 AS SortID,'CASH IN HAND DEPOSITED IN HO A/C' AS SourceReceipt
			,@CompanyID,@LocationID,@SNDID,isnull(@Remittance_CashInHandDepInHOAcc,0)
	)
	
	--REMITTANCE-6   (REMITTANCE - HOC)
	INSERT INTO #SnDRemittance(SortID,SourceReceipt,CompanyID,LocationID,SNDID,TotalAmount)
	(
	SELECT	6 AS SortID,'HOC' AS SourceReceipt
			,@CompanyID,@LocationID,@SNDID,isnull(@Remittance_HOC,0)
	)
	
	--REMITTANCE-7   (TC)
	INSERT INTO #SnDRemittance(SortID,SourceReceipt,CompanyID,LocationID,SNDID,TotalAmount)
	(
	SELECT	7 AS SortID,'TC' AS SourceReceipt
			,@CompanyID,@LocationID,@SNDID,isnull(@Remittance_TC,0)
	)
	
	--REMITTANCE-8   (DD / PO)
	INSERT INTO #SnDRemittance(SortID,SourceReceipt,CompanyID,LocationID,SNDID,TotalAmount)
	(
	SELECT	8 AS SortID,'DD / PO' AS SourceReceipt
			,@CompanyID,@LocationID,@SNDID,isnull(@Remittance_DD_PO,0)
	)
	
	--REMITTANCE-9   (OTHER DOCUMENT)
	INSERT INTO #SnDRemittance(SortID,SourceReceipt,CompanyID,LocationID,SNDID,TotalAmount)
	(
	SELECT	9 AS SortID,'OTHER DOCUMENT' AS SourceReceipt
			,@CompanyID,@LocationID,@SNDID,isnull(@Remittance_OtherDocument,0)
	)
	
	--REMITTANCE-10   (COLLECTION A/C CHEQUE DEPOSITED IN HO A/C)
	INSERT INTO #SnDRemittance(SortID,SourceReceipt,CompanyID,LocationID,SNDID,TotalAmount)
	(
	SELECT	10 AS SortID,'COLLECTION A/C CHEQUE DEPOSITED IN HO A/C' AS SourceReceipt
			,@CompanyID,@LocationID,@SNDID,isnull(@Remittance_CollAccChqDepInHOAcc,0)
	)

	--REMITTANCE-11   (REMITTANCE FROM COLLECTION A/C (ET/TT/MT))
	INSERT INTO #SnDRemittance(SortID,SourceReceipt,CompanyID,LocationID,SNDID,TotalAmount)
	(
	SELECT	11 AS SortID,'REMITTANCE FROM COLLECTION A/C (ET/TT/MT)' AS SourceReceipt
			,@CompanyID,@LocationID,@SNDID,isnull(@Remittance_TTFromCollAcc,0)
	)

	--REMITTANCE-12   (DIRECT REMITTANCE TO HO - DEPOSIT SLIP)
	INSERT INTO #SnDRemittance(SortID,SourceReceipt,CompanyID,LocationID,SNDID,TotalAmount)
	(
	SELECT	12 AS SortID,'DIRECT REMITTANCE TO HO - DEPOSIT SLIP' AS SourceReceipt
			,@CompanyID,@LocationID,@SNDID,isnull(@Remittance_DirectRemToHODS,0)
	)

	--REMITTANCE-13   (DIRECT REMITTANCE TO HO - REMITTANCE SLIP)
	INSERT INTO #SnDRemittance(SortID,SourceReceipt,CompanyID,LocationID,SNDID,TotalAmount)
	(
	SELECT	13 AS SortID,'DIRECT REMITTANCE TO HO - REMITTANCE SLIP' AS SourceReceipt
			,@CompanyID,@LocationID,@SNDID,isnull(@Remittance_DirectRemToHORS,0)
	)
	
	--REMITTANCE-14   (REMITTED TODAY'S TOTAL)

	SET @Remittance_TOTALREMITTEDTODAY =	isnull(@Remittance_CashInHandDepInHOAcc,0)
											+ isnull(@Remittance_HOC,0)
											+ isnull(@Remittance_DD_PO,0)
											+ isnull(@Remittance_TC,0)
											+ isnull(@Remittance_OtherDocument,0)
											+ isnull(@Remittance_CollAccChqDepInHOAcc,0)
											+ isnull(@Remittance_TTFromCollAcc,0)
											+ isnull(@Remittance_DirectRemToHODS,0)
											+ isnull(@Remittance_DirectRemToHORS,0)

	INSERT INTO #SnDRemittance(SortID,SourceReceipt,CompanyID,LocationID,SNDID,TotalAmount)
	(
	SELECT	14 AS SortID,'TOTAL REMITTED TODAY:' AS SourceReceipt
			,@CompanyID,@LocationID,@SNDID, isnull(@Remittance_TOTALREMITTEDTODAY,0)
	)


	--REMITTANCE-15   (REMITTANCE CF)

	SELECT @Remittance_CF = SUM(ADDEDTOREMITTABLE) FROM #TempSnDCollection 
	SET @Remittance_CF = @Remittance_CF + @Remittance_OB + @Remittance_CollAccChqDishonoured - @Remittance_CollAccChqRedeposited - @Remittance_TOTALREMITTEDTODAY

	INSERT INTO #SnDRemittance(SortID,SourceReceipt,CompanyID,LocationID,SNDID,TotalAmount)
	(
	SELECT	15 AS SortID,'TOTAL REMITTANCE TO HO C/F:' AS SourceReceipt
			,@CompanyID,@LocationID,@SNDID,@Remittance_CF
	)


	SELECT * FROM #SnDRemittance

----------------------------------------------------------------------------------------------------------------------------------------
-- END - REIMTTANCE RELATED INFORMATION
----------------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------------------------
-- BEGIN - SND BANK DEBIT ADVICE
----------------------------------------------------------------------------------------------------------------------------------------

	Declare		@DepositedDate datetime,
				@TransactionDate datetime,
				@PreviousSNDID	numeric(5,0),
				@DayBeforePreviousSNDID	numeric(5,0),
				@DefaultBank numeric(15,4),
				@OtherBank numeric(15,4)

	set  @PreviousSNDID				=	(SELECT max(sndid) FROM snd s WHERE s.CompanyId =@CompanyId  AND s.LocationId=@LocationId AND s.SnDId < @SNDID AND s.RollbackDate IS NULL)
	set  @DayBeforePreviousSNDID	=	(SELECT max(sndid) FROM snd s WHERE s.CompanyId =@CompanyId  AND s.LocationId=@LocationId AND s.SnDId < @PreviousSNDID AND s.RollbackDate IS NULL)


	--CREATE TABLE FOR SND BANK DEBIT ADVICE
	CREATE TABLE #SnDDebitAdvice    (SortID numeric(5,0),SourceReceipt Varchar(100),DepositedDate datetime,TransactionDate datetime,
									 DefaultBankAmount numeric(15,2),OtherBankAmount numeric(15,2))


--CASH DEPOSITED PREVIOUS DAY

	SET		@DepositedDate=null
	SET		@TransactionDate=NULL
	SET		@DefaultBank=0
	SET		@OtherBank=0
		
	
	SELECT	@DepositedDate		=	s.ToDate,
			@TransactionDate	=	s.ToDate,
			@DefaultBank		=	(CASE WHEN bas.IsDefault=1 THEN isnull(sum(isnull(scd.DepositAmount,0)),0)  ELSE 0 END), 
			@OtherBank			=	(CASE WHEN bas.IsDefault<>1 THEN isnull(sum(isnull(scd.DepositAmount,0)),0)  ELSE 0 END)
	FROM snd s 
	INNER JOIN SnDCashDepositBank scd ON s.LocationId=scd.LocationId AND s.SnDId=scd.SnDId
	INNER JOIN PaymentTransaction pt ON pt.LocationId = scd.LocationId AND pt.PaymentTransactionId = scd.PaymentTransactionId
	INNER JOIN uv_SystemBankAccounts sba ON pt.SystemBankAccountId=sba.BankAccountId AND pt.LocationId=sba.LocationId
	INNER JOIN BankAccountSequence bas ON bas.LocationId= sba.LocationId AND bas.BankAccountId= sba.BankAccountId 
	WHERE s.CompanyId=@CompanyId AND s.LocationId=@LocationId AND s.SnDId = @PreviousSNDID 
	GROUP BY s.ToDate,bas.IsDefault
	
	INSERT INTO #SnDDebitAdvice
	SELECT 1,'CASH DEPOSITED PREVIOUS DAY',@DepositedDate,@TransactionDate, @DefaultBank, @OtherBank

uno

	INSERT INTO #SnDDebitAdvice		
	SELECT	1,'CASH DEPOSITED PREVIOUS DAY', DepositedDate		=	s.ToDate,
			TransactionDate	=	s.ToDate,
			DefaultBank		=	(CASE WHEN bas.IsDefault=1 THEN isnull(sum(isnull(spt.AdjustedAmount,0)),0)  ELSE 0 END), 
			OtherBank			=	(CASE WHEN bas.IsDefault<>1 THEN isnull(sum(isnull(spt.AdjustedAmount,0)),0)  ELSE 0 END)
	FROM snd s
	INNER JOIN uv_SNDPaymentTransaction spt ON s.LocationId=spt.LocationId AND s.SnDId=spt.SnDId
	INNER JOIN PaymentTransaction pt ON pt.LocationId = spt.LocationId AND pt.PaymentTransactionId = spt.PaymentTransactionId
	INNER JOIN Paymentmode pm ON pt.PaymentModeId=pm.PaymentModeId
	INNER JOIN uv_SystemBankAccounts sba ON pt.SystemBankAccountId=sba.BankAccountId AND pt.LocationId=sba.LocationId
	INNER JOIN BankAccountSequence bas ON bas.LocationId= sba.LocationId AND bas.BankAccountId= sba.BankAccountId 
	WHERE s.CompanyId=@CompanyId AND s.LocationId=@LocationId AND s.SnDId = @PreviousSNDID   AND s.RollbackDate IS null
	AND pm.IsDirectDeposited=1
	GROUP BY s.ToDate,bas.IsDefault

--CHQS DEPOSITED DAY BEFORE PREVIOUS DAY

	SET		@DepositedDate		= (SELECT todate FROM snd s WHERE s.CompanyId =@CompanyId  AND s.LocationId=@LocationId AND s.SnDId = @DayBeforePreviousSNDID )
	SET		@TransactionDate	= (SELECT todate FROM snd s WHERE s.CompanyId =@CompanyId  AND s.LocationId=@LocationId AND s.SnDId = @SNDID )
	SET		@DefaultBank		= 0
	SET		@OtherBank			= 0
			
	SELECT	@DefaultBank		=	(CASE WHEN bas.IsDefault=1 THEN isnull(sum(isnull(sbd.Amount,0)),0)  ELSE 0 END), 
			@OtherBank			=	(CASE WHEN bas.IsDefault<>1 THEN isnull(sum(isnull(sbd.Amount,0)),0)  ELSE 0 END)
	FROM snd s 
	inner JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.DepositedSnDId
	INNER JOIN uv_SystemBankAccounts usba ON usba.LocationId = sbd.LocationId AND usba.BankAccountId = sbd.BankAccountId
	INNER JOIN BankAccountSequence bas ON bas.LocationId = usba.LocationId AND bas.BankAccountId = usba.BankAccountId
	WHERE sbd.Type = 'D' 
	AND s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId = @DayBeforePreviousSNDID   AND s.RollbackDate IS null
	--Exclude Redeposit Doc
	AND NOT EXISTS (SELECT	sbd2.SnDBankDocMovementId FROM SnDBankDocMovement sbd2 
					WHERE	sbd2.PaymentTransactionId=sbd.PaymentTransactionId
					AND     sbd2.LocationId = sbd.LocationId
					AND		sbd2.DepositedSnDId=sbd.LastSettlementSnDId)
	GROUP BY bas.IsDefault,s.ToDate
	
	INSERT INTO #SnDDebitAdvice
	SELECT 2,'ADD: CHQS DEPOSITED DAY BEFORE PREVIOUS DAY',@DepositedDate,@TransactionDate, @DefaultBank, @OtherBank


--LESS: SAME BANK CHQ. CLEARED PREV. DAY

	SET		@DepositedDate		= (SELECT todate FROM snd s WHERE s.CompanyId =@CompanyId  AND s.LocationId=@LocationId AND s.SnDId = @DayBeforePreviousSNDID )
	SET		@TransactionDate	= (SELECT todate FROM snd s WHERE s.CompanyId =@CompanyId  AND s.LocationId=@LocationId AND s.SnDId = @PreviousSNDID )
	SET		@DefaultBank		= 0
	SET		@OtherBank			= 0
			
	SELECT	@DefaultBank		=	(CASE WHEN bas.IsDefault=1 THEN isnull(sum(isnull(sbd.Amount,0)),0)  * -1  ELSE 0 END), 
			@OtherBank			=	(CASE WHEN bas.IsDefault<>1 THEN isnull(sum(isnull(sbd.Amount,0)),0) * -1  ELSE 0 END)
	FROM snd s 
	inner JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.DepositedSnDId
	INNER JOIN uv_SystemBankAccounts usba ON usba.LocationId = sbd.LocationId AND usba.BankAccountId = sbd.BankAccountId
	INNER JOIN BankAccountSequence bas ON bas.LocationId = usba.LocationId AND bas.BankAccountId = usba.BankAccountId
	WHERE sbd.Type = 'D' 
	AND s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId = @DayBeforePreviousSNDID AND sbd.ClearedSnDId=@PreviousSNDID  AND s.RollbackDate IS null
	--Exclude Redeposit Doc
	AND NOT EXISTS (SELECT	sbd2.SnDBankDocMovementId FROM SnDBankDocMovement sbd2 
					WHERE	sbd2.PaymentTransactionId=sbd.PaymentTransactionId
					AND     sbd2.LocationId = sbd.LocationId
					AND		sbd2.DepositedSnDId=sbd.LastSettlementSnDId)
	GROUP BY bas.IsDefault,s.ToDate
	
	INSERT INTO #SnDDebitAdvice
	SELECT 3,'LESS: SAME BANK CHQ. CLEARED PREV. DAY',@DepositedDate,@TransactionDate, @DefaultBank, @OtherBank


--ADD: SAME BANK CHQ. DEP. PREV. DAY CLEARED

	SET		@DepositedDate		= (SELECT todate FROM snd s WHERE s.CompanyId =@CompanyId  AND s.LocationId=@LocationId AND s.SnDId = @PreviousSNDID )
	SET		@TransactionDate	= (SELECT todate FROM snd s WHERE s.CompanyId =@CompanyId  AND s.LocationId=@LocationId AND s.SnDId = @SNDID )
	SET		@DefaultBank		= 0
	SET		@OtherBank			= 0
			
	SELECT	@DefaultBank		=	(CASE WHEN bas.IsDefault=1 THEN isnull(sum(isnull(sbd.Amount,0)),0)  ELSE 0 END), 
			@OtherBank			=	(CASE WHEN bas.IsDefault<>1 THEN isnull(sum(isnull(sbd.Amount,0)),0)  ELSE 0 END)
	FROM snd s 
	inner JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.DepositedSnDId
	INNER JOIN uv_SystemBankAccounts usba ON usba.LocationId = sbd.LocationId AND usba.BankAccountId = sbd.BankAccountId
	INNER JOIN BankAccountSequence bas ON bas.LocationId = usba.LocationId AND bas.BankAccountId = usba.BankAccountId
	WHERE sbd.Type = 'D' 
	AND s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId = @PreviousSNDID AND sbd.ClearedSnDId = @SNDID  AND s.RollbackDate IS null
	--Exclude Redeposit Doc
	AND NOT EXISTS (SELECT	sbd2.SnDBankDocMovementId FROM SnDBankDocMovement sbd2 
					WHERE	sbd2.PaymentTransactionId=sbd.PaymentTransactionId
					AND     sbd2.LocationId = sbd.LocationId
					AND		sbd2.DepositedSnDId=sbd.LastSettlementSnDId)
	GROUP BY bas.IsDefault,s.ToDate

	INSERT INTO #SnDDebitAdvice
	SELECT 4,'ADD: SAME BANK CHQ. DEP. PREV. DAY CLEARED',@DepositedDate,@TransactionDate, @DefaultBank, @OtherBank


--ADD: SAME BANK CHQ. DEP. PREV. DAY RETURNED

	SET		@DepositedDate		= (SELECT todate FROM snd s WHERE s.CompanyId =@CompanyId  AND s.LocationId=@LocationId AND s.SnDId = @PreviousSNDID )
	SET		@TransactionDate	= (SELECT todate FROM snd s WHERE s.CompanyId =@CompanyId  AND s.LocationId=@LocationId AND s.SnDId = @SNDID )
	SET		@DefaultBank		= 0
	SET		@OtherBank			= 0
			
	SELECT	@DefaultBank		=	(CASE WHEN bas.IsDefault=1 THEN isnull(sum(isnull(sbd.Amount,0)),0)  ELSE 0 END), 
			@OtherBank			=	(CASE WHEN bas.IsDefault<>1 THEN isnull(sum(isnull(sbd.Amount,0)),0)  ELSE 0 END)
	FROM snd s 
	inner JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.DepositedSnDId
	INNER JOIN uv_SystemBankAccounts usba ON usba.LocationId = sbd.LocationId AND usba.BankAccountId = sbd.BankAccountId
	INNER JOIN BankAccountSequence bas ON bas.LocationId = usba.LocationId AND bas.BankAccountId = usba.BankAccountId
	WHERE sbd.Type = 'D' 
	AND s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId = @PreviousSNDID AND sbd.ReturnedSnDId = @SNDID  AND s.RollbackDate IS null
	--Exclude Redeposit Doc
	AND NOT EXISTS (SELECT	sbd2.SnDBankDocMovementId FROM SnDBankDocMovement sbd2 
					WHERE	sbd2.PaymentTransactionId=sbd.PaymentTransactionId
					AND     sbd2.LocationId = sbd.LocationId
					AND		sbd2.DepositedSnDId=sbd.LastSettlementSnDId)
	GROUP BY bas.IsDefault,s.ToDate

	INSERT INTO #SnDDebitAdvice
	SELECT 5,'ADD: SAME BANK CHQ. DEP. PREV. DAY RETURNED',@DepositedDate,@TransactionDate, @DefaultBank, @OtherBank

--ADD: CHQS. PRIOR TO DAY BEFORE PREV. DAY
--Those cheques which is Prior to day before deposited day but not clear and return

	SET		@DepositedDate		=  null
	SET		@TransactionDate	= (SELECT todate FROM snd s WHERE s.CompanyId =@CompanyId  AND s.LocationId=@LocationId AND s.SnDId = @SNDID )
	SET		@DefaultBank		= 0
	SET		@OtherBank			= 0
			
	SELECT	@DefaultBank		=	(CASE WHEN bas.IsDefault=1 THEN isnull(sum(isnull(sbd.Amount,0)),0)  ELSE 0 END), 
			@OtherBank			=	(CASE WHEN bas.IsDefault<>1 THEN isnull(sum(isnull(sbd.Amount,0)),0)  ELSE 0 END)
	FROM snd s 
	inner JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.DepositedSnDId
	INNER JOIN uv_SystemBankAccounts usba ON usba.LocationId = sbd.LocationId AND usba.BankAccountId = sbd.BankAccountId
	INNER JOIN BankAccountSequence bas ON bas.LocationId = usba.LocationId AND bas.BankAccountId = usba.BankAccountId
	WHERE	sbd.Type = 'D' 
	--AND s.CompanyId=5 AND s.LocationId=58 AND s.SnDId=28 AND s.RollbackDate IS NULL
	AND		s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId < @DayBeforePreviousSNDID   AND s.RollbackDate IS null
	AND		(
			ISNULL(SBD.ClearedSnDId, @SNDID+1)	> @SNDID  
			and ISNULL(SBD.ReturnedSnDId,@SNDID+1) > @SNDID
			)
	
	--Exclude Redeposit Doc
	AND NOT EXISTS (SELECT	sbd2.SnDBankDocMovementId FROM SnDBankDocMovement sbd2 
					WHERE	sbd2.PaymentTransactionId=sbd.PaymentTransactionId
					AND     sbd2.LocationId = sbd.LocationId
					AND		sbd2.DepositedSnDId=sbd.LastSettlementSnDId)
	GROUP BY bas.IsDefault,s.ToDate

	INSERT INTO #SnDDebitAdvice
	SELECT 6,'ADD: CHQS. PRIOR TO DAY BEFORE PREV. DAY',@DepositedDate,@TransactionDate, @DefaultBank, @OtherBank



--LESS: CHQS. RET. ALL PREV. DEPOSIT
--Those cheques which is Prior to day before deposited day but return in current SND

	SET		@DepositedDate		=  null
	SET		@TransactionDate	= (SELECT todate FROM snd s WHERE s.CompanyId =@CompanyId  AND s.LocationId=@LocationId AND s.SnDId = @SNDID )
	SET		@DefaultBank		= 0
	SET		@OtherBank			= 0
			
	SELECT	@DefaultBank		=	(CASE WHEN bas.IsDefault=1 THEN isnull(sum(isnull(sbd.Amount,0)),0) * -1   ELSE 0 END), 
			@OtherBank			=	(CASE WHEN bas.IsDefault<>1 THEN isnull(sum(isnull(sbd.Amount,0)),0) * -1  ELSE 0 END)
	FROM snd s 
	inner JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.DepositedSnDId
	INNER JOIN uv_SystemBankAccounts usba ON usba.LocationId = sbd.LocationId AND usba.BankAccountId = sbd.BankAccountId
	INNER JOIN BankAccountSequence bas ON bas.LocationId = usba.LocationId AND bas.BankAccountId = usba.BankAccountId
	WHERE	sbd.Type = 'D' 
	AND		s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId < @DayBeforePreviousSNDID   AND s.RollbackDate IS null
	AND		SBD.ReturnedSnDId = @SNDID
	--Exclude Redeposit Doc
	AND NOT EXISTS (SELECT	sbd2.SnDBankDocMovementId FROM SnDBankDocMovement sbd2 
					WHERE	sbd2.PaymentTransactionId=sbd.PaymentTransactionId
					AND     sbd2.LocationId = sbd.LocationId
					AND		sbd2.DepositedSnDId=sbd.LastSettlementSnDId)
	GROUP BY bas.IsDefault,s.ToDate

	INSERT INTO #SnDDebitAdvice
	SELECT 7,'LESS: CHQS. RET. ALL PREV. DEPOSIT',@DepositedDate,@TransactionDate, @DefaultBank, @OtherBank


--LESS: UNMARKED CHEQUES
--Those cheques which is Prior to day before deposited day but not clear and return

	SET		@DepositedDate		= Null
	SET		@TransactionDate	= Null
	SET		@DefaultBank		= 0
	SET		@OtherBank			= 0
			
	SELECT	@DefaultBank		=	(CASE WHEN bas.IsDefault=1 THEN isnull(sum(isnull(sbd.Amount,0)),0) * -1   ELSE 0 END), 
			@OtherBank			=	(CASE WHEN bas.IsDefault<>1 THEN isnull(sum(isnull(sbd.Amount,0)),0) * -1  ELSE 0 END)
	FROM snd s 
	inner JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.DepositedSnDId
	INNER JOIN uv_SystemBankAccounts usba ON usba.LocationId = sbd.LocationId AND usba.BankAccountId = sbd.BankAccountId
	INNER JOIN BankAccountSequence bas ON bas.LocationId = usba.LocationId AND bas.BankAccountId = usba.BankAccountId
	WHERE	sbd.Type = 'D' 
	AND		s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId <= @DayBeforePreviousSNDID   AND s.RollbackDate IS null
	AND		(
			ISNULL(SBD.ClearedSnDId, @SNDID+1)	> @SNDID  
			and ISNULL(SBD.ReturnedSnDId,@SNDID+1) > @SNDID
			)
	--Exclude Redeposit Doc
	AND NOT EXISTS (SELECT	sbd2.SnDBankDocMovementId FROM SnDBankDocMovement sbd2 
					WHERE	sbd2.PaymentTransactionId=sbd.PaymentTransactionId
					AND     sbd2.LocationId = sbd.LocationId
					AND		sbd2.DepositedSnDId=sbd.LastSettlementSnDId)
	GROUP BY bas.IsDefault,s.ToDate
	
	INSERT INTO #SnDDebitAdvice
	SELECT 8,'LESS: UNMARKED CHEQUES',@DepositedDate,@TransactionDate, @DefaultBank, @OtherBank


	--GET DATA
	SELECT SortID,SourceReceipt,DepositedDate,TransactionDate,sum(isnull(DefaultBankAmount,0)) AS DefaultBank,sum(isnull(OtherBankAmount,0)) AS OtherBank 
	FROM #SnDDebitAdvice
	GROUP BY SortID,SourceReceipt,DepositedDate,TransactionDate
	
----------------------------------------------------------------------------------------------------------------------------------------
-- END - SND BANK DEBIT ADVICE
----------------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------------------------
-- BEGIN - BREAKUP OF DAY BEFORE PREV. DAY DEPOSITED CHQS
----------------------------------------------------------------------------------------------------------------------------------------

	--CREATE TABLE FOR SND BANK DEBIT ADVICE
	CREATE TABLE #SnDepositedChequeDetail(SortID numeric(5,0),SourceReceipt Varchar(100),DepositedDate datetime,TransactionDate datetime,
	DefaultBankAmount numeric(15,2),OtherBankAmount numeric(15,2))

--CHQS DEPOSITED DAY BEFORE PREVIOUS DAY

	SET		@DepositedDate		= Null
	SET		@TransactionDate	= Null
	SET		@DefaultBank		= 0
	SET		@OtherBank			= 0
			
	SELECT	@DepositedDate		=   s.ToDate,
			@DefaultBank		=	(CASE WHEN bas.IsDefault=1 THEN isnull(sum(isnull(sbd.Amount,0)),0) * -1   ELSE 0 END), 
			@OtherBank			=	(CASE WHEN bas.IsDefault<>1 THEN isnull(sum(isnull(sbd.Amount,0)),0) * -1  ELSE 0 END)
	FROM snd s 
	inner JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.DepositedSnDId
	INNER JOIN uv_SystemBankAccounts usba ON usba.LocationId = sbd.LocationId AND usba.BankAccountId = sbd.BankAccountId
	INNER JOIN BankAccountSequence bas ON bas.LocationId = usba.LocationId AND bas.BankAccountId = usba.BankAccountId
	WHERE sbd.Type = 'D' 
	AND s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId = @DayBeforePreviousSNDID   AND s.RollbackDate IS null
	--Exclude Redeposit Doc
	AND NOT EXISTS (SELECT	sbd2.SnDBankDocMovementId FROM SnDBankDocMovement sbd2 
					WHERE	sbd2.PaymentTransactionId=sbd.PaymentTransactionId
					AND     sbd2.LocationId = sbd.LocationId
					AND		sbd2.DepositedSnDId=sbd.LastSettlementSnDId)
	GROUP BY bas.IsDefault,s.ToDate
	
	INSERT INTO #SnDepositedChequeDetail
	SELECT 1,'ADD: CHQS DEPOSITED ON',@DepositedDate,@TransactionDate, @DefaultBank, @OtherBank
	
--CHQS CLEARED - NORMAL CLEARING

	SET		@DepositedDate		= Null
	SET		@TransactionDate	= (SELECT todate FROM snd s WHERE s.CompanyId =@CompanyId  AND s.LocationId=@LocationId AND s.SnDId = @SNDID )
	SET		@DefaultBank		= 0
	SET		@OtherBank			= 0
			
	SELECT	@DepositedDate		=   s.ToDate,
			@DefaultBank		=	(CASE WHEN bas.IsDefault=1 THEN isnull(sum(isnull(sbd.Amount,0)),0)    ELSE 0 END), 
			@OtherBank			=	(CASE WHEN bas.IsDefault<>1 THEN isnull(sum(isnull(sbd.Amount,0)),0)   ELSE 0 END)
	FROM snd s 
	inner JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.DepositedSnDId
	INNER JOIN uv_SystemBankAccounts usba ON usba.LocationId = sbd.LocationId AND usba.BankAccountId = sbd.BankAccountId
	INNER JOIN BankAccountSequence bas ON bas.LocationId = usba.LocationId AND bas.BankAccountId = usba.BankAccountId
	WHERE sbd.Type			=	'D' 
	AND s.CompanyId			=	@CompanyId 
	AND s.LocationId		=	@LocationID 
	AND s.SnDId				=	@DayBeforePreviousSNDID 
	AND sbd.ClearedSnDId	<=	@SNDID 
	AND s.RollbackDate		IS null
	--Exclude Redeposit Doc
	AND NOT EXISTS (SELECT	sbd2.SnDBankDocMovementId FROM SnDBankDocMovement sbd2 
					WHERE	sbd2.PaymentTransactionId=sbd.PaymentTransactionId
					AND     sbd2.LocationId = sbd.LocationId
					AND		sbd2.DepositedSnDId=sbd.LastSettlementSnDId)
	GROUP BY bas.IsDefault,s.ToDate
	
	INSERT INTO #SnDepositedChequeDetail
	SELECT 2,'LESS: CHQ. CLEARED',@DepositedDate,@TransactionDate, @DefaultBank, @OtherBank

----LESS: CHQS CLEARED - SAME BANK

--	SET		@DepositedDate		= Null
--	SET		@TransactionDate	= (SELECT todate FROM snd s WHERE s.CompanyId =@CompanyId  AND s.LocationId=@LocationId AND s.SnDId = @PreviousSNDID )
--	SET		@DefaultBank		= 0
--	SET		@OtherBank			= 0
			
--	SELECT	@DepositedDate		=   s.ToDate,
--			@DefaultBank		=	(CASE WHEN bas.IsDefault=1 THEN isnull(sum(isnull(sbd.Amount,0)),0) * -1   ELSE 0 END), 
--			@OtherBank			=	(CASE WHEN bas.IsDefault<>1 THEN isnull(sum(isnull(sbd.Amount,0)),0) * -1  ELSE 0 END)
--	FROM snd s 
--	inner JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.DepositedSnDId
--	INNER JOIN uv_SystemBankAccounts usba ON usba.LocationId = sbd.LocationId AND usba.BankAccountId = sbd.BankAccountId
--	INNER JOIN BankAccountSequence bas ON bas.LocationId = usba.LocationId AND bas.BankAccountId = usba.BankAccountId
--	WHERE sbd.Type = 'D' 
--	AND s.CompanyId=@CompanyId AND s.LocationId=@LocationID    AND s.RollbackDate IS null
--	AND s.SnDId = @DayBeforePreviousSNDID 
--	AND sbd.ClearedSnDId = @PreviousSNDID 
--	--Exclude Redeposit Doc
--	AND NOT EXISTS (SELECT	sbd2.SnDBankDocMovementId FROM SnDBankDocMovement sbd2 
--					WHERE	sbd2.PaymentTransactionId=sbd.PaymentTransactionId
--					AND		sbd2.DepositedSnDId=sbd.LastSettlementSnDId)
--	GROUP BY bas.IsDefault,s.ToDate
	
--	INSERT INTO #SnDepositedChequeDetail
--	SELECT 3,'LESS: CHQS CLEARED - SAME BANK',@DepositedDate,@TransactionDate, @DefaultBank, @OtherBank
	
	--CHQS RETURNED - TODAY snd
	
	SET		@DepositedDate		= Null
	SET		@TransactionDate	= (SELECT todate FROM snd s WHERE s.CompanyId =@CompanyId  AND s.LocationId=@LocationId AND s.SnDId = @SNDID )
	SET		@DefaultBank		= 0
	SET		@OtherBank			= 0
			
	SELECT	@DepositedDate		=   s.ToDate,
			@DefaultBank		=	(CASE WHEN bas.IsDefault=1 THEN isnull(sum(isnull(sbd.Amount,0)),0)    ELSE 0 END), 
			@OtherBank			=	(CASE WHEN isnull(bas.IsDefault,0)<>1 THEN isnull(sum(isnull(sbd.Amount,0)),0)  ELSE 0 END)
	FROM snd s 
	inner JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.DepositedSnDId
	INNER JOIN uv_SystemBankAccounts usba ON usba.LocationId = sbd.LocationId AND usba.BankAccountId = sbd.BankAccountId
	INNER JOIN BankAccountSequence bas ON bas.LocationId = usba.LocationId AND bas.BankAccountId = usba.BankAccountId
	WHERE sbd.Type = 'D' 
	AND s.CompanyId=@CompanyId AND s.LocationId=@LocationID    AND s.RollbackDate IS NULL 
	AND s.SnDId = @DayBeforePreviousSNDID 
	AND sbd.ReturnedSnDId <= @SNDID 
	--Exclude Redeposit Doc
	AND NOT EXISTS (SELECT	sbd2.SnDBankDocMovementId FROM SnDBankDocMovement sbd2 
					WHERE	sbd2.PaymentTransactionId=sbd.PaymentTransactionId
					AND     sbd2.LocationId = sbd.LocationId
					AND		sbd2.DepositedSnDId=sbd.LastSettlementSnDId)
	GROUP BY bas.IsDefault,s.ToDate

	INSERT INTO #SnDepositedChequeDetail
	SELECT 4,'LESS: CHQS RETURNED',@DepositedDate,@TransactionDate, @DefaultBank, @OtherBank
	
----LESS: CHQS ALREADY RETURNED - SAME BANK

--	SET		@DepositedDate		= Null
--	SET		@TransactionDate	= (SELECT todate FROM snd s WHERE s.CompanyId =@CompanyId  AND s.LocationId=@LocationId AND s.SnDId = @PreviousSNDID  )
--	SET		@DefaultBank		= 0
--	SET		@OtherBank			= 0
			
--	SELECT	@DepositedDate		=   s.ToDate,
--			@DefaultBank		=	(CASE WHEN bas.IsDefault=1 THEN isnull(sum(isnull(sbd.Amount,0)),0) * -1   ELSE 0 END), 
--			@OtherBank			=	(CASE WHEN bas.IsDefault<>1 THEN isnull(sum(isnull(sbd.Amount,0)),0) * -1  ELSE 0 END)
--	FROM snd s 
--	inner JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.DepositedSnDId
--	INNER JOIN uv_SystemBankAccounts usba ON usba.LocationId = sbd.LocationId AND usba.BankAccountId = sbd.BankAccountId
--	INNER JOIN BankAccountSequence bas ON bas.LocationId = usba.LocationId AND bas.BankAccountId = usba.BankAccountId
--	WHERE sbd.Type = 'D' 
--	AND s.CompanyId=@CompanyId AND s.LocationId=@LocationID    AND s.RollbackDate IS null
--	AND s.SnDId = @DayBeforePreviousSNDID 
--	AND sbd.ReturnedSnDId = @PreviousSNDID 
--	--Exclude Redeposit Doc
--	AND NOT EXISTS (SELECT	sbd2.SnDBankDocMovementId FROM SnDBankDocMovement sbd2 
--					WHERE	sbd2.PaymentTransactionId=sbd.PaymentTransactionId
--					AND		sbd2.DepositedSnDId=sbd.LastSettlementSnDId)
--	GROUP BY bas.IsDefault,s.ToDate		
	
--	INSERT INTO #SnDepositedChequeDetail
--	SELECT 5,'LESS: CHQS RETURNED - SAME BANK',@DepositedDate,@TransactionDate, @DefaultBank, @OtherBank
	
	--LESS: CHQS UNMARKED
	
	SET		@DepositedDate		= Null
	SET		@TransactionDate	= Null
	SET		@DefaultBank		= 0
	SET		@OtherBank			= 0
			
	SELECT	@DefaultBank		=	(CASE WHEN bas.IsDefault=1 THEN isnull(sum(isnull(sbd.Amount,0)),0)    ELSE 0 END), 
			@OtherBank			=	(CASE WHEN isnull(bas.IsDefault,0)<>1 THEN isnull(sum(isnull(sbd.Amount,0)),0)   ELSE 0 END)
	FROM snd s 
	inner JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.DepositedSnDId
	INNER JOIN uv_SystemBankAccounts usba ON usba.LocationId = sbd.LocationId AND usba.BankAccountId = sbd.BankAccountId
	INNER JOIN BankAccountSequence bas ON bas.LocationId = usba.LocationId AND bas.BankAccountId = usba.BankAccountId
	WHERE sbd.Type = 'D' 
	AND s.CompanyId=@CompanyId AND s.LocationId=@LocationID    AND s.RollbackDate IS null
	AND s.SnDId = @DayBeforePreviousSNDID 
	AND		(
			ISNULL(SBD.ClearedSnDId, @SNDID+1)	> @SNDID  
			and ISNULL(SBD.ReturnedSnDId,@SNDID+1) > @SNDID
			)
	--Exclude Redeposit Doc
	AND NOT EXISTS (SELECT	sbd2.SnDBankDocMovementId FROM SnDBankDocMovement sbd2 
					WHERE	sbd2.PaymentTransactionId=sbd.PaymentTransactionId
					AND     sbd2.LocationId = sbd.LocationId
					AND		sbd2.DepositedSnDId=sbd.LastSettlementSnDId)
	GROUP BY bas.IsDefault,s.ToDate	
	
	INSERT INTO #SnDepositedChequeDetail
	SELECT 6,'LESS: CHQS UNMARKED',@DepositedDate,@TransactionDate, @DefaultBank, @OtherBank
	
	
--GET DATA
	SELECT SortID,SourceReceipt,DepositedDate,TransactionDate,sum(isnull(DefaultBankAmount,0)) AS DefaultBank,sum(isnull(OtherBankAmount,0)) AS OtherBank 
	FROM #SnDepositedChequeDetail
	GROUP BY SortID,SourceReceipt,DepositedDate,TransactionDate
	
	----------------------------------------------------------------------------------------------------------------------------------------
-- END - BREAKUP OF DAY BEFORE PREV. DAY DEPOSITED CHQS
----------------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------------------------
-- BEGIN - ALL INCLEARING CHEQUES
----------------------------------------------------------------------------------------------------------------------------------------
	
	SET  @DepositedDate	= 	(SELECT todate FROM snd s WHERE s.CompanyId =@CompanyId  AND s.LocationId=@LocationId AND s.SnDId = @SNDID )

	SELECT	1 AS SORTID,
			'CHQS DEPOSITED ON:' AS SourceReceipt,
			S.ToDate AS Depositeddate,
			DefaultBank	=	(CASE WHEN bas.IsDefault=1 THEN isnull(sum(isnull(sbd.Amount,0)),0)   ELSE 0 END), 
			OtherBank	=	(CASE WHEN isnull(bas.IsDefault,0)<>1 THEN isnull(sum(isnull(sbd.Amount,0)),0)   ELSE 0 END)
	FROM snd s 
	inner JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.DepositedSnDId
	left JOIN uv_SystemBankAccounts usba ON usba.LocationId = sbd.LocationId AND usba.BankAccountId = sbd.BankAccountId
	left JOIN BankAccountSequence bas ON bas.LocationId = usba.LocationId AND bas.BankAccountId = usba.BankAccountId
	WHERE sbd.Type = 'D' 
	AND s.CompanyId=@CompanyId AND s.LocationId=@LocationID   AND s.RollbackDate IS NULL  AND s.SnDId  <= @SNDID
	AND		
	(
			ISNULL(SBD.ClearedSnDId, @SNDID+1)	> @SNDID  
			and ISNULL(SBD.ReturnedSnDId,@SNDID+1) > @SNDID
	)
	AND s.ToDate > @DepositedDate - 3
	--Exclude Redeposit Doc
	--AND NOT EXISTS (SELECT	sbd2.SnDBankDocMovementId FROM SnDBankDocMovement sbd2 
	--				WHERE	sbd2.PaymentTransactionId=sbd.PaymentTransactionId
	--				AND     sbd2.LocationId = sbd.LocationId
	--				AND		sbd2.DepositedSnDId=sbd.LastSettlementSnDId)
	AND sbd.SnDBankDocMovementId NOT IN 
	(
		SELECT	sbd2.SnDBankDocMovementId 
        FROM SnDBankDocMovement sbd2 
		WHERE sbd2.LocationId = sbd.LocationId
		AND	sbd2.DepositedSnDId=sbd.LastSettlementSnDId
		AND	sbd2.RefSnDBankDocMovementId IS NOT NULL 
	)
	GROUP BY s.ToDate,bas.IsDefault	
	
	
	UNION ALL
	
	
	SELECT  2 AS SORTID,
			'CHQS DEPOSITED LESS THEN:' AS SourceReceipt,
			@DepositedDate AS Depositeddate,
			DefaultBank	=	(CASE WHEN bas.IsDefault=1 THEN isnull(sum(isnull(sbd.Amount,0)),0)   ELSE 0 END), 
			OtherBank	=	(CASE WHEN isnull(bas.IsDefault,0)<>1 THEN isnull(sum(isnull(sbd.Amount,0)),0)   ELSE 0 END)
	FROM snd s 
	inner JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.DepositedSnDId
	left JOIN uv_SystemBankAccounts usba ON usba.LocationId = sbd.LocationId AND usba.BankAccountId = sbd.BankAccountId
	left JOIN BankAccountSequence bas ON bas.LocationId = usba.LocationId AND bas.BankAccountId = usba.BankAccountId
	WHERE sbd.Type = 'D' 
	AND s.CompanyId=@CompanyId AND s.LocationId=@LocationID  AND s.RollbackDate IS NULL   AND s.SnDId  <= @SNDID
	AND		
	(
			ISNULL(SBD.ClearedSnDId, @SNDID+1)	> @SNDID  
			and ISNULL(SBD.ReturnedSnDId,@SNDID+1) > @SNDID
	)
	AND s.ToDate < @DepositedDate - 4
	--Exclude Redeposit Doc
	--AND NOT EXISTS 
	--(
	--	SELECT	sbd2.SnDBankDocMovementId FROM SnDBankDocMovement sbd2 
	--	WHERE	
	--	sbd2.PaymentTransactionId=sbd.PaymentTransactionId
	--	AND sbd2.LocationId = sbd.LocationId
	--	AND		sbd2.DepositedSnDId=sbd.LastSettlementSnDId
	--)
	AND sbd.SnDBankDocMovementId NOT IN 
	(
		SELECT	sbd2.SnDBankDocMovementId 
        FROM SnDBankDocMovement sbd2 
		WHERE sbd2.LocationId = sbd.LocationId
		AND	sbd2.DepositedSnDId=sbd.LastSettlementSnDId
		AND	sbd2.RefSnDBankDocMovementId IS NOT NULL 
	)
					
	GROUP BY bas.IsDefault	
	ORDER BY SORTID ,Depositeddate desc
	
	DROP TABLE #SnDReconciliation
	DROP TABLE #SnDRemittance
	DROP TABLE #TempSnDCollection
	DROP TABLE #TempBankBalance
	DROP TABLE #TempSnDOpeningBalance
	DROP TABLE #SnDDebitAdvice
	DROP TABLE #SnDepositedChequeDetail GOSELECT *--max(LEN(p.[Name])) 
FROM Product p 
WHERE p.ProductId = 2406

UPDATE product SET [Name] =  [Name] + '1234567890'
WHERE ProductId = 2406   GOSELECT
				usso.LocationId,
				usso.PrincipalBusinessLineId,
				usso.ProductId,
				--Case When @SalesCriteria  = 0 then SUM(usso.SoldQuantity) 
				--     When @SalesCriteria  = 1 then SUM(usso.SoldQuantity)
				--     When @SalesCriteria  = 2 then 0 END 
				--AS [Quantity],
				usso.SalePassDate AS [Date],
				pc.PP,				
				pc.TP
			FROM uv_Sales_SaleOrder usso 
			INNER JOIN PriceCatalog pc ON usso.PriceId = pc.PriceCatalogId
		
			--INNER JOIN   DBO.Split(@ProductIds, ',') Product ON  (Product.Data = usso.ProductId OR @ProductIds = '')
			--INNER JOIN   DBO.Split(@PBLIds, ',') PBL ON  (PBL.Data = usso.PrincipalBusinessLineId OR @PBLIds = '')
			--INNER JOIN   DBO.Split(@LocationIds, ',') Location ON  (Location.Data = usso.LocationId OR @LocationIds = '')
			--WHERE 
			--(  @SelectAll = 0	  
			-- OR  (@SelectAll = 1 AND ( DATEDIFF(DAY, usso.SalePassDate,  @FromDate) = 0 ))
			-- OR  (@SelectAll = 2 AND ( DATEDIFF(DAY, usso.SalePassDate,  @FromDate) <= 0 AND DATEDIFF(day, usso.SalePassDate, @ToDate) >= 0 ))   
			--) AND usso.IsRollbacked = 0
		  --  GROUP BY 
				--usso.LocationId,
				--usso.PrincipalBusinessLineId,
				--usso.ProductId,
				--usso.SalePassDate,
				--pc.PP,
				
				usp_Report_GrossSaleAndMargin
				--pc.TP GODECLARE @PrincipalTeamIds varchar(max),
		@SalesForce  varchar(max),
		@PBLIds  varchar(max),
		@Locations  varchar(max),
		@IsTemporary bit,
		@IsShopSale bit,
		@IsUnTagg bit,       		        
		@FromDate datetime,
		@ToDate datetime 
SET @PrincipalTeamIds =''--'36,32,33,34,35'
SET @SalesForce = ''--'4,26,28,73,75,95,96,102,108,113,116,118,119,141,146,153,181,196,199,205,11,18,45,47,53,57,66,78,89,93,122,130,133,158,164,171,179,188,191,206,1,12,14,16,34,36,58,63,87,91,120,123,145,170,186,197,202,208,210,219,2,22,27,35,46,49,67,70,107,126,131,134,135,144,149,177,180,182,216,217,'
SET @PBLIds='28,55'
SET @Locations='14'
SET @IsTemporary = 1
SET @IsShopSale = 1
SET @IsUnTagg = 1
SET @FromDate = '2013-11-23 00:00:00.000'
SET @ToDate = '2013-11-26 00:00:00.000'

SELECT 
	L.Name AS [Location Name],
	P.PBLSequenceId,
	P.[Principal Business Line], 
	P.DeliveryChallanId,
	P.PrincipalTeamId,
	P.[Principal Team],
	P.ProductId, 
	P.[Product Name],
	P.ProductSequence,
	P.[SoldQuantity],
	P.[Value],
	P.FFId,
	P.FFName,
	P.FFName AS [FFSeq],
	P.LocationId
	INTO #Temp
FROM 
(
	SELECT upbla.PBLSequenceId,upbla.Name AS [Principal Business Line],SOPROD.DeliveryChallanId, 
	       TeamProduct.PrincipalTeamId,TeamProduct.[Principal Team],
		   TeamProduct.ProductId, 
		   up.ShortName AS [Product Name],up.ProductSequence,
		   SUM(ISNULL(SOProd.SoldQuantity,0)) AS [SoldQuantity],
		   SUM(ISNULL(SOProd.SoldQuantity,0) * ISNULL(SOProd.TP,0)) AS [Value],
		   SOProd.FFId,
		   SOProd.FFName,
		   SOProd.FFName AS [FFSeq],
		   LocationId
	FROM   
	(
		 SELECT  ptp.PrincipalTeamProductId, ptp.PrincipalTeamId,ptt.ShortName AS [Principal Team],
		 ptp.ToBeDeleted,ptp.ProductId
		 FROM PrincipalTeamProduct ptp
		 INNER JOIN PrincipalTeam ptt ON ptt.PrincipalTeamId = ptp.PrincipalTeamId
		 INNER JOIN   DBO.Split(@PrincipalTeamIds, ',' ) PT ON ( PT.Data = ptp.PrincipalTeamId OR @PrincipalTeamIds = '' )         
		 WHERE  ptp.ToBeDeleted = 0          
		 AND DATEDIFF(day, ptt.EffectiveDate,GETDATE())>= 0
		 AND  DATEDIFF(day,GETDATE(), isnull( ptt.EndDate,GETDATE()+1))> 0
	)  TeamProduct
	LEFT JOIN 
	(
			SELECT so.LocationId,so.DeliveryChallanId, so.SaleOrderId,so.SalePassDate, so.IsCash, st.Code AS [Sale Type], sop.ProductId, 
			sop.SoldQuantity, so.CustomerId, sfo.PrincipalTeamId, sop.tp AS [TP],
			( CASE  WHEN st.Code = 'SHP' THEN -1 WHEN c.IsTemporary = 1 THEN -2 ELSE ISNULL(sfo.SalesForceId,-3) END ) AS FFId,
			( CASE  WHEN st.Code = 'SHP' THEN 'SHOP' WHEN c.IsTemporary = 1 THEN 'NEW' ELSE ISNULL(sfo.[FieldForceName],'UNTAG') END ) AS FFName,
			st.Code,
			c.IsTemporary
			FROM   SaleOrder so
			INNER JOIN DBO.Split(@Locations, ',' ) Loc ON   ( Loc.Data = so.LocationId OR @Locations = '' )
			INNER JOIN  SaleType st ON   so.SaleTypeId = st.SaleTypeId
			INNER JOIN  Customer c ON   ( c.CustomerId = so.CustomerId AND   c.LocationId = so.LocationId )
			INNER JOIN  SaleOrderProduct sop ON   ( sop.LocationId = so.LocationId AND   sop.SaleOrderId = so.SaleOrderId  AND sop.EndDate IS NULL )
			LEFT JOIN  
			(
				SELECT DISTINCT sfc.LocationId, sfc.CustomerId, sfc.PrincipalTeamId, sf.SalesForceId, sf.ShortName [FieldForceName],ptp.ProductId
				FROM SalesForceCustomer sfc
				INNER JOIN SalesForce sf ON sf.LocationId = sfc.LocationId
				AND sf.SalesForceId = sfc.SalesForceId
				INNER JOIN PrincipalTeam ptt ON ptt.PrincipalTeamId=sf.PrincipalTeamId
				INNER JOIN PrincipalTeamProduct ptp ON ptt.PrincipalTeamId=ptp.PrincipalTeamId AND ptp.ToBeDeleted=0			
				INNER JOIN DBO.Split(@PrincipalTeamIds, ',' ) PT ON ( PT.Data = sfc.PrincipalTeamId OR @PrincipalTeamIds = '' )  		 
				INNER JOIN DBO.Split(@SalesForce, ',' ) ff ON   ( ff.Data = sfc.SalesForceId OR @SalesForce = '' )	
				INNER JOIN DBO.Split(@Locations, ',' ) Loc ON   ( Loc.Data = sf.LocationId OR @Locations = '' )
				
				WHERE sfc.ToBeDeleted = 0
				    /*AND DATEDIFF(day, sf.EffectiveDate,ISNULL(@FromDate,GETDATE()))>= 0
					AND  DATEDIFF(day,ISNULL(@ToDate,GETDATE()), isnull( sf.EndDate,@ToDate+1))> 0*/
					AND DATEDIFF(day, sf.EffectiveDate,GETDATE())>= 0
					AND  DATEDIFF(day,GETDATE(), isnull( sf.EndDate,GETDATE()+1))> 0					  	
					AND DATEDIFF(day, ptt.EffectiveDate,GETDATE())>= 0
					AND  DATEDIFF(day,GETDATE(), isnull( ptt.EndDate,GETDATE()+1))> 0
					
			) SFO
			ON ( SFO.LocationId = so.LocationId AND SFO.Customerid = so.CustomerId  AND sop.ProductId=SFO.ProductId)
			WHERE   (DATEDIFF(DAY,so.SalePassDate,  @FromDate) <= 0 AND  DATEDIFF(DAY,so.SalePassDate,  @ToDate) >= 0)				   
			AND
			(
					(@IsTemporary = 1	OR (@IsTemporary = 0	AND  c.IsTemporary = 0))
				AND (@IsShopSale = 1	OR (@IsShopSale = 0		AND  st.Code <> 'SHP')	)
				AND (@IsUnTagg = 1		OR (@IsUnTagg = 0		AND  sfo.PrincipalTeamId IS NOT NULL))
			)
			
	) SOProd ON TeamProduct.ProductId = SOProd.ProductId 
	AND (TeamProduct.PrincipalTeamId = SOProd.PrincipalTeamId OR SOProd.PrincipalTeamId IS NULL)	
	INNER JOIN   uv_Product up ON   TeamProduct.ProductId = up.ProductId
    INNER JOIN uv_PrincipalBusinessLine_All upbla ON upbla.PrincipalBusinessLineId = up.PrincipalBusinessLineId   
    INNER JOIN   DBO.Split(@PBLIds, ',' ) PBL ON   ( PBL.Data = up.PrincipalBusinessLineId OR @PBLIds = '' )
     	
	GROUP BY
	upbla.PBLSequenceId,upbla.Name,
	SOPROD.DeliveryChallanId,
	SOProd.FFId, SOProd.FFName,
	TeamProduct.PrincipalTeamId,
	TeamProduct.[Principal Team],
	up.ProductSequence,
	TeamProduct.ProductId, 
	up.ShortName,
	SOProd.CustomerId,SOProd.LocationId


	UNION ALL

	SELECT upbla.PBLSequenceId,upbla.Name AS [Principal Business Line],so.DeliveryChallanId,99999 AS PrincipalTeamId,
	[Product].[Principal Team], [Product].ProductId,[Product].Name ,[Product].ProductSequence,
	sum(sop.SoldQuantity) AS [SoldQuantity],
	sum(sop.SoldQuantity*sop.TP) AS [Amount],
	( CASE  WHEN st.Code = 'SHP' THEN -1 WHEN c.IsTemporary = 1 THEN -2 ELSE ISNULL(sf.SalesForceId,-3) END ) AS FFId,
	( CASE  WHEN st.Code = 'SHP' THEN 'SHOP' WHEN c.IsTemporary = 1 THEN 'NEW' ELSE ISNULL(sf.Name,'UNTAG') END ) AS FFName,
	( CASE  WHEN st.Code = 'SHP' THEN 'SHOP' WHEN c.IsTemporary = 1 THEN 'NEW' ELSE ISNULL(sf.Name,'UNTAG') END ) AS FFSeq	
	,SO.LocationId
	FROM 
	(
		SELECT up.ProductId, 
		up.Name,
		isnull(up.ProductSequence,99999) AS ProductSequence,
		ISNULL(pt.ShortName,'UNTAGGED PRODUCT') AS [Principal Team],
		up.PrincipalBusinessLineId,pt.PrincipalTeamId
		FROM uv_Product up
		LEFT OUTER JOIN PrincipalTeamProduct ptp ON ptp.ProductId = up.ProductId AND ptp.ProductSequence = up.ProductSequence
		AND ptp.ToBeDeleted = 0
		LEFT OUTER JOIN PrincipalTeam pt ON pt.PrincipalTeamId = ptp.PrincipalTeamId			
	   -- AND DATEDIFF(day, pt.EffectiveDate,ISNULL(@FromDate,GETDATE()))>= 0
	    --AND  DATEDIFF(day,ISNULL(@ToDate,GETDATE()), isnull( pt.EndDate,@ToDate+1))> 0	  
	     AND DATEDIFF(day, pt.EffectiveDate,GETDATE())>= 0
		 AND  DATEDIFF(day,GETDATE(), isnull( pt.EndDate,GETDATE()+1))> 0
		WHERE pt.PrincipalTeamId IS NULL	  
	) AS [Product] 
	INNER JOIN SaleOrderProduct sop ON Product.ProductId=sop.ProductId /*AND sop.EndDate IS NULL*/
	INNER JOIN SaleOrder so ON (so.SaleOrderId = sop.SaleOrderId AND so.LocationId = sop.LocationId)
	INNER JOIN SaleType st ON st.SaleTypeId=so.SaleTypeId
	INNER JOIN Customer c ON   ( c.CustomerId = so.CustomerId AND   c.LocationId = so.LocationId )
	INNER JOIN   DBO.Split(@Locations, ',' ) Loc ON   ( Loc.Data =so.LocationId OR @Locations = '' )
	LEFT OUTER  JOIN   SalesForceCustomer sfc ON   ( sfc.LocationId = so.LocationId AND   sfc.Customerid = so.CustomerId 
	AND sfc.ToBeDeleted=0 AND sfc.SalesForceCustomerId IS  null)
	LEFT OUTER JOIN   SalesForce sf ON   ( sf.LocationId = sfc.LocationId AND   sf.SalesForceId = sfc.SalesForceId )
	--INNER JOIN   DBO.Split(@SalesForce, ',' ) ff ON   ( ff.Data = sfc.SalesForceId OR @SalesForce = '' )
   INNER JOIN uv_PrincipalBusinessLine_All upbla ON upbla.PrincipalBusinessLineId =  [Product].PrincipalBusinessLineId
   INNER JOIN   DBO.Split(@PBLIds, ',' ) PBL ON   ( PBL.Data = [Product].PrincipalBusinessLineId OR @PBLIds = '' )
    	
    WHERE    
    (DATEDIFF(DAY,so.SalePassDate,  @FromDate) <= 0 
	AND  DATEDIFF(DAY,so.SalePassDate,  @ToDate) >= 0)			      
    AND
		(
			(@IsTemporary=0 OR (@IsTemporary=1 AND c.IsTemporary=1))
		 OR (@IsShopSale=0 OR (@IsShopSale=1 AND st.Code='SHP'))
		 OR (@IsUnTagg=0 OR (@IsUnTagg=1 AND sfc.SalesForceCustomerId IS NULL))		 		
		)
		
	GROUP BY
		upbla.PBLSequenceId,
		upbla.Name,
		SO.DeliveryChallanId,
		[Product].[Principal Team], 
		[Product].ProductId,
		[Product].Name ,
		[Product].ProductSequence,
		st.Code,
		c.IsTemporary,
		sf.Name,
		sf.SalesForceId,
		SO.LocationId
		
	HAVING 
		sum(sop.SoldQuantity)>0 

)AS P
INNER JOIN Location l ON l.LocationId=P.LocationId
	


SELECT 
DISTINCT
IDENTITY(INT, 1,1) Id,
PrincipalTeamId,
[Principal Team]
INTO #tblLoop
FROM #Temp t

DECLARE @Count INT, @QUERY VARCHAR(max), @PrincipalTeam VARCHAR(50), 
@colFF VARCHAR(MAX),@colFFNonZeroQty VARCHAR(MAX),@colFFZeroQty VARCHAR(MAX)
,@PvtSummary VARCHAR(MAX)
,@PvtSummaryThousand VARCHAR(MAX)
,@colTQty varchar(max),@colSUMTQty varchar(max)

SET @Count = 1
WHILE @Count <= (SELECT COUNT(*) FROM #tblLoop)
	BEGIN
		
		SET @PrincipalTeam = (SELECT [Principal Team] FROM #tblLoop WHERE Id = @Count)	   			
		SET @colFF =
		ISNULL(( 
			SELECT DISTINCT '['+FFName + '], '
			FROM #tblLoop L 
			INNER JOIN #TEMP T ON l.PrincipalTeamId = t.PrincipalTeamId
			WHERE Id = @Count
			AND FFName NOT IN ('SHOP', 'NEW', 'UNTAG')
			FOR XML PATH('' ) 
		),'')
		SET @colFF = @colFF + ' [SHOP], [NEW], [UNTAG]'		
	
		SET @colFFNonZeroQty = 
		ISNULL(( 
			SELECT DISTINCT '['+FFName + '], 0 [' + FFName + ' Value], ' 
			FROM #tblLoop L 
			INNER JOIN #TEMP T ON l.PrincipalTeamId = t.PrincipalTeamId
			WHERE Id = @Count
			AND FFName NOT IN ('SHOP', 'NEW', 'UNTAG')
			FOR XML PATH('' ) 
		),'')                            
		SET @colFFNonZeroQty =@colFFNonZeroQty + ' [SHOP], 0 [SHOP Value], [NEW], 0 [NEW Value], [UNTAG], 0 [UNTAG Value]'
				
		SET @colFFZeroQty = 
		ISNULL(( 
			SELECT DISTINCT '0 ['+FFName + '], ['+FFName + '] [' + FFName + ' Value], ' 
			FROM #tblLoop L 
			INNER JOIN #TEMP T ON l.PrincipalTeamId = t.PrincipalTeamId
			WHERE Id = @Count
			AND FFName NOT IN ('SHOP', 'NEW', 'UNTAG')
			FOR XML PATH('' ) 
		),'')                            
		SET @colFFZeroQty = @colFFZeroQty + ' 0 [SHOP], [SHOP] [SHOP Value], 0 [NEW], [NEW] [NEW Value], 0 [UNTAG], [UNTAG] [UNTAG Value]'
		
		SET @PvtSummary = 
		ISNULL(( 
			SELECT DISTINCT 'SUM(['+FFName + ']) AS ['+FFName + '],' 
			FROM #tblLoop L 
			INNER JOIN #TEMP T ON l.PrincipalTeamId = t.PrincipalTeamId
			WHERE Id = @Count
			AND FFName NOT IN ('SHOP', 'NEW', 'UNTAG')
			FOR XML PATH('' ) 
		),'')              
		SET @PvtSummary = @PvtSummary+ ' ISNULL(SUM([SHOP]),0) [SHOP], ISNULL(SUM([NEW]),0) [NEW], ISNULL(SUM([UNTAG]),0) [UNTAG]'
	
		SET @PvtSummaryThousand = 
		ISNULL(( 
			SELECT DISTINCT 'SUM(['+FFName + '])/1000 AS ['+FFName + '],' 
			FROM #tblLoop L 
			INNER JOIN #TEMP T ON l.PrincipalTeamId = t.PrincipalTeamId
			WHERE Id = @Count
			AND FFName NOT IN ('SHOP', 'NEW', 'UNTAG')
			FOR XML PATH('' ) 
		),'')              
			
		SET @PvtSummaryThousand =@PvtSummaryThousand + ' SUM([SHOP])/1000 [SHOP], SUM([NEW])/1000 [NEW], SUM([UNTAG])/1000 [UNTAG]'		
		
		SET @colSUMTQty = 'SUM(' +
		ISNULL(( 
			SELECT DISTINCT + 'ISNULL(['+ FFName + '],0)+ ' 
			FROM #tblLoop L 
			INNER JOIN #TEMP T ON l.PrincipalTeamId = t.PrincipalTeamId
			WHERE Id = @Count
			AND FFName NOT IN ('SHOP', 'NEW', 'UNTAG')
			FOR XML PATH('' ) 
		),'')                            
		SET @colSUMTQty = @colSUMTQty+ ' ISNULL([SHOP],0)+ ISNULL([NEW],0)+ ISNULL([UNTAG],0)' + ')'
	
		SET @colTQty =
		ISNULL(( 
			SELECT DISTINCT + 'ISNULL(['+ FFName + '],0)+ ' 
			FROM #tblLoop L 
			INNER JOIN #TEMP T ON l.PrincipalTeamId = t.PrincipalTeamId
			WHERE Id = @Count
			AND FFName NOT IN ('SHOP', 'NEW', 'UNTAG')
			FOR XML PATH('' ) 
		),'')                            
		SET @colTQty = @colTQty+ ' ISNULL([SHOP],0)+ ISNULL([NEW],0)+ ISNULL([UNTAG],0)'
		
					
		SET @QUERY = 
		(
		'		
		 SELECT * 
		 FROM
		 (			
		 SELECT A.[Location Name],A.DeliveryChallanId, A.ProductSequence ,A.PrincipalTeamId,A.[Principal Team], A.[Code],A.[Product Name],'+@PvtSummary+', SUM(A.[T.QTY]) [T.QTY], SUM(A.[T.VALUE]) [T.VALUE]
		 FROM
		 (
			SELECT [Location Name],st.DeliveryChallanId,PrincipalTeamId,''Team: '+ @PrincipalTeam +''' AS [Principal Team], ProductSequence , ProductId [Code], [Product Name], '+@colFFNonZeroQty+', '+@colTQty+' AS [T.QTY],0 AS [T.VALUE]
			FROM
			(
				SELECT t.[Location Name],t.DeliveryChallanId,t.PrincipalTeamId,
					   t.[Principal Business Line], CONVERT(char(11),t.ProductId) as [ProductId],t.[Product Name],  
					   T.FFName, ISNULL(SoldQuantity,0) as [SoldQuantity] ,
					   T.ProductSequence
				FROM #tblLoop L 
				INNER JOIN #TEMP T ON l.PrincipalTeamId = t.PrincipalTeamId
				WHERE Id = ' + CONVERT(VARCHAR(10), @Count) + '
			)ST
			PIVOT
			(SUM(SOLDQUANTITY) FOR FFName IN ('+@colFF+')) AS PVT
			
			UNION ALL
			
			SELECT [Location Name],st.DeliveryChallanId,,PrincipalTeamId,''Team: '+ @PrincipalTeam +''' AS [Principal Team], ProductSequence , ProductId [Code], [Product Name], '+@colFFZeroQty+', 0 AS [T.QTY], '+@colTQty+' AS [T.VALUE]
			FROM
			(
				SELECT t.[Location Name],t.PrincipalTeamId,
					   t.[Principal Business Line],t.DeliveryChallanId, CONVERT(char(11),t.ProductId) as [ProductId],t.[Product Name],  
					   T.FFName, ISNULL(Value,0) as [Value], 
					   T.ProductSequence
				FROM #tblLoop L 
				INNER JOIN #TEMP T ON l.PrincipalTeamId = t.PrincipalTeamId
				WHERE Id = ' + CONVERT(VARCHAR(10), @Count) + '
			)ST
			PIVOT
			(SUM(Value) FOR FFName IN ('+@colFF+')) AS PVT		
		 ) AS [A]
		 GROUP BY
		 A.[Location Name],A.PrincipalTeamId,A.[Principal Team], A.[Code],A.[Product Name] , A.ProductSequence
		 		 
		 )SA
		 
		 UNION ALL
	
		SELECT [Location Name],st.DeliveryChallanId 99999 ProductSequence ,99999 AS PrincipalTeamId,'''' AS [Principal Team],'''' as  [Code],''Team: '+ @PrincipalTeam +' VALUES(''''000)'' AS [Product Name], '+@PvtSummaryThousand+', 0 AS [T.QTY], '+@colSUMTQty+' AS [T.VALUE]
		FROM
		(
			SELECT t.[Location Name], t.PrincipalTeamId,
				   t.[Principal Business Line],t.DeliveryChallanId, CONVERT(char(11),t.ProductId) as [ProductId],t.[Product Name],  
				   T.FFName, ISNULL(Value,0) as [Value] ,
				   T.ProductSequence
			FROM #tblLoop L 
			INNER JOIN #TEMP T ON l.PrincipalTeamId = t.PrincipalTeamId
			WHERE Id = ' + CONVERT(VARCHAR(10), @Count) + '
			
		)ST
		
		PIVOT
		(SUM(Value) FOR FFName IN ('+@colFF+')) AS PVT
		GROUP BY [Location Name]
		Order by  ProductSequence
		 '
		)
				
		BEGIN TRY
			EXEC (@QUERY)			
		END TRY		
		BEGIN CATCH
			PRINT ('eRROR')
			PRINT (@QUERY)
		END CATCH
			
		
		SET @Count = @Count + 1	
	  	
	END				
	
--DROP TABLE #tblLoop					
--DROP TABLE #Temp
SELECT a.DeliveryChallanId,sum(a.SoldQuantity) AS [R59 Quantity]--SUM(a.SoldQuantity) 
FROM #TEMP a WHERE a.ProductId = 14 AND PrincipalTeamId <> 99999
GROUP BY a.DeliveryChallanId
--AND a.DeliveryChallanId IN  

SELECT so.DeliveryChallanId,SUM(sop.SoldQuantity) AS [DC Quantity]
FROM dbo.SaleOrder so INNER JOIN dbo.SaleOrderProduct sop ON so.LocationId = sop.LocationId AND so.SaleOrderId = sop.SaleOrderId
--GROUP BY so.DeliveryChallanId
WHERE (DATEDIFF(DAY,so.SalePassDate,  '2013/11/23') <= 0 AND  DATEDIFF(DAY,so.SalePassDate,  '2013/11/26') >= 0) AND sop.ProductId = 14 AND sop.SoldQuantity>0
GROUP BY so.DeliveryChallanId GODECLARE @PBLIds varchar(1000), @LocationIds varchar(1000), @RecLocationIds varchar(1000),
		@SelectAll int,@FromDate datetime,@ToDate datetime, 
		@TRSelectAll int,@TRFromDate datetime,@TRToDate datetime,
		@SelectAllDoc int,@DocRange  varchar(50),@FromDoc int,@ToDoc int, 
		@TOStatus  varchar(5),
		@Status  varchar(5),
		@IsCombineCorrection bit 

SET @PBLIds = '4'
SET @LocationIds = '11,14,29,17,19,21,28,23,12,38,26,42,15,35,18,37,43,30,36,22,24,44,13,32,27,16'
SET @RecLocationIds = '11,14,29,17,19,21,28,23,12,38,26,42,15,35,18,37,43,30,36,22,24,44,13,32,27,16'
SET @SelectAll=0
SET @FromDate = '2013-11-01 '
SET @ToDate = '2013-11-30 '
SET @TRSelectAll=0
SET @TRFromDate = '2013-11-01'
SET @TRToDate = '2013-12-31'
SET @SelectAllDoc=2
SET @DocRange='162'
SET @FromDoc = '162'
SET @ToDoc = '247' 
SET @TOStatus = 'AP'
SET @Status = ''
SET @IsCombineCorrection = 1

SELECT * FROM TransferOut to1
INNER JOIN   (
           SELECT to1.LocationId,
                  to1.TransferOutId,
                  to1.ReferenceTransferOutId
           FROM   TransferOut to1
           INNER JOIN   DBO.Split(@LocationIds, ',' ) LOC
             ON   (
                      LOC.Data = to1.LocationId OR @LocationIds = ''
                  )
           INNER JOIN   DBO.Split(@RecLocationIds, ',' ) RecLOC
             ON   (
                      RecLOC.Data = to1.ToLocationId OR @RecLocationIds = ''
                  )
           INNER JOIN   DBO.Split(@PBLIds, ',' ) PBL
             ON   (
                      PBL.Data = to1.PrincipalBusinessLineId 
                      OR @PBLIds = ''
                  )
           WHERE 
               (
                      @TOStatus = '' 
					OR (@TOStatus='AP' AND to1.IsRollbacked=0)
					OR (@TOStatus='P' AND to1.IsApproved=0 AND to1.IsRollbacked=0)
					OR (@TOStatus='A' AND to1.IsApproved=1 AND to1.IsRollbacked=0)
					OR (@TOStatus='R' AND to1.IsApproved=0 AND to1.IsRollbacked=1)
                )
            AND (
                      @Status = ''
                  OR  (
                          @Status = 'R'
                     AND  To1.TransferOutId IS NOT 
                     NULL
                      )
                  OR  (
                          @Status = 'I'
                     AND  To1.TransferOutId IS  NULL
                      )
                  OR  (
                          @Status = 'P'
                     AND  to1.TREntryDate IS NULL
                      )
               ) 
           	AND (
					   @SelectAll = 0
				   OR  (
						   @SelectAll = 1 AND  ( DATEDIFF(DAY, to1.TransactionDate,  @FromDate) = 0 /* only FOR one day*/)
					   )
				   OR  (
						   @SelectAll = 2 AND   
							(
								DATEDIFF(DAY, to1.TransactionDate,  @FromDate) <= 0
								AND 
								(
									(@IsCombineCorrection = 1 AND to1.ReferenceTransferOutId IS NOT NULL) 
									OR   datediff (day,to1.TransactionDate, @ToDate) >= 0
								)
							)  				
					   )   
				)    
			AND (
					   @TRSelectAll = 0
				   OR  (
						   @TRSelectAll = 1
					  AND  ( DATEDIFF(DAY,to1.TREntryDate,  @TRFromDate) = 0 /* only FOR one day*/)
					   )
				   OR  (
						   @TRSelectAll = 2
						   AND  (DATEDIFF(DAY,to1.TREntryDate,  @TRFromDate) <= 0AND  DATEDIFF(DAY,to1.TREntryDate,  @TRToDate) >= 0)										
					   )   
				)      			
			AND (
					   @SelectAllDoc = 0 
				   OR (
						@SelectAllDoc = 1 AND  to1.TransferOutId IN (SELECT S.DATA FROM   DBO.Split(@DocRange, ',') S)
					  )
					OR(
					  @SelectAllDoc = 2 AND ( (@FromDoc = '0'OR to1.TransferOutId>= @FromDoc) AND  (@ToDoc = '0' OR to1.TransferOutId <= @ToDoc))
					  )
				)            
       ) AS RefTI
  ON   (
           (
               to1.TransferOutId = RefTI.TransferOutId OR( @IsCombineCorrection = 1 
               AND   to1.ReferenceTransferOutId = RefTI.TransferOutId )
           )AND   to1.LocationId = RefTI.LocationId
  )
WHERE (ISNULL(RefTI.ReferencetransferOutId, 0) = CASE WHEN (@IsCombineCorrection  = 1) THEN  0 ELSE 1 END) 
   OR  
   (ISNULL(RefTI.ReferencetransferOutId, 1) > CASE WHEN (@IsCombineCorrection  = 0) THEN  0 ELSE (refti.transferoutid) END)
  -- AND RefTI.ReferenceTransferOutId IS  NULLIF(@IsCombineCorrection = 1)
  --AND ASE WHEN (@IsCombineCorrection  = 1) THEN refti.referencetransferoutid IS null ELSE refti.referencetransferoutid END  GO--CREATE   PROCEDURE dbo.usp_UDLSalesForce_ByStatus @IsBooker bit,@IsSupplier bit,@Status varchar(100) AS  

DECLARE @IsBooker bit,@IsSupplier bit,@LocationId  varchar(100) ,@Status varchar(100)  
SET @IsBooker=1  
SET @IsSupplier=1
SET @LocationId='14'  
SET @Status=''  
  
SELECT DISTINCT uf.UDLSalesForceId, uf.Name  
FROM   UDLSalesForceCategoryTagging ufct  
INNER JOIN UDLSalesForce uf ON uf.UDLSalesForceId = ufct.UDLSalesForceId  
INNER JOIN UDLSalesForceCategory ufc ON ufc.UDLSalesForceCategoryId = ufct.UDLSalesForceCategoryId  
INNER JOIN  DBO.Split(@LocationId, ',') Loc ON  (Loc.Data = uf.LocationId OR @LocationId = '')
WHERE (((@IsBooker=1 AND ufc.IsBooker = @IsBooker )OR (@IsSupplier=1 AND  ufc.IsSupplier=@IsSupplier)) OR ufct.UDLSalesForceCategoryId IN (8,9))
AND   @Status = ''  
   OR  (  
           @Status = '0'  
      AND  DATEDIFF(day,uf.EffectiveDate,GETDATE())>= 0  
      AND  DATEDIFF(day,GETDATE(),ISNULL(uf.EndDate, GETDATE()+1))>0  
      AND  DATEDIFF(day,ufct.EffectiveDate,GETDATE())>= 0  
      AND  DATEDIFF(day,GETDATE(),ISNULL(ufct.EndDate,GETDATE()+1))>0  
       )  
   OR  (  
           @Status = '1'  
      AND  DATEDIFF(day,uf.EndDate,ISNULL(GETDATE(), GETDATE()+1))>0          
  AND  DATEDIFF(day,GETDATE(),ISNULL(ufct.EndDate,GETDATE()+1))>0  
   )  
     
ORDER BY uf.Name
 GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'usp_Insert_BankAccountSequence')AND type in (N'P', N'PC'))
DROP PROCEDURE usp_Insert_BankAccountSequence
GO

 CREATE PROCEDURE usp_Insert_BankAccountSequence
@out_error_number INT = 0 OUTPUT,
@LocationId int,
@BankAccountId int,
@SequenceId int,
@IsDefault bit,
@InsertDate datetime,
@UserId int
AS

SET @SequenceId  = (SELECT MAX(SequenceId)+ 1 FROM BankAccountSequence WHERE LocationId = @LocationId )
BEGIN
BEGIN TRY
	Insert into BankAccountSequence (LocationId,BankAccountId,SequenceId,IsDefault,InsertDate,InsertedBy)
	values(@LocationId,@BankAccountId,@SequenceId,@IsDefault,@InsertDate,@UserId)
END TRY
BEGIN CATCH
	SELECT @out_error_number=ERROR_NUMBER()
END CATCH
END
GO
 GO--CREATE PROC [dbo].[usp_Report_CustomerPeriodicalSale] 
--	@LocationIds varchar(200), 
--	@CompanyIds varchar(20),  
--	@PBLIds varchar(100),   
--	@SaleTypeIds varchar(100),   
--	@MainAreaIds varchar(MAX),  
--	@SubAreaIds varchar(MAX),  
--	@CustomerIds varchar(MAX),  
--	@ProductIds varchar(MAX), 
--	@FromDate datetime, 
--	@ToDate datetime,   	   
--	@IsCash bit,
--	@IsCredit bit,
--	@CustStatus int
--AS 

DECLARE 
	@LocationIds varchar(1000), 
	@CompanyIds varchar(1000),  
	@PBLIds varchar(1000),   
	@SaleTypeIds varchar(1000),   
	@MainAreaIds varchar(1000),  
	@SubAreaIds varchar(1000),  
	@CustomerIds varchar(1000),  
	@ProductIds varchar(1000),   
	@FromDate datetime, 
	@ToDate datetime,   		      
    @IsCash bit,
	@IsCredit bit,
	@CustStatus INT,
	@Period INT
SET @LocationIds = ''--'11,14'--'11,18,23,28,30,35,37,42,44'  
SET @CompanyIds= '1'
SET @PBLIds = ''--3,4,'--'7,3,5,28,40,4,33,37,38,20,35,41,43,44,45,47,48,49,50,55,57,58,59,60,61,62'
SET @SaleTypeIds = ''--'1,2,3,4,5'
SET @MainAreaIds = ''--'24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43'
SET @SubAreaIds = ''--'149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238'
SET @ProductIds = '' --'2545'
SET @CustomerIds= ''--'2780,2781'
SET @FromDate = '2014-04-01'  
SET @ToDate = GETDATE() 
SET @IsCash= 1
SET @IsCredit= 1
SET @CustStatus = 0
SET @Period  = 0
SELECT 
	L.SequenceId AS [LocationSequence],	
	l.ShortName AS [LOCATION NAME], 	
	A.[SALE DATE],
	Case When @Period = 0 then LEFT(RIGHT(convert(varchar(20),[SALE DATE],06),6),3)+'-'+RIGHT(convert(varchar(20),[SALE DATE],06),2)
	ELSE LEFT(CONVERT(VARCHAR(7), [SALE DATE], 111),4) END 
	AS [PERIOD],            
	A.CustomerId AS [CODE],
	csa.[Customer Name] AS [CUSTOMER NAME],
	csa.[Main Area] AS [MAIN AREA],
	csa.[Sub Area] AS [SUB AREA],
	a.[SALE NATURE] AS [SALE NATURE],	
	up.PBLShortName AS [PBL],
	A.ProductId  AS [PROD ID], 	
	UP.Name  AS [PRODUCT NAME], 		
	sum(a.[TP Value]) [TP VALUE]
	INTO #temp
FROM 
(
	SELECT 
		so.LocationId, 
		SO.SalePassDate AS [SALE DATE],	
		SO.CustomerId,
		sop.PrincipalBusinessLineId, 
		sop.ProductId,  
		CASE WHEN SO.IsCash=1 THEN 'CASH' ELSE 'CREDIT' END AS [SALE NATURE], 			
		ISNULL(sop.SoldQuantity * sop.TP,0)  [TP Value]
	FROM SaleOrder SO INNER JOIN SaleOrderProduct sop ON   sop.LocationId = SO.LocationId 
		 AND   sop.SaleOrderId = SO.SaleOrderId 				
		INNER JOIN   DBO.Split(@CompanyIds, ',' ) Company ON ( Company.Data = SO.CompanyId OR @CompanyIds = '' )	
		INNER JOIN   DBO.Split(@LocationIds, ',' ) Loc ON  ( Loc.Data = SO.LocationId OR @LocationIds = '' )
		INNER JOIN   DBO.Split(@CustomerIds, ',' ) Customer ON ( Customer.Data = SO.CustomerId OR @CustomerIds = '' )						
		INNER JOIN   DBO.Split(@PBLIds, ',' ) PBL ON (PBL.Data = sop.PrincipalBusinessLineId OR @PBLIds = '' )
		INNER JOIN   DBO.Split(@ProductIds, ',' ) Product ON ( Product.Data = sop.ProductId OR @ProductIds = '' )			 
		INNER JOIN   DBO.Split(@SaleTypeIds, ',' ) SaleTypes ON ( SaleTypes.Data = so.SaleTypeId OR @SaleTypeIds = '' )			 
	
	WHERE  SO.IsRollbacked = 0
		AND sop.EndDate IS NULL 
		AND ( DATEDIFF(DAY,SO.SalePassDate,@FromDate) <= 0 AND  DATEDIFF(DAY,SO.SalePassDate,@ToDate) >= 0)                                              	
		AND((@IsCash=1 AND SO.IsCash=1)  OR (@IsCredit=1 AND SO.IsCash=0)) 
			
	UNION ALL
	
	SELECT 
		S.LocationId, 
		S.TransactionDate AS [SALE DATE],	
		s.CustomerId,
		s.PrincipalBusinessLineId, 
		s2.ProductId, 
		CASE WHEN s.IsCash=1 THEN 'CASH' ELSE 'CREDIT' END  AS [SALE NATURE],		
		-1*s2.Quantity * pc.TP  [TP Value]
	FROM SLN s
		INNER JOIN SLNProduct s2 ON s2.LocationId = s.LocationId AND s2.SLNId = s.SLNId   
		INNER JOIN PriceCatalog pc ON  pc.PriceCatalogId=s2.PriceId
		INNER JOIN   DBO.Split(@CompanyIds, ',' ) Company ON ( Company.Data = s.CompanyId OR @CompanyIds = '' )	
		INNER JOIN   DBO.Split(@LocationIds, ',' ) Loc ON  ( Loc.Data = s.LocationId OR @LocationIds = '' )
		INNER JOIN   DBO.Split(@CustomerIds, ',' ) Customer ON ( Customer.Data = s.CustomerId OR @CustomerIds = '' )						
		INNER JOIN   DBO.Split(@PBLIds, ',' ) PBL ON (PBL.Data = s.PrincipalBusinessLineId OR @PBLIds = '' )			 
		INNER JOIN   DBO.Split(@ProductIds, ',' ) Product ON ( Product.Data = s2.ProductId OR @ProductIds = '' )			
		
	WHERE s2.Quantity > 0 
		AND (DATEDIFF(DAY,s.TransactionDate,  @FromDate) <= 0 AND DATEDIFF(DAY,s.TransactionDate,  @ToDate) >= 0)
		AND((@IsCash=1 AND s.IsCash=1)  OR (@IsCredit=1 AND s.IsCash=0)) 
		AND s2.IsFree=0
		AND S.IsRollbacked = 0	
) A 
INNER JOIN  uv_Product up ON  up.ProductId = A.ProductId
INNER JOIN  Location l ON  l.LocationId = A.LocationId
INNER JOIN  uv_CustomerSalesArea csa ON csa.LocationId=A.LocationId AND csa.CustomerId=A.CustomerId
INNER JOIN   DBO.Split(@MainAreaIds, ',' ) MainArea ON ( MainArea.Data = csa.MainAreaId OR @MainAreaIds = '' )
INNER JOIN   DBO.Split(@SubAreaIds, ',' ) SubArea ON ( SubArea.Data = csa.SubAreaId OR @SubAreaIds = '' )

WHERE
		( @CustStatus = 0 OR ( @CustStatus = 1 AND ( DATEDIFF(day, csa.[Cus Effective Date],GETDATE())>= 0 AND DATEDIFF(day,GETDATE(), isnull( csa.[Cus End Date],GETDATE()+1))> 0))
	OR ( @CustStatus = 2 AND  DATEDIFF(day,csa.[Cus End Date],ISNULL(GETDATE(), GETDATE()+1))>0 ))
 	
GROUP BY L.SequenceId ,	
	l.ShortName , 	
	A.[SALE DATE],            
	A.CustomerId,
	csa.[Customer Name] ,
	csa.[Main Area] ,
	csa.[Sub Area] ,
	a.[SALE NATURE],
	up.PBLShortName,
	A.ProductId,   	
	UP.Name    
	
DECLARE @pvtPERIOD NVARCHAR(MAX)
SET @pvtPERIOD = (SELECT DISTINCT '[' +PERIOD+  '], '
					FROM #TEMP 
                    FOR XML PATH(''), root('MyString'), type).value('/MyString[1]','varchar(max)')               
SET @pvtPERIOD= LEFT( @pvtPERIOD,LEN(@pvtPERIOD)-1 )  
--SELECT @pvtPERIOD
DECLARE @Query NVARCHAR(MAX)
SET @Query = '
SELECT [LocationSequence],[LOCATION NAME],[CODE],[CUSTOMER NAME],[MAIN AREA],[SUB AREA],[SALE NATURE],[PBL],[PROD ID],[PRODUCT NAME],'+@pvtPERIOD+'
FROM
(	SELECT	[LocationSequence],[LOCATION NAME],[CODE],[CUSTOMER NAME],[MAIN AREA],[SUB AREA],[SALE NATURE],[PBL],[PROD ID],[PRODUCT NAME],Isnull([TP VALUE],0) as [TP VALUE],PERIOD
	FROM #TEMP 
 	Where [LocationSequence]= 52
)a
PIVOT(SUM([TP VALUE])  FOR a.PERIOD IN ('+@pvtPERIOD+')) as PVT '
 
--SELECT Distinct PERIOD,CONVERT(Date,'01-'+Period,112) AS sodate
--INTO #tblLoop 
--FROM #TEMP
--ORDER BY 
--CONVERT(Date,'01-'+Period,112)

DECLARE @PeriodCount INT
SET @PeriodCount =  1

--WHILE @PeriodCount <= (SELECT COUNT(*) FROM #tblLoop) 
BEGIN
  EXEC(@Query)
  PRINT(@Query)
--SET @PeriodCount = @PeriodCount + 1
END



 GOCREATE PROC [dbo].[usp_Report_CustomerPeriodicalSale] 
	@CompanyIds varchar(20), 
	@LocationIds varchar(200), 
	@PBLIds varchar(100),
	@ProductIds varchar(MAX), 
	@MainAreaIds varchar(MAX),  
	@SubAreaIds varchar(MAX),  
	@CustomerIds varchar(MAX),
	@SaleTypeIds varchar(100),   
	@SaleCriteria int, 
	@FromDate datetime, 
	@ToDate datetime,   	   
	@IsCash bit,
	@IsCredit bit,
	@CustStatus int
AS 
--DECLARE @PBLIds varchar(100),
--@ProductIds nvarchar(MAX),
--        @LocationIds varchar(100),@MainAreaIds NVARCHAR(MAX), @SubAreaIds NVARCHAR(MAX),
--        @CustomerIds varchar(100),
--        @SaleCriteria int,
--        @SaleTypeIds varchar(100),
--        @IsCash bit,
--        @IsCredit bit,
--        @FromDate datetime,
--        @ToDate datetime,@CustStatus int  
--SET @PBLIds =''
--SET @LocationIds = ''
--SET @CustomerIds =''
--SET @MainAreaIds  = '' 
--set @SubAreaIds=''
--SET @SaleCriteria =1
--SET @SaleTypeIds = ''--'1,2,3,4,5'
--SET @IsCash = 1
--SET @IsCredit =1
--SET @FromDate = '2014-04-01 00:00:00'
--SET @ToDate = '2014-06-17 00:00:00'
--SET @CustStatus =0
--SET @ProductIds = ''
/*
Sale Criteria 
0-Gross Sale --Only Value
1-Net Sale -- Value-SLN
2-SLN--Only SLN
*/

SELECT 
    [tbl].LocationId,  
	l.ShortName AS [Location Name], 
	l.SequenceId AS [Loc Seq],
	[tbl].IsCash, 
	[tbl].CustomerId,
	c.[Customer Name],
	c.[Main Area],
	c.[Sub Area],
	[tbl].[Date],
	sum([Amount]) AS [Amount]
	INTO #TEMP
FROM 
(
	SELECT 
	SO.LocationId AS LocationId,  
	so.IsCash,
	so.CustomerId,
	so.PrincipalBusinessLineId, 
	so.ProductId,
	RIGHT(CONVERT(char(11),so.SalePassDate,13),8) AS [Date],
	so.SalePassDate AS TransactionDate,
	so.TP* so.SoldQuantity AS [Amount]
	FROM uv_Sales_SaleOrder so
		INNER JOIN   DBO.Split(@LocationIds, ',' ) Loc ON   ( Loc.Data = so.LocationId OR @LocationIds = '' )
		INNER JOIN   DBO.Split(@PBLIds, ',' ) PBL ON   ( PBL.Data = so.PrincipalBusinessLineId OR @PBLIds = '' )
		INNER JOIN 	 DBO.Split(@ProductIds, ',' ) Product ON   ( Product.Data = so.ProductId OR @ProductIds= '' )
		INNER JOIN   DBO.Split(@CustomerIds, ',' ) Cus ON   ( Cus.Data = so.CustomerId OR @CustomerIds = '' )
		INNER JOIN   DBO.Split(@SaleTypeIds, ',' ) SaleType ON   ( SaleType.Data = so.SaleTypeId OR @SaleTypeIds = '' )
	WHERE  
		DATEDIFF(DAY, so.SalePassDate,  @FromDate ) <= 0 
		AND  DATEDIFF(DAY,  so.SalePassDate,  @ToDate ) >= 0 	
		AND so.IsRollbacked = 0
		AND ((@IsCash=1 AND so.IsCash=1)  OR (@IsCredit=1 AND so.IsCash=0))
		AND @SaleCriteria <> 2 /*--to show Only SLN--*/
		
		
	/*------ SLN PRODUCT ------*/
	UNION ALL 

	SELECT 
		S.LocationId AS LocationId, 
		S.IsCash,
		s.CustomerId,
		S.PrincipalBusinessLineId,
		s.ProductId, 
		RIGHT(CONVERT(char(11),s.TransactionDate,13),8) AS [Date],
		s.TransactionDate, 
		CASE WHEN s.IsFree=0 THEN (PC.TP * CASE WHEN @SaleCriteria=1 THEN  -1 * s.Quantity ELSE s.Quantity END)	ELSE 0 END  AS [Amount]
	FROM uv_Sales_SLN s
		INNER JOIN   PriceCatalog pc ON   pc.PriceCatalogId = s.PriceId
		INNER JOIN   DBO.Split(@LocationIds, ',' ) Loc ON   ( Loc.Data = S.LocationId OR @LocationIds = '' )
		INNER JOIN   DBO.Split(@PBLIds, ',' ) PBL ON   ( PBL.Data = S.PrincipalBusinessLineId OR @PBLIds = '' )
		INNER JOIN 	 DBO.Split(@ProductIds, ',' ) Product ON   ( Product.Data = S.ProductId OR @ProductIds= '' )
		INNER JOIN   DBO.Split(@CustomerIds, ',' ) Cus ON   ( Cus.Data = S.CustomerId OR @CustomerIds = '' )
		
	WHERE  
		DATEDIFF(DAY, S.TransactionDate,  @FromDate ) <= 0 
		AND  DATEDIFF(DAY, S.TransactionDate,  @ToDate ) >= 0
		AND s.IsFree = 0
		AND  s.IsRollbacked = 0
		AND @SaleCriteria <> 0
		
			
)AS [tbl]
INNER JOIN Location l ON   l.LocationId = [tbl].LocationId
INNER JOIN uv_CustomerSalesArea c ON c.LocationId=[tbl].LocationId AND c.CustomerId=[tbl].CustomerId
INNER JOIN   DBO.Split(@MainAreaIds, ',' ) MainArea ON ( MainArea.Data = c.MainAreaId OR @MainAreaIds = '' )
INNER JOIN   DBO.Split(@SubAreaIds, ',' ) SubArea ON ( SubArea.Data = c.SubAreaId OR @SubAreaIds = '' )
WHERE 
 
		(
			   @CustStatus = 0
		   OR  (
				   @CustStatus = 1
			  AND  (
					   DATEDIFF(day, c.[Cus Effective Date],GETDATE())>= 0
					AND  DATEDIFF(day,GETDATE(), isnull( c.[CSA EndDate],GETDATE()+1))> 0
				   )
			   )
		   OR  (
				   @CustStatus = 2
				   AND  DATEDIFF(day,c.[CSA EndDate],ISNULL(GETDATE(), GETDATE()+1))>0               
			   )
		)	

GROUP BY	
    [tbl].LocationId,  
	l.ShortName , 
	l.SequenceId ,
	[tbl].IsCash, 
	[tbl].CustomerId,
	c.[Customer Name],
	c.[Main Area],
	c.[Sub Area],
	[tbl].[Date]

DECLARE @QUERY VARCHAR(8000),@pvtSumIsNullAmount VARCHAR(MAX),@pvtNonZeroAmountDate VARCHAR(MAX)
		
		SET @pvtNonZeroAmountDate = 
		( 
			SELECT  '[' + A.[Date] + '] , '
			FROM
			(
				SELECT DISTINCT t.[Date]
				FROM 
				#TEMP T
			) A
			ORDER BY Year(A.[Date]), Month(A.[Date])
			FOR XML PATH('' ) 
		)                            
		SET @pvtNonZeroAmountDate = LEFT( @pvtNonZeroAmountDate, LEN(@pvtNonZeroAmountDate )-1 )                          
	
		SET @pvtSumIsNullAmount = 
		( 
			SELECT  'ISNULL(SUM([' + A.[Date] + ']), 0) AS ['+A.[Date] +'],'
			FROM
			(
				SELECT DISTINCT t.[Date]
				FROM #TEMP T
			) A
			ORDER BY Year(A.[Date]), Month(A.[Date])
			FOR XML PATH('' ) 
		)                            
		SET @pvtSumIsNullAmount = LEFT( @pvtSumIsNullAmount, LEN(@pvtSumIsNullAmount )-1 )
		
		SET @QUERY = 
			'
			
				SELECT [Loc Seq],[Location Name],[Main Area],[Sub Area],CustomerId,[Customer Name], '+@pvtSumIsNullAmount+' FROM
				(
					SELECT t.[Loc Seq],t.[Location Name],t.[Main Area],t.[Sub Area],t.CustomerId,t.[Customer Name],  T.[Date], isnull(Amount,0) as [Amount] 
					FROM #TEMP T 
				)ST
				PIVOT
				(SUM(Amount) FOR [Date] IN ('+@pvtNonZeroAmountDate+')) AS PVT	
				GROUP BY [Loc Seq],[Location Name],[Main Area],[Sub Area],CustomerId,[Customer Name]
				Order BY [Loc Seq],[Main Area],[Sub Area],[Customer Name]						
			'
			EXEC (@QUERY)
			PRINT (@QUERY)										
DROP TABLE  #TEMP
 GO/*
 AUTHOR: SIDRA ASIF
 DATED : 14 January
 PURPOSE :  Update New Product Sequence 
*/

CREATE  PROC [dbo].[usp_Update_ProductSequence]
( @tvpTable utt_ProductSequence_TableType READONLY ,@UpdatedBy int, @EditStartTime DATETIME )
 AS 
BEGIN
	IF DATEDIFF(DAY, @EditStartTime, '1900-01-01') <> 0
	AND DATEDIFF(SECOND, ISNULL(( SELECT MAX(ISNULL(T.UpdateDate,@EditStartTime)) FROM Product AS T INNER JOIN @tvpTable AS TVP ON (T.ProductId=TVP.ProductId) ), @EditStartTime), @EditStartTime) < 0	
	--IF DATEDIFF(SECOND, ISNULL(( SELECT MAX(T.UpdateDate) FROM Product AS T INNER JOIN  @tvpTable AS TVP ON   (T.ProductId = TVP.ProductId )), @EditStartTime), @EditStartTime) < 0
	BEGIN 
		RAISERROR('Error On Update! The record cannot be updated because it has been modified by some other user after it was opened for editing by this user.', 16, 1)
	END
	
    
		UPDATE T
		SET    T.ProductSequence = TVP.ProductSequence,
			   T.UpdateDate = GETDATE(),
			   T.UpdatedBy = @UpdatedBy,
			   T.CommunicationId = NULL,
			   T.ToSend = 1
		FROM   Product AS T
		INNER JOIN   @tvpTable AS TVP
		  ON   (T.ProductId = TVP.ProductId )
		
		SELECT @@ROWCOUNT
    
END
 GODECLARE @CompanyIds varchar(1000),@PBLIds  varchar(1000),@LocationIds  varchar(1000),@SelectAll int,@FromDate datetime, @ToDate datetime
SET @CompanyIds='1' 
SET @PBLIds='28'
SET @LocationIds='14' 
SET @SelectAll=2
SET @FromDate='2013-11-23 00:00:00'
SET @ToDate='2013-11-26 00:00:00'

DECLARE @pvtTotalSaleColumns VARCHAR(MAX),
        @pvtTotalSaleNonZeroColumns VARCHAR(MAX),
        @pvtTotalCreditColumns VARCHAR(MAX),
        @pvtTotalCreditNonZeroColumns VARCHAR(MAX),
        @pvtTotalPercColumns VARCHAR(MAX),
        @pvtTotalPercNonZeroColumns VARCHAR(MAX),
        @pvtMAXColumns VARCHAR(MAX)
        
SELECT
a.LocationId,l.ShortName AS [Location Name],a.PrincipalBusinessLineId,upbla.Name AS [Principal Business Line],
upbla.Name + '!Total Sale' AS [Principal Business Line Total Sale],
upbla.Name + '!Total Credit Sale' AS [Principal Business Line Total Credit Sale],
upbla.Name + '!Total Percentage' AS [Principal Business Line Total Percentage],

--sum(A.[Total Sale]) AS [Total Sale],
--sum(A.[Credit Total Net]) AS [Total Credit Net],
--CASE WHEN isnull(sum(A.[Total Sale]),sum(a.[Credit Total Net])) = 0 THEN 0 ELSE
--Sum(A.[Credit Total Net]) / isnull(sum(A.[Total Sale]),sum(a.[Credit Total Net])) END  AS [Total Percentage]
--INTO #TEMP  
FROM 
(
	SELECT udes.LocationId, udes.Date, udes.CompanyId,up.PrincipalBusinessLineId,udes.
       isnull((udes.GrossValue - udes.SLNCash-udes.SLNCredit),0)*udes.TP AS [Total Sale],
       isnull((udes.BookedLocalCredit+udes.BookedOSCredit - udes.SLNCredit),0)*udes.TP  AS [Credit Total Net]       
	FROM uv_DayEndSale udes
	INNER JOIN uv_Product up ON up.ProductId = udes.ProductId 

	UNION ALL

	SELECT s.LocationId, s.TransactionDate AS [Date],s.CompanyId, s.PrincipalBusinessLineId,
			s.[Total Net] AS [Total Sale],s.[Credit Total Net]
	FROM UV_SLN S	
) A 
	INNER JOIN DBO.Split(@CompanyIds, ',') Company ON   (Company.Data = A.CompanyId OR @CompanyIds = '')  
	INNER JOIN DBO.Split(@LocationIds, ',') LOC ON   (LOC.Data = A.LocationId OR @LocationIds = '')  
	INNER JOIN DBO.Split(@PBLIds, ',') PBL  ON   (PBL.Data = A.PrincipalBusinessLineId OR @PBLIds = '')  
	INNER JOIN uv_PrincipalBusinessLine_All upbla ON upbla.PrincipalBusinessLineId =A.PrincipalBusinessLineId
	INNER JOIN Location l ON l.LocationId=a.LocationId
WHERE
(
	@SelectAll=0 OR
	(
		@SelectAll=2 
		AND (DATEDIFF(DAY, A.Date,  @FromDate) <= 0   AND DATEDIFF(DAY,A.Date,  @ToDate) >= 0)
	)	
)
	
GROUP BY
A.CompanyId,a.LocationId,l.ShortName, A.PrincipalBusinessLineId,upbla.Name--,A.Date

HAVING sum(a.[Total Sale])>0

--SELECT * FROM #TEMP
-----------------------------------Total Sale-------------------------------------
SET @pvtTotalSaleColumns =( SELECT DISTINCT '0 [' +  [Principal Business Line Total Sale] + '], ' FROM   #TEMP FOR XML PATH(''), root('MyString'), type).value('/MyString[1]','varchar(max)')                            
SET @pvtTotalSaleColumns = LEFT(@pvtTotalSaleColumns, LEN(@pvtTotalSaleColumns )-1)

SET @pvtTotalSaleNonZeroColumns =( SELECT DISTINCT '[' +  [Principal Business Line Total Sale] + '], ' FROM   #TEMP FOR XML PATH(''), root('MyString'), type).value('/MyString[1]','varchar(max)')
SET @pvtTotalSaleNon--CREATE PROCEDURE usp_Report_MonthlyManagementReport @CompanyIds INT, @LocationIds VARCHAR(250),@PBLIds VARCHAR(250),@SelectAll INT,@FromDate DATETIME,@ToDate DATETIME

DECLARE @CompanyIds INT, @LocationIds VARCHAR(250),@PBLIds VARCHAR(250),@SelectAll INT,@FromDate DATETIME,@ToDate DATETIME
SET @CompanyIds = 1
SET @LocationIds = '14'
SET @PBLIds = '28'
SET @SelectAll = 2
SET @FromDate = '2014-04-01 00:00:00.000'
SET @ToDate = '2014-04-19 00:00:00.000'

SELECT
l.SequenceId,
a.[LocationId],
l.[Name] AS [Location],
upbla.PBLSequenceId,
a.PrincipalBusinessLineId,
upbla.[Principal ShortName] AS [PBL],
a.[Gross Sale Cash],
a.[Gross Sale Cr],
--a.[Gross UDL Discount Cash],
--a.[Gross PBL Discount Cash],
--a.[Gross UDL Discount Cr],
--a.[Gross PBL Discount Cr],
a.[SLN Cash],
a.[SLN Cr], 
a.[SLN UDL Discount Cash], 
a.[SLN PBL Discount Cash],
a.[SLN UDL Discount Cr],
a.[SLN PBL Discount Cr],
a.[Gross Sale Cash] - 0/*a.[UDL Discount Cash] - a.[PBL Discount Cash]*/ AS [Cash Sale],
a.[Gross Sale Cr] - 0/*a.[UDL Discount Credit] - a.[PBL Discount Credit]*/ AS [Credit Sale],
a.[SLN Cash] - a.[SLN UDL Discount Cash] - a.[SLN PBL Discount Cash] AS [Cash Sales Return],
a.[SLN Cr] - a.[SLN UDL Discount Cr] - a.[SLN PBL Discount Cr] AS [Credit Sales Return],
((a.[Gross Sale Cash] - 0/*a.[UDL Discount Cash] - a.[PBL Discount Cash]*/ ) + (a.[Gross Sale Cr] - 0/*a.[UDL Discount Cr] - a.[PBL Discount Cr]*/ ) -
(a.[SLN Cash] - a.[SLN UDL Discount Cash] - a.[SLN PBL Discount Cash]) - (a.[SLN Cr] - a.[SLN UDL Discount Cr] - a.[SLN PBL Discount Cr])) 
AS [Net Sale],
--a.[Gross UDL Discount Cash] + a.[Gross UDL Discount Cr] - a.[SLN UDL Discount Cash] - a.[SLN UDL Discount Cr] AS [UDL Discount],
--a.[Gross PBL Discount Cash] + a.[Gross PBL Discount Cr] - a.[SLN PBL Discount Cash] - a.[SLN PBL Discount Cr] AS [PBL Discount],
a.[Gross Sale Cash] + a.[Gross Sale Cr] - a.[SLN Cash] - a.[SLN Cr] AS [DSP Net Sale]
FROM

(
	SELECT
		usso.LocationId,
		usso.PrincipalBusinessLineId,
		usso.IsCash,
		case when usso.IsCash = 1 then SUM(usso.soldquantity*usso.tp) else 0 end AS [Gross Sale Cash],
		case when usso.IsCash = 1 then 0 else SUM(usso.soldquantity*usso.tp) end AS [Gross Sale Cr],
		--(case when usso.IsCash = 1 then (usso.udldiscount) else 0 end) AS [Gross UDL Discount Cash],
		--(case when usso.IsCash = 1 then (usso.pbldiscount) else 0 end) AS [Gross PBL Discount Cash],
		--(case when usso.IsCash = 1 then 0 else (usso.udldiscount) end) AS [Gross UDL Discount Cr],
		--(case when usso.IsCash = 1 then 0 else (usso.pbldiscount) end) AS [Gross PBL Discount Cr]  
		0 AS [SLN Cash],
		0 AS [SLN Cr], 
		0 AS [SLN UDL Discount Cash], 
		0 AS [SLN PBL Discount Cash],
		0 AS [SLN UDL Discount Cr],
		0 AS [SLN PBL Discount Cr] 
	FROM uv_Sales_SaleOrder usso
	INNER JOIN   DBO.Split(@PBLIds, ',') PBL ON  (PBL.Data = usso.PrincipalBusinessLineId OR @PBLIds = '')
	INNER JOIN   DBO.Split(@LocationIds, ',') Location ON  (Location.Data = usso.LocationId OR @LocationIds = '')
	
	WHERE usso.CompanyId = @CompanyIds
	AND (@SelectAll = 0 
		OR ( @SelectAll = 1 AND DATEDIFF(DAY,usso.SalePassDate,@FromDate)=0) 
		OR ( @SelectAll = 2 AND DATEDIFF(DAY,usso.SalePassDate,@FromDate)<=0 AND DATEDIFF(DAY,usso.SalePassDate,@ToDate)>=0))
	
	GROUP BY usso.IsCash,usso.PrincipalBusinessLineId,usso.LocationId
 
UNION ALL

	SELECT 
		sln.LocationId,
		sln.PrincipalBusinessLineId,
		sln.IsCash,
		0 AS [Gross Sale Cash],
		0 AS  [Gross Sale Cr],
		--0 AS [Gross UDL Discount Cash],
		--0 AS [Gross PBL Discount Cash],
		--0 AS [Gross UDL Discount Cr],
		--0 AS [Gross PBL Discount Cr],  
		(case when sln.IsCash = 1 then SUM(sln.Quantity * pc.TP) else 0 end) AS [SLN Cash],
		(case when sln.IsCash = 1 then 0 else SUM(sln.Quantity * pc.TP) end) AS [SLN Cr], 
		(case when sln.IsCash = 1 then SUM(sln.DiscountUDLPart) else 0 end) AS [SLN UDL Discount Cash], 
		(case when sln.IsCash = 1 then SUM(sln.DiscountPrincipalPart) else 0 end) AS [SLN PBL Discount Cash],
		(case when sln.IsCash = 1 then 0 else SUM(sln.DiscountUDLPart) end) AS [SLN UDL Discount Cr],
		(case when sln.IsCash = 1 then 0 else SUM(sln.DiscountPrincipalPart) end) AS [SLN PBL Discount Cr] 
	FROM uv_Sales_SLN sln
	INNER JOIN PriceCatalog pc ON pc.PriceCatalogId = sln.PriceId
	INNER JOIN   DBO.Split(@PBLIds, ',') PBL ON  (PBL.Data = sln.PrincipalBusinessLineId OR @PBLIds = '')
    INNER JOIN   DBO.Split(@LocationIds, ',') Location ON  (Location.Data = sln.LocationId OR @LocationIds = '')
	
	WHERE sln.CompanyId = @CompanyIds
	AND (@SelectAll = 0 
		OR ( @SelectAll = 1 AND DATEDIFF(DAY,sln.TransactionDate,@FromDate)=0) 
		OR ( @SelectAll = 2 AND DATEDIFF(DAY,sln.TransactionDate,@FromDate)<=0 AND DATEDIFF(DAY,sln.TransactionDate,@ToDate)>=0))
	
	GROUP BY sln.IsCash,sln.PrincipalBusinessLineId,sln.LocationId

) a
INNER JOIN Location l ON A.LocationId = l.LocationId
INNER JOIN uv_PrincipalBusinessLine_All upbla ON a.PrincipalBusinessLineId = upbla.PrincipalBusinessLineId

 GO 
SELECT ccl.LocationId,
		ccl.CustomerId,
		ccl.PrincipalBusinessLineId,
		pbl.[Name],
		ccl.CreditDays,
		ccl.CreditLimit
		
 FROM CustomerCreditLimit ccl 
INNER JOIN uv_PrincipalBusinessLine_all pbl ON ccl.PrincipalBusinessLineId = pbl.PrincipalBusinessLineId
WHERE ccl.LocationId = 14 AND ccl.CustomerId = 288 

 GO 
CREATE PROCEDURE usp_Report_CustomerWiseSales @LocationId VARCHAR(200),@PBLId VARCHAR(200),
@FromDate DATETIME,@ToDate DATETIME,
@TPValue DECIMAL,@Discount DECIMAL AS
 
--DECLARE @LocationId VARCHAR(200),@PBLId VARCHAR(200),
--@FromDate DATETIME,@ToDate DATETIME,
--@TPValue DECIMAL,@Discount DECIMAL 

SET @LocationId = '14'
SET @PBLId = '28,3'
SET @FromDate = '01/12/2012'
SET @ToDate = '01/3/2014'
SET @TPValue = 1000.00
SET @Discount = 5.00

SELECT l.SequenceId,ucws.LocationId,l.[Name] AS [Location Name],
	   upbla.PBLSequenceId,ucws.PrincipalBusinessLineId,upbla.[NAME] AS [PBL],
	   ucws.CustomerId,
	   ucws.CustomerName,
	   --ucws.TransactionDate,	   
	   SUM(ucws.SaleValue - ucws.SaleReturnValue) AS [SALES VALUE],
	   SUM(ucws.SaleValue - ucws.SaleReturnValue)*(@Discount/100) AS [DISCOUNT],
	   SUM(
	   		(ucws.SaleValue - ucws.SaleReturnValue)
	   		-
	   		(
	   			(ucws.SaleValue - ucws.SaleReturnValue)*(@Discount/100)
	   		)
	   )AS [AFTER Discount]
FROM 
dbo.uv_CustomerWiseSale ucws
INNER JOIN uv_PrincipalBusinessLine_All upbla ON ucws.PrincipalBusinessLineId = upbla.PrincipalBusinessLineId
INNER JOIN dbo.Location l ON ucws.LocationId = l.LocationId
INNER JOIN Dbo.[Split](@LocationId,',')LOC ON LOC.[Data] = ucws.LocationId OR (@LocationId = '')
INNER JOIN dbo.[Split](@PBLId,',')PBL ON PBL.[Data] =  ucws.PrincipalBusinessLineId OR (@PBLId = '')

WHERE (DATEDIFF(DAY,ucws.TransactionDate,  @FromDate) <= 0 
AND  DATEDIFF(DAY,ucws.TransactionDate,  @ToDate) >= 0)
--and ucws.CustomerId = 6156
GROUP BY l.SequenceId,ucws.LocationId,l.[Name],
	   upbla.PBLSequenceId,ucws.PrincipalBusinessLineId,upbla.[NAME],
	   ucws.CustomerId,
	   ucws.CustomerName
	   --ucws.TransactionDate	   
HAVING Sum(ucws.SaleValue - ucws.SaleReturnValue) >= @TPValue


 GO 
SELECT * FROM Employees e

BEGIN trans 
CREATE TABLE SAMPLE_PAYROLL(
	EMPLOYEEID   INT              NOT NULL,
   ENAME VARCHAR (20)     NOT NULL,
   HOURLYWAGE MONEY NOT NULL,
   WORKINGHOUR INT NOT NULL,
   --GROSSPAY MONEY NOT NULL,
   --FEDERALALLOW INT NOT NULL,
   --StateTax MONEY NOT NULL,
   --FederalIncomeTax MONEY NOT NULL,
   --SocialSecurity MONEY NOT NULL,
   --Medicare MONEY NOT NULL,
   --TotalTaxWithheld MONEY NOT NULL,
   --InsuranceDeduction MONEY NOT NULL,
   NetPay MONEY NOT NULL
);
SELECT * FROM targeted
INSERT INTO SAMPLE_PAYROLL
(
	EMPLOYEEID,
	ENAME,
	HOURLYWAGE,
	WORKINGHOUR,
	NetPay
)
SELECT * FROM targeted
COMMIT trans
 GO 
select left(right(convert(varchar(20),getdate(),06),6),3)+'-'+right(convert(varchar(20),getdate(),06),2), DATEADD(dd, DATEDIFF(dd, 0, getdate()), 0),convert(varchar(20),getdate(),06)
 GO 
CREATE PROCEDURE usp_Report_GrossSaleAndMargin @CompanyId INT,@LocationIds NVARCHAR(250),@PBLIds NVARCHAR(500),@ProductIds NVARCHAR(1000),@SelectAll INT,@FromDate DATETIME,@ToDate DATETIME,@SalesCriteria INT as
--DECLARE @CompanyId INT,@LocationIds NVARCHAR(250),@PBLIds NVARCHAR(500),@ProductIds NVARCHAR(1000),@SelectAll INT,@FromDate DATETIME,@ToDate DATETIME,@SalesCriteria INT 
--SET @CompanyId = '1'
--SET @LocationIds = '11'
--SET @PBLIds = '37'
--SET @ProductIds = '896'
--SET @FromDate = '2014-04-01'
--SET @ToDate = '2014-04-04'
--SET @SalesCriteria = 1
--SET @SelectAll = 2
/*0-Gross Sale
* 1-Net Sale
* 2-SLN
* */
SELECT l.SequenceId,
		A.LocationId,
		l.ShortName,
		up.PBLSequenceId,
		A.PrincipalBusinessLineId,
		up.ShortName,
		up.ProductSequence,
		A.ProductId,
		up.[Name] AS ProductName,
		SUM(A.Quantity) AS Quantity,
		A.PP,
		SUM(A.Quantity) * A.PP AS [PPValue],
		--a.InputTaxAmount,
		A.TP, 
		SUM(A.Quantity) * A.TP AS [TPValue],
		--a.[OUTPUT TAX],
		A.TP-A.PP AS [Margin],
		(SUM(A.Quantity)* A.TP) - (SUM(A.Quantity) * A.PP) AS [MarginValue],
		((SUM(A.Quantity) * A.TP)-(SUM(A.Quantity)* A.PP)) / (SUM(A.Quantity) * A.PP) * 100 AS  [MarginPercentage]
FROM (
			SELECT
				ussl.LocationId,
				ussl.PrincipalBusinessLineId,
				ussl.ProductId,
				CASE WHEN @SalesCriteria = 0 THEN 0--SUM(ussl.Quantity) 
				     When @SalesCriteria = 1 THEN -SUM(ussl.Quantity)
				     When @SalesCriteria  = 2 THEN SUM(ussl.Quantity) END 
				 AS [Quantity],
				ussl.TransactionDate AS [Date],
				pc.PP,
				ussl.InputTaxAmount,
				pc.TP,
				ussl.OutputTaxAmount AS [OUTPUT TAX]
		    FROM uv_Sales_SLN ussl
		    INNER JOIN PriceCatalog pc ON ussl.PriceId = pc.PriceCatalogId
		    INNER JOIN   DBO.Split(@ProductIds, ',') Product ON  (Product.Data = ussl.ProductId OR @ProductIds = '')
			INNER JOIN   DBO.Split(@PBLIds, ',') PBL ON  (PBL.Data = ussl.PrincipalBusinessLineId OR @PBLIds = '')
			INNER JOIN   DBO.Split(@LocationIds, ',') Location ON  (Location.Data = ussl.LocationId OR @LocationIds = '')
			WHERE (  @SelectAll = 0	  
					OR  (@SelectAll = 1 AND ( DATEDIFF(DAY,ussl.TransactionDate,  @FromDate) = 0 ))
				    OR  (@SelectAll = 2 AND ( DATEDIFF(DAY, ussl.TransactionDate,  @FromDate) <= 0 AND DATEDIFF(day, ussl.TransactionDate, @ToDate) >= 0 ))   
			) and ussl.IsRollbacked = 0
		    GROUP BY 
				ussl.LocationId,
				ussl.PrincipalBusinessLineId,
				ussl.ProductId,
				ussl.TransactionDate,
				pc.PP,
				ussl.InputTaxAmount,
				pc.TP,
				ussl.OutputTaxAmount  
				
				UNION ALL
				
			SELECT
				usso.LocationId,
				usso.PrincipalBusinessLineId,
				usso.ProductId,
				Case When @SalesCriteria  = 0 then SUM(usso.SoldQuantity) 
				     When @SalesCriteria  = 1 then SUM(usso.SoldQuantity)
				     When @SalesCriteria  = 2 then 0 END 
				AS [Quantity],
				usso.SalePassDate AS [Date],
				pc.PP,
				0 InputTaxAmount ,
				pc.TP,
				usso.TotalOutputTax AS [OUTPUT TAX]
			FROM uv_Sales_SaleOrder usso
			INNER JOIN PriceCatalog pc ON usso.PriceId = pc.PriceCatalogId
			INNER JOIN   DBO.Split(@ProductIds, ',') Product ON  (Product.Data = usso.ProductId OR @ProductIds = '')
			INNER JOIN   DBO.Split(@PBLIds, ',') PBL ON  (PBL.Data = usso.PrincipalBusinessLineId OR @PBLIds = '')
			INNER JOIN   DBO.Split(@LocationIds, ',') Location ON  (Location.Data = usso.LocationId OR @LocationIds = '')
			WHERE 
			(  @SelectAll = 0	  
			 OR  (@SelectAll = 1 AND ( DATEDIFF(DAY, usso.SalePassDate,  @FromDate) = 0 ))
			 OR  (@SelectAll = 2 AND ( DATEDIFF(DAY, usso.SalePassDate,  @FromDate) <= 0 AND DATEDIFF(day, usso.SalePassDate, @ToDate) >= 0 ))   
			) AND usso.IsRollbacked = 0
		    GROUP BY 
				usso.LocationId,
				usso.PrincipalBusinessLineId,
				usso.ProductId,
				usso.SalePassDate,
				pc.PP,
				
				pc.TP,
				usso.TotalOutputTax
)A

--INNER JOIN PriceCatalog pc ON A.PriceId = pc.PriceCatalogId
INNER JOIN Location l ON A.LocationId = l.LocationId
INNER JOIN uv_Product up ON A.ProductId = up.ProductId
--INNER JOIN   DBO.Split(@ProductIds, ',') Product ON  (Product.Data = A.ProductId OR @LocationIds = '')
--INNER JOIN   DBO.Split(@PBLIds, ',') PBL ON  (PBL.Data = A.PrincipalBusinessLineId OR @PBLIds = '')
--INNER JOIN   DBO.Split(@LocationIds, ',') Location ON  (Location.Data = A.LocationId OR @LocationIds = '')


GROUP BY 
		l.SequenceId,  
		A.LocationId,
		l.ShortName,
		up.PBLSequenceId,
		A.PrincipalBusinessLineId,
		up.ShortName,
		up.ProductSequence,
		A.ProductId,
		up.[Name] ,
		A.PP,A.TP
		
HAVING  SUM(A.Quantity)<>0
 GO 
DECLARE @CompanyId INT,@LocationIds NVARCHAR(250),@PBLIds NVARCHAR(500),@ProductIds NVARCHAR(1000),@SelectAll INT,@FromDate DATETIME,@ToDate DATETIME,@SalesCriteria INT 
SET @CompanyId = '1'
SET @LocationIds = '11'
SET @PBLIds = '3'
SET @ProductIds = '172'
SET @FromDate = '2014-04-04'
SET @ToDate = '2014-04-15'
SET @SalesCriteria = 2
SET @SelectAll = 1
/*0-Gross Sale
* 1-Net Sale
* 2-SLN
* */	  

	----------------------------SALE---------------------------
	SELECT
	usso.LocationId,
	l.ShortName AS [Location Name],
	--up.PBLSequenceId,
	usso.PrincipalBusinessLineId,
	up.PBLShortName,
	--up.ProductSequence,
	--usso.SaleOrderId, 
	usso.ProductId,
	up.[Name] AS [Product Name],
	CASE WHEN @SalesCriteria=0 THEN sum(usso.SoldQuantity)
		 WHEN @SalesCriteria=1 THEN sum(usso.SoldQuantity) - SUM(ussln.[SLNQuantity])
		 WHEN @SalesCriteria=2 THEN -SUM(ussln.[SLNQuantity])
	END 
	AS [Sale Qty],	
	pc.PP,
	CASE WHEN @SalesCriteria=0 THEN sum(usso.SoldQuantity * pc.PP)
		 WHEN @SalesCriteria=1 THEN sum(usso.SoldQuantity * pc.PP)- SUM(ussln.[SLNQuantity] * pc.PP)
		 WHEN @SalesCriteria=2 THEN -SUM(ussln.[SLNQuantity] * pc.PP)
	END 
	AS [PPValue],	
	pc.TP,
	CASE WHEN @SalesCriteria=0 THEN sum(usso.SoldQuantity * pc.TP)
		 WHEN @SalesCriteria=1 THEN sum(usso.SoldQuantity * pc.TP) - SUM(ussln.[SLNQuantity] * pc.TP)
		 WHEN @SalesCriteria=2 THEN -sum(ussln.[SLNQuantity] * pc.TP)
	END 
	AS [TPValue]
	INTO TEMPSale
FROM uv_Sales_SaleOrder usso
--INNER JOIN SaleOrderTax sot ON usso.LocationId = sot.LocationId AND usso.SaleOrderId = sot.SaleOrderId
INNER JOIN uv_Product up ON usso.ProductId = up.ProductId 
INNER JOIN PriceCatalog pc ON usso.PriceId = pc.PriceCatalogId
INNER JOIN   DBO.Split(@LocationIds, ',') Location ON  (Location.Data = usso.LocationId OR @LocationIds = '')
INNER JOIN   DBO.Split(@PBLIds, ',') PBL ON  (PBL.Data = usso.PrincipalBusinessLineId OR @PBLIds = '')
INNER JOIN   DBO.Split(@ProductIds, ',') Product ON  (Product.Data = usso.ProductId OR @LocationIds = '')
INNER JOIN Location l ON usso.LocationId = l.LocationId

	WHERE (  @SelectAll = 0	  
		   OR  (@SelectAll = 1 AND ( DATEDIFF(DAY, usso.SalePassDate,  @FromDate) = 0 ))
		   OR  (@SelectAll = 2 AND ( DATEDIFF(DAY, usso.SalePassDate,  @FromDate) <= 0 AND DATEDIFF(day, usso.SalePassDate, @ToDate) >= 0 ))   
		  )  
		  AND usso.SalePassDate IS NOT NULL
		  AND usso.IsRollbacked  = 0

	GROUP BY 
	l.ShortName,
	l.SequenceId,
	usso.LocationId,
	up.PBLSequenceId,
	usso.PrincipalBusinessLineId, 
	up.PBLShortName,
	--usso.SaleOrderId,
	up.ProductSequence,
	usso.ProductId,
	up.[Name],
	pc.PP,
	pc.TP
	
ORDER BY 
	l.SequenceId,
	up.PBLSequenceId,
	up.ProductSequence  



/*
	SELECT SUM(Quantity) FROM uv_Sales_SLN usso  WHERE usso.LocationId = 11 AND usso.ProductId = 172 
	SELECT sum(SOLDQUANTITY) FROM uv_Sales_SaleOrder usso  WHERE usso.LocationId = 11 AND usso.ProductId = 172 AND usso.SalePassDate BETWEEN '2014-04-04' AND '2014-04-05'
*/	
	
SELECT
	usso.LocationId,
	l.ShortName AS [Location Name],
	--up.PBLSequenceId,
	usso.PrincipalBusinessLineId,
	up.PBLShortName,
	--up.ProductSequence,
	--usso.SaleOrderId, 
	usso.ProductId,
	up.[Name] AS [Product Name],
	CASE WHEN @SalesCriteria=0 THEN sum(usso.SoldQuantity)
		 WHEN @SalesCriteria=1 THEN sum(usso.SoldQuantity) - SUM(ussln.[SLNQuantity])
		 WHEN @SalesCriteria=2 THEN -SUM(ussln.[SLNQuantity])
	END 
	AS [Sale Qty],	
	pc.PP,
	CASE WHEN @SalesCriteria=0 THEN sum(usso.SoldQuantity * pc.PP)
		 WHEN @SalesCriteria=1 THEN sum(usso.SoldQuantity * pc.PP)- SUM(ussln.[SLNQuantity] * pc.PP)
		 WHEN @SalesCriteria=2 THEN -SUM(ussln.[SLNQuantity] * pc.PP)
	END 
	AS [PPValue],	
	pc.TP,
	CASE WHEN @SalesCriteria=0 THEN sum(usso.SoldQuantity * pc.TP)
		 WHEN @SalesCriteria=1 THEN sum(usso.SoldQuantity * pc.TP) - SUM(ussln.[SLNQuantity] * pc.TP)
		 WHEN @SalesCriteria=2 THEN -sum(ussln.[SLNQuantity] * pc.TP)
	END 
	AS [TPValue]
FROM uv_Sales_SLN ussl
GROUP BY 
				ussl.LocationId,
				ussl.PrincipalBusinessLineId,
				ussl.ProductId


	

 GO 
SELECT ptp.PrincipalBusinessLineId,up.PBLShortName ,pt.Name AS PrincipalTeam,
 ptp2.ProductId , up.[Name] AS ProductName
 INTO #Temp
 FROM PrincipalTeam pt 
INNER JOIN PrincipalTeamPBL ptp ON pt.PrincipalTeamId = ptp.PrincipalTeamId
INNER JOIN uv_Product up ON ptp.PrincipalBusinessLineId = up.PrincipalBusinessLineId
INNER JOIN PrincipalTeamProduct ptp2 ON pt.PrincipalTeamId = ptp2.PrincipalTeamId AND up.ProductId = ptp2.ProductId 

 GO 
ALTER PROC [dbo].[usp_Report_GenericDataSetSales] 
	@LocationIds varchar(200), 
	@CompanyIds varchar(20),  
	@PBLIds varchar(100),   
	@SaleTypeIds varchar(100),   
	@MainAreaIds varchar(MAX),  
	@SubAreaIds varchar(MAX),  
	@CustomerIds varchar(MAX),  
	@ProductIds varchar(MAX),  	
	@BatchNo varchar(50), 
	@SelectAll int,
	@FromDate datetime, 
	@ToDate datetime,   	   
	@IsCash bit,
	@IsCredit bit,
	@CustStatus int ,
	@MAreaStatus INT,
	@SAreaStatus INT,
	@BookerStatus INT,
	@SupplierStatus INT,
    @IsinvoiceDate BIT,
    @PBLWise BIT
AS 

--DECLARE 
--	@LocationIds varchar(1000), 
--	@CompanyIds varchar(1000),  
--	@PBLIds varchar(1000),   
--	@SaleTypeIds varchar(1000),   
--	@MainAreaIds varchar(1000),  
--	@SubAreaIds varchar(1000),  
--	@CustomerIds varchar(1000),  
--	@ProductIds varchar(1000),   
--	@BatchNo varchar(10),  
--	@SelectAll int, 
--	@FromDate datetime, 
--	@ToDate datetime,   		      
--    @IsCash bit,
--	@IsCredit bit,
--	@MAreaStatus INT,
--	@SAreaStatus INT,
--	@BookerStatus INT,
--	@SupplierStatus INT,
--	@CustStatus INT,
--	@IsinvoiceDate  BIT ,
--  @PBLWise BIT 
--SET @LocationIds = '11'--'11,14'--'11,18,23,28,30,35,37,42,44'  
--SET @CompanyIds= '1'
--SET @PBLIds = '3'--3,4,'--'7,3,5,28,40,4,33,37,38,20,35,41,43,44,45,47,48,49,50,55,57,58,59,60,61,62'
--SET @SaleTypeIds = ''--'1,2,3,4,5'
--SET @MainAreaIds = ''--'24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43'
--SET @SubAreaIds = ''--'149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238'
--SET @ProductIds = '' --'2545'
--SET @BatchNo = ''
--SET @CustomerIds= ''--'2780,2781'
--SET @SelectAll=2
--SET @FromDate = '2014-05-01'  
--SET @ToDate = '2014-05-31' 
--SET @IsCash= 1
--SET @IsCredit= 1
--SET @CustStatus = 0
--SET @IsinvoiceDate = 0
--SET @MAreaStatus = 0
--SET @SAreaStatus = 0
--SET @BookerStatus = 0
--SET @SupplierStatus = 0
--SET @PBLWise = 0
--SELECT * 
--INTO #CUSTOMER 
--FROM
--(
--	SELECT so.LocationId,
--		   SO.SaleOrderId,
--		   so.TransactionDate,
--		   SO.SalePassDate,
--		   so.SaleTypeId,
--		   SO.BookerId,
--		   SO.SupplierId,
--		   so.IsCash,
--		   csa.Customerid,
--		   csa.[Customer Name],
--		   csa.[Address],
--		   sa.MainAreaId,
--		   csa.SubAreaId,
--		   csa.[Sub Area]
--	FROM SALEORDER SO 
--	INNER JOIN uv_CustomerSalesArea csa ON SO.LocationId = CSA.LocationId 
--	 AND SO.CustomerId = CSA.CUSTOMERID 
--	INNER JOIN SubArea sa ON sa.SubAreaId = csa.SubAreaId
--	INNER JOIN   DBO.Split(@CompanyIds, ',' ) Company ON ( Company.Data = so.CompanyId OR @CompanyIds = '' )
--	INNER JOIN   DBO.Split(@CustomerIds, ',' ) Customer ON ( Customer.Data = so.CustomerId OR @CustomerIds = '' )
--	INNER JOIN DBO.Split(@LocationIds, ',' ) Loc ON ( Loc.Data = csa.LocationId OR @LocationIds = '')
--	INNER JOIN DBO.Split(@MainAreaIds, ',' ) MainArea ON ( MainArea.Data = csa.MainAreaId OR @MainAreaIds = '')
--	INNER JOIN DBO.Split(@SubAreaIds, ',' )  SubArea  ON ( SubArea.Data = csa.SubAreaId   OR @SubAreaIds = '' )


--	WHERE SO.IsRollbacked = 0 AND  so.CustomerToBeOpenedSubAreaId IS NULL AND 
--	(
--		@MAreaStatus = 0
--		OR (
--			   @MAreaStatus = 1
--			   AND (
--					   DATEDIFF(DAY, csa.[Main Area EffectiveDate], GETDATE()) >= 0
--					   AND DATEDIFF(DAY, GETDATE(), ISNULL(csa.[Main Area EndDate], GETDATE() + 1)) > 0
--				   )
--		   )
--		OR (
--			   @MAreaStatus = 2
--			   AND DATEDIFF(DAY, csa.[Main Area EndDate], ISNULL(GETDATE(), GETDATE() + 1)) > 0
--		   )
--	)	
--		AND 
--	(
--		@SAreaStatus = 0
--		OR (
--			   @SAreaStatus = 1
--			   AND (
--					   DATEDIFF(DAY, sa.EffectiveDate, GETDATE()) >= 0
--					   AND DATEDIFF(DAY, GETDATE(), ISNULL(sa.EndDate, GETDATE() + 1)) > 0
--				   )
--		   )
--		OR (
--			   @SAreaStatus = 2
--			   AND DATEDIFF(DAY, sa.EndDate, ISNULL(GETDATE(), GETDATE() + 1)) > 0
--		   )
--	)
--		AND 
--	(
--		@CustStatus = 0
--		OR (
--			   @CustStatus = 1
--			   AND (
--					   DATEDIFF(DAY, csa.[Cus Effective Date], GETDATE()) >= 0
--					   AND DATEDIFF(DAY, GETDATE(), ISNULL(csa.[Cus End Date], GETDATE() + 1)) > 0
--				   )
--		   )
--		OR (
--			   @CustStatus = 2
--			   AND DATEDIFF(DAY, csa.[Cus End Date], ISNULL(GETDATE(), GETDATE() + 1)) > 0
--		   )
--	)

--	UNION ALL

--	SELECT so.LocationId,
--		   SO.SaleOrderId,
--		   so.TransactionDate,
--		   SO.SalePassDate,
--		   so.SaleTypeId,
--		   SO.BookerId,
--		   SO.SupplierId,
--		   so.IsCash,
--		   csa.Customerid,
--		   SO.CustomerToBeOpenedName [Customer Name],
--		   so.CustomerToBeOpenedAddress [Address],
--		   sa.MainAreaId,
--		   sa.SubAreaId,
--		   sa.[Name] [Sub Area]
--	FROM SaleOrder so 
--	INNER JOIN  Customer csa ON so.LocationId = csa.LocationId 
--	 AND so.CustomerId = csa.CustomerId
--	INNER JOIN SubArea sa ON sa.SubAreaId = so.CustomerToBeOpenedSubAreaId
--	INNER JOIN MainArea ma ON ma.MainAreaId = sa.MainAreaId
--	INNER JOIN location l ON csa.LocationId = l.LocationId
--	INNER JOIN DBO.Split(@LocationIds, ',' ) Loc ON ( Loc.Data = csa.LocationId OR @LocationIds = '')
--	INNER JOIN DBO.Split(@MainAreaIds, ',' ) MainArea ON ( MainArea.Data = sa.MainAreaId OR @MainAreaIds = '')
--	INNER JOIN DBO.Split(@SubAreaIds, ',' )  SubArea  ON ( SubArea.Data = sa.SubAreaId   OR @SubAreaIds = '' )

--	WHERE SO.IsRollbacked = 0   
--	AND so.CustomerToBeOpenedSubAreaId IS NOT NULL 
--	AND 
--	(
--		@MAreaStatus = 0
--		OR (
--			   @MAreaStatus = 1
--			   AND (
--					   DATEDIFF(DAY, ma.EffectiveDate, GETDATE()) >= 0
--					   AND DATEDIFF(DAY, GETDATE(), ISNULL(ma.EndDate, GETDATE() + 1)) > 0
--				   )
--		   )
--		OR (
--			   @MAreaStatus = 2
--			   AND DATEDIFF(DAY, ma.EndDate, ISNULL(GETDATE(), GETDATE() + 1)) > 0
--		   )
--	)	
--		AND 
--	(
--		@SAreaStatus = 0
--		OR (
--			   @SAreaStatus = 1
--			   AND (
--					   DATEDIFF(DAY, sa.EffectiveDate, GETDATE()) >= 0
--					   AND DATEDIFF(DAY, GETDATE(), ISNULL(sa.EndDate, GETDATE() + 1)) > 0
--				   )
--		   )
--		OR (
--			   @SAreaStatus = 2
--			   AND DATEDIFF(DAY, sa.EndDate, ISNULL(GETDATE(), GETDATE() + 1)) > 0
--		   )
--	)
--		AND 
--	(
--		@CustStatus = 0
--		OR (
--			   @CustStatus = 1
--			   AND (
--					   DATEDIFF(DAY, csa.EffectiveDate, GETDATE()) >= 0
--					   AND DATEDIFF(DAY, GETDATE(), ISNULL(csa.EndDate, GETDATE() + 1))
--						   > 0
--				   )
--		   )
--		OR (
--			   @CustStatus = 2
--			   AND DATEDIFF(DAY, csa.EndDate, ISNULL(GETDATE(), GETDATE() + 1)) > 0
--		   )
--	)
--)C


SELECT 	
	l.ShortName AS [LOCATION NAME], 	
	A.SaleOrderId AS [SO NO],
	a.[SO DATE] ,
	convert(VARCHAR(10),A.[SALE DATE],103) AS [SALE DATE],
	right(convert(varchar(20),[SALE DATE],06), len(convert(varchar(20),[SALE DATE],06)) -3)AS [PERIOD],            
	A.CustomerId AS [CODE],
	csa.[Customer Name] AS [CUSTOMER NAME],
	csa.Address AS [ADDRESS],
	csa.[Main Area] AS [MAIN AREA],
	csa.[Sub Area] AS [SUB AREA],
	a.[SALE NATURE] AS [SALE NATURE],
	a.SaleTypeId,
	A.[SALE TYPE],	
	us.Name AS [BOOKER],	
	US1.Name AS [SUPPLIER],
	up.PBLShortName AS [PBL],
	Case when @PBLWise = 0 then  pl.[Description] ELSE '' END AS [PRODUCT LINE],
	Case when @PBLWise = 0 then A.ProductId ELSE '' END AS [PROD ID], 	
	Case when @PBLWise = 0 then UP.Name ELSE '' END AS [PRODUCT NAME], 		
	Case when @PBLWise = 0 then A.BatchNumber ELSE '' END AS [BATCH NO],
	Case when @PBLWise = 0 then B.ExpiryDate ELSE '1900-01-01' END AS [BATCH EXPIRY],
	Case when @PBLWise = 0 then isnull(A.[ORDER Quantity],0) ELSE 0 END AS [ORDER QUANTITY],
	Case when @PBLWise = 0 then isnull(A.[Invoice Quantity],0) ELSE 0 END AS [INVOICE QUANTITY],
	Case when @PBLWise = 0 then A.TP ELSE 0 END AS [TP],  
	-- pl.[Description] [PRODUCT LINE],
	--A.ProductId [PROD ID], 	
	--UP.Name AS [PRODUCT NAME], 		
	--A.BatchNumber AS [BATCH NO],
	--B.ExpiryDate AS [BATCH EXPIRY],
	--isnull(A.[ORDER Quantity],0) AS [ORDER QUANTITY],
	--isnull(A.[Invoice Quantity],0) AS [INVOICE QUANTITY],
	--A.TP AS [TP], 
	CONVERT(DECIMAL(18, 4),CASE WHEN ST.IsFree = 1 THEN 0 ELSE a.[TP Value] END) [TP VALUE],
	A.[Discount Value], 
	A.[Tax Value]
	INTO #temp
FROM 
(
	SELECT 
		so.LocationId, 
		CONVERT(VARCHAR(10),SO.SaleOrderId) AS SaleOrderId,
		SO.TransactionDate AS [SO DATE],
		SO.SalePassDate AS [SALE DATE],
		SO.SaleTypeId, 	
		st1.Name AS [SALE TYPE],			
--		C.MainAreaId,
--		C.SubAreaId,	
--		C.[Sub Area] AS [Sub Area],	
		SO.BookerId, 
		SO.SupplierId,
		SO.CustomerId,
--		C.[Customer Name] AS [Customer],
--		C.Address AS [Address],
		sop.PrincipalBusinessLineId, 
		sop.ProductId, 
		sop.StockTypeId, 
		sop.BatchNumber, 
		sop.TP,
		CASE WHEN SO.IsCash=1 THEN 'CASH' ELSE 'CREDIT' END AS [SALE NATURE], 
		sop.OrderQuantity  AS [ORDER Quantity],
		sop.SoldQuantity AS [Invoice Quantity],			
		ISNULL(sop.SoldQuantity * sop.TP,0)  [TP Value],
		sop.TotalOutputTaxGST + sop.TotalOutputTaxOther AS [Tax],
		(sop.SoldQuantity * sop.TP) + (sop.TotalOutputTaxGST + sop.TotalOutputTaxOther) [Amount],
		CASE WHEN ((sop.SoldQuantity * sop.TP) = 0) THEN 0 ELSE ISNULL(sop.Discount,0)/*/(sop.SoldQuantity * sop.TP) END * 100 */ END AS [Discount Value],
		CASE WHEN ((sop.SoldQuantity * sop.TP) = 0) THEN 0 ELSE (isnull(sop.TotalOutputTaxGST,0) + isnull(sop.TotalOutputTaxOther,0)) /*/ (sop.SoldQuantity * sop.TP)   END * 100 */ END [Tax Value],
		SO.SaleOrderId AS [SO]
	FROM SaleOrder SO INNER JOIN SaleOrderProduct sop ON   sop.LocationId = SO.LocationId 
		 AND   sop.SaleOrderId = SO.SaleOrderId 				
		INNER JOIN SaleType st1 ON st1.SaleTypeId = SO.SaleTypeId 
		INNER JOIN   DBO.Split(@CompanyIds, ',' ) Company ON ( Company.Data = SO.CompanyId OR @CompanyIds = '' )	
		INNER JOIN   DBO.Split(@LocationIds, ',' ) Loc ON  ( Loc.Data = SO.LocationId OR @LocationIds = '' )
		INNER JOIN   DBO.Split(@CustomerIds, ',' ) Customer ON ( Customer.Data = SO.CustomerId OR @CustomerIds = '' )						
		INNER JOIN   DBO.Split(@PBLIds, ',' ) PBL ON (PBL.Data = sop.PrincipalBusinessLineId OR @PBLIds = '' )
		INNER JOIN   DBO.Split(@ProductIds, ',' ) Product ON ( Product.Data = sop.ProductId OR @ProductIds = '' )			 
		INNER JOIN   DBO.Split(@SaleTypeIds, ',' ) SaleTypes ON ( SaleTypes.Data = so.SaleTypeId OR @SaleTypeIds = '' )			 
	
	WHERE  SO.IsRollbacked = 0
		AND sop.EndDate IS NULL 
		AND (@SelectAll = 0 OR (@SelectAll = 1 AND ( DATEDIFF(DAY,CASE WHEN @IsinvoiceDate = 1 THEN SO.TransactionDate ELSE SO.SalePassDate END ,  @FromDate) = 0))
        OR (@SelectAll = 2 AND ( DATEDIFF(DAY,CASE WHEN @IsinvoiceDate = 1 THEN SO.TransactionDate ELSE SO.SalePassDate END ,  @FromDate) <= 0
              AND  DATEDIFF(DAY,CASE WHEN @IsinvoiceDate = 1 THEN SO.TransactionDate ELSE SO.SalePassDate END ,  @ToDate) >= 0)))
		                                              	
		AND((@IsCash=1 AND SO.IsCash=1)  OR (@IsCredit=1 AND SO.IsCash=0)) 
		AND (@BatchNo = '' OR SOP.BatchNumber = @BatchNo)		


		
	UNION ALL
	
	SELECT 
		S.LocationId, 
		'SLN-'+ CONVERT(VARCHAR(10),s.SLNId) AS SaleOrderId,
		s.TransactionDate AS [SO DATE],
		S.TransactionDate AS [SALE DATE],
		NULL AS SaleTypeId, 
		'' [SALE TYPE],			
--		sa.MainAreaId, 
--		SA.SubAreaId,
--		sa.Name AS [Sub Area],
		s.UDLSalesForceId AS [BookerId], 
		s.UDLSalesForceId AS SupplierId,
		s.CustomerId,
--		csa.[Customer Name] AS [Customer],
--		csa.Address AS [Address],
		s.PrincipalBusinessLineId, 
		s2.ProductId, 
		s2.StockTypeId, 
		s2.BatchNumber, 
		pc.TP, 
		CASE WHEN s.IsCash=1 THEN 'CASH' ELSE 'CREDIT' END  AS [SALE NATURE],
		-1*s2.Quantity AS [ORDER Quantity],
		-1*s2.Quantity AS [Invoice Quantity],		
		-1*s2.Quantity * pc.TP  [TP Value],
		-1*S2.OutputTaxAmount AS [Tax],
		-1*(S2.Quantity * pc.TP) + S2.OutputTaxAmount [Amount],		
		CASE WHEN (s2.Quantity * pc.TP) = 0 THEN 0 ELSE (s.DiscountUDLPart + s.DiscountPrincipalPart)/*/(s.TotalTP) END  * 100 */ END AS [Discount],
		CASE WHEN (s2.Quantity * pc.TP) = 0 THEN 0 ELSE (S2.OutputTaxAmount/*/(s2.Quantity * pc.TP)) END * 100 */ ) END AS [Tax],		
		9999999 AS [SO]
	FROM SLN s
		INNER JOIN SLNProduct s2 ON s2.LocationId = s.LocationId AND s2.SLNId = s.SLNId   
--		INNER JOIN uv_CustomerSalesArea csa ON csa.CustomerId=S.CustomerId AND csa.LocationId=S.LocationId
--		INNER JOIN SubArea sa ON sa.SubAreaId=csa.SubAreaId
		INNER JOIN PriceCatalog pc ON  pc.PriceCatalogId=s2.PriceId
		INNER JOIN   DBO.Split(@CompanyIds, ',' ) Company ON ( Company.Data = s.CompanyId OR @CompanyIds = '' )	
		INNER JOIN   DBO.Split(@LocationIds, ',' ) Loc ON  ( Loc.Data = s.LocationId OR @LocationIds = '' )
		INNER JOIN   DBO.Split(@CustomerIds, ',' ) Customer ON ( Customer.Data = s.CustomerId OR @CustomerIds = '' )						
		INNER JOIN   DBO.Split(@PBLIds, ',' ) PBL ON (PBL.Data = s.PrincipalBusinessLineId OR @PBLIds = '' )			 
		INNER JOIN   DBO.Split(@ProductIds, ',' ) Product ON ( Product.Data = s2.ProductId OR @ProductIds = '' )			
--		INNER JOIN   DBO.Split(@MainAreaIds, ',' ) MainArea ON ( MainArea.Data = sa.MainAreaId OR @MainAreaIds = '' )
--		INNER JOIN   DBO.Split(@SubAreaIds, ',' ) SubArea ON ( SubArea.Data = sa.SubAreaId OR @SubAreaIds = '' )
	WHERE s2.Quantity > 0 AND
		(
           @SelectAll = 0
       OR  (
               @SelectAll = 1
          AND  (   
                   DATEDIFF(DAY,s.TransactionDate,  @FromDate) = 0
               )
           )
       OR  (
               @SelectAll = 2
          AND  (
                   DATEDIFF(DAY,s.TransactionDate,  @FromDate) <= 0
              AND  DATEDIFF(DAY,s.TransactionDate,  @ToDate) >= 0
               )
           )
		)	
	
		AND((@IsCash=1 AND s.IsCash=1)  OR (@IsCredit=1 AND s.IsCash=0)) 
		AND (@BatchNo = '' OR s2.BatchNumber = @BatchNo )
		AND s2.IsFree=0
		AND S.IsRollbacked = 0	
)
 AS A 
INNER JOIN  Batch b ON ( b.BatchNumber = A.BatchNumber AND   b.ProductId = A.ProductId )
INNER JOIN  uv_Product up ON  up.ProductId = A.ProductId
INNER JOIN ProductLine pl ON up.ProductLineId = pl.ProductLineId
INNER JOIN  Location l ON  l.LocationId = A.LocationId
INNER JOIN  StockType st ON  st.StockTypeId = A.StockTypeId
INNER JOIN uv_CustomerSalesArea csa ON csa.LocationId=A.LocationId AND csa.CustomerId=A.CustomerId
INNER JOIN   DBO.Split(@MainAreaIds, ',' ) MainArea ON ( MainArea.Data = csa.MainAreaId OR @MainAreaIds = '' )
INNER JOIN   DBO.Split(@SubAreaIds, ',' ) SubArea ON ( SubArea.Data = csa.SubAreaId OR @SubAreaIds = '' )

--TO INCLUDE SPOT AND SHOP SALE 
LEFT JOIN  UDLSalesForce us ON US.UDLSalesForceId = a.BookerId AND ( @BookerStatus = 0 OR ( @BookerStatus = 1 AND ( DATEDIFF(day, us.EffectiveDate,GETDATE())>= 0 AND DATEDIFF(day,GETDATE(), isnull( us.EndDate,GETDATE()+1))> 0))
	OR ( @BookerStatus = 2 AND  DATEDIFF(day,us.EndDate,ISNULL(GETDATE(), GETDATE()+1))>0 ))
LEFT JOIN  UDLSalesForce us1 ON US1.UDLSalesForceId = a.SupplierId AND ( @SupplierStatus = 0 OR ( @SupplierStatus = 1 AND ( DATEDIFF(day, us1.EffectiveDate,GETDATE())>= 0 AND DATEDIFF(day,GETDATE(), isnull( us1.EndDate,GETDATE()+1))> 0))
	OR ( @SupplierStatus = 2 AND  DATEDIFF(day,us1.EndDate,ISNULL(GETDATE(), GETDATE()+1))>0 ))
WHERE
		( @CustStatus = 0 OR ( @CustStatus = 1 AND ( DATEDIFF(day, csa.[Cus Effective Date],GETDATE())>= 0 AND DATEDIFF(day,GETDATE(), isnull( csa.[Cus End Date],GETDATE()+1))> 0))
	OR ( @CustStatus = 2 AND  DATEDIFF(day,csa.[Cus End Date],ISNULL(GETDATE(), GETDATE()+1))>0 ))
	AND  
	( @MAreaStatus = 0 OR ( @MAreaStatus = 1 AND ( DATEDIFF(day, csa.[Main Area EffectiveDate],GETDATE())>= 0 AND DATEDIFF(day,GETDATE(), isnull( csa.[Main Area EndDate],GETDATE()+1))> 0))
	OR ( @MAreaStatus = 2 AND  DATEDIFF(day,csa.[Main Area EndDate],ISNULL(GETDATE(), GETDATE()+1))>0 ))	
	AND  
	( @SAreaStatus = 0 OR ( @SAreaStatus = 1 AND ( DATEDIFF(day, csa.[Sub Area EffectiveDate],GETDATE())>= 0 AND DATEDIFF(day,GETDATE(), isnull( csa.EndDate,GETDATE()+1))> 0))
	OR ( @SAreaStatus = 2 AND  DATEDIFF(day,csa.EndDate,ISNULL(GETDATE(), GETDATE()+1))>0 ))

 	
ORDER  BY   
	L.SequenceId ,
	A.LocationId,
	[Location Name],
	a.[SO DATE],	
	A.CustomerId, 
	csa.[Customer Name],
	A.PrincipalBusinessLineId, 	 	
	A.ProductId
	
	
--DECLARE @PBLWise BIT 
--SET @PBLWise = 1
SELECT [LOCATION NAME], 	
	[SO NO],
	[SO DATE],
	[PERIOD],
	[SALE DATE],
	[CODE],
	[CUSTOMER NAME],
	[ADDRESS],
	[MAIN AREA],
	[SUB AREA],
	[SALE NATURE],
	SaleTypeId,
	[SALE TYPE],	
	[BOOKER],	
	[SUPPLIER],
	[PBL], 
	[PRODUCT LINE],
	[PROD ID], 	
	[PRODUCT NAME], 		
	[BATCH NO],
	[BATCH EXPIRY],
	[ORDER QUANTITY],
	[INVOICE QUANTITY],
	[TP],  
	SUM([TP VALUE]) AS [TP VALUE],
	SUM([Discount Value]) AS [Discount Value], 
	SUM([Tax Value]) AS [Tax Value]
FROM #Temp
GROUP BY 
[LOCATION NAME], 	
	[SO NO],
	[SO DATE] ,
	[PERIOD],
	[SALE DATE],
	[CODE],
	[CUSTOMER NAME],
	[ADDRESS],
	[MAIN AREA],
	[SUB AREA],
	[SALE NATURE],
	SaleTypeId,
	[SALE TYPE],	
	[BOOKER],	
	[SUPPLIER],
	[PBL], 
	[PRODUCT LINE],
	[PROD ID], 	
	[PRODUCT NAME], 		
	[BATCH NO],
	[BATCH EXPIRY],
	[ORDER QUANTITY],
	[INVOICE QUANTITY],
	[TP]
--DROP TABLE #Temp
 
 GO 
/************************************************************
 * Code formatted by SoftTree SQL Assistant � v4.6.12
 * Time: 5/19/2014 11:42:15 AM
 ************************************************************/

DECLARE @CompanyId      INT,
        @LocationIds    NVARCHAR(MAX),
        @PBLIds         NVARCHAR(MAX),
        @SelectAll      INT,
        @FromDate       DATETIME,
        @ToDate         DATETIME,
        @IsConsignment  BIT,
        @IsCommercial   BIT,
        @StockTypeIds   NVARCHAR(MAX)
 
SET @CompanyId = '1'
SET @LocationIds = '11'
SET @PBLIds = '28'
SET @StockTypeIds = ''
SET @SelectAll = '0'
SET @FromDate = ''
SET @ToDate = ''
SET @IsConsignment = ''
SET @IsCommercial = 1
  
SELECT ussl.LocationId,
       ussl.PrincipalBusinessLineId ,
       ussl.ProductId,
       -SUM(ussl.Quantity) [SoldQuantity],
       0 GRNQuantity
       --ussl.TransactionDate AS [Date]
FROM   uv_Sales_SLN ussl
       INNER JOIN PriceCatalog pc
            ON  ussl.PriceId = pc.PriceCatalogId
       INNER JOIN DBO.Split(@PBLIds, ',') PBL
            ON  (PBL.Data = ussl.PrincipalBusinessLineId OR @PBLIds = '')
       INNER JOIN DBO.Split(@LocationIds, ',') Location
            ON  (Location.Data = ussl.LocationId OR @LocationIds = '')
WHERE  @CompanyId = ussl.CompanyId
       AND (
               @SelectAll = 0
               OR (
                      @SelectAll = 1
                      AND (DATEDIFF(DAY, ussl.TransactionDate, @FromDate) = 0)
                  )
               OR (
                      @SelectAll = 2
                      AND (
                              DATEDIFF(DAY, ussl.TransactionDate, @FromDate) <=
                              0
                              AND DATEDIFF(DAY, ussl.TransactionDate, @ToDate) >
                                  = 0
                          )
                  )
           )
GROUP BY
       ussl.LocationId,
       ussl.PrincipalBusinessLineId,
       ussl.ProductId,
       ussl.TransactionDate


UNION ALL

SELECT usso.LocationId,
       usso.PrincipalBusinessLineId ,
       usso.ProductId,
       SUM(usso.SoldQuantity) [SoldQuantity],
       0 GRNQuantity
       --usso.SalePassDate AS [Date]
FROM   uv_Sales_SaleOrder usso
       INNER JOIN DBO.Split(@PBLIds, ',') PBL
            ON  (PBL.Data = usso.PrincipalBusinessLineId OR @PBLIds = '')
       INNER JOIN DBO.Split(@LocationIds, ',') Location
            ON  (Location.Data = usso.LocationId OR @LocationIds = '')
WHERE  @CompanyId = usso.CompanyId
       AND (
               @SelectAll = 0
               OR (
                      @SelectAll = 1
                      AND (DATEDIFF(DAY, usso.SalePassDate, @FromDate) = 0)
                  )
               OR (
                      @SelectAll = 2
                      AND (
                              DATEDIFF(DAY, usso.SalePassDate, @FromDate) <= 0
                              AND DATEDIFF(DAY, usso.SalePassDate, @ToDate) >= 0
                          )
                  )
           )
GROUP BY
       usso.LocationId,
       usso.PrincipalBusinessLineId,
       usso.ProductId,
       usso.SalePassDate

UNION ALL   
 
SELECT g.LocationId,
       G.PrincipalBusinessLineId,
       gp.GRNProductId AS ProductId,
       0 SoldQuantity,
       gp.QuantityReceived AS GRNQuantity--,g.TransactionDate
FROM   GRN g
       INNER JOIN DBO.Split(@LocationIds, ',') l
            ON  (l.Data = g.LocationId OR @LocationIds = '')
       INNER JOIN DBO.Split(@PBLIds, ',') pbl
            ON  (pbl.Data = g.PrincipalBusinessLineId OR @PBLIds = '')
       INNER JOIN GRNProduct gp
            ON  gp.GRNId = g.GRNId
            AND gp.LocationId = g.LocationId
WHERE  @CompanyId = g.CompanyId
       AND (
               @SelectAll = 0
               OR (
                      @SelectAll = 1
                      AND (DATEDIFF(DAY, g.TransactionDate, @FromDate) = 0)
                  )
               OR (
                      @SelectAll = 2
                      AND (
                              DATEDIFF(DAY, g.TransactionDate, @FromDate) <= 0
                              AND DATEDIFF(DAY, g.TransactionDate, @ToDate) >= 0
                          )
                  )
           )
       AND g.IsRollbacked = 0
			
			

 GO 
DECLARE @CompanyId INT, @LocationIds NVARCHAR(200), @PBLIds NVARCHAR(200), @SchemeBasedOn BIT, @SchemeIds NVARCHAR(MAX),  @FromDate DATETIME, @ToDate DATETIME,
@Sharing INT,@DateStatus INT 

SET @CompanyId = '1'
SET @LocationIds = '14'
SET @PBLIds = '40'

SET @SchemeBasedOn = ''
SET @SchemeIds = ''

/*0-All
* 1-Specific
* 2-Between*/
SET @DateStatus = '2'
SET @FromDate = '2013-11-23 00:00:00.000'
SET @ToDate = '2013-11-26 00:00:00.000'

SET @Sharing = ''

SELECT so.SaleOrderId,
	so.SalePassDate,
	so.CustomerId,
	ISNULL(so.CustomerToBeOpenedName , c.[Name]) AS CustomerName,
	sop.PrincipalBusinessLineId,sop.ProductId,sop.SoldQuantity,
	sos.SchemeId , s.[Description] AS [Scheme Description]

FROM 
dbo.SaleOrder so 
INNER JOIN dbo.SaleorderProduct sop ON so.LocationId = sop.LocationId AND so.SaleOrderId = sop.SaleOrderId
INNER JOIN dbo.SaleOrderScheme sos ON so.LocationId = sos.LocationId AND so.SaleOrderId = sos.SaleOrderId
INNER JOIN dbo.[Scheme] s ON sos.SchemeId = s.SchemeId
INNER JOIN dbo.Customer c ON so.LocationId = c.LocationId AND so.CustomerId = c.CustomerId
INNER JOIN DBO.[Split](@LocationIds,',')LOC ON LOC.[Data] = so.LocationId OR @LocationIds = ''
INNER JOIN DBO.[Split](@SchemeIds,',')SI ON SI.[Data] = sos.SchemeId OR @SchemeIds = ''

WHERE so.CompanyId = @CompanyId
AND sop.PrincipalBusinessLineId =@PBLIds
AND (@DateStatus = 0
     OR (@DateStatus = 1 AND so.SalePassDate = @FromDate)
     OR (@DateStatus = 2 AND so.salePassDate BETWEEN @FromDate AND @ToDate))
 GO 
CREATE PROC usp_Report_SalesPromotionDiscount @CompanyId INT, @PBLIds VARCHAR(100), @LocationIds VARCHAR(100), @FromDate DATETIME, @ToDate DATETIME, @SchemeGroupIds VARCHAR(1000), 
@ClaimGroupIds VARCHAR(1000), @SchemeIds VARCHAR(1000), @SharingBy INT, @IncludeReturns BIT, @FromBCGId INT, @ToBCGId INT, @FromBCGDate DATETIME, @ToBCGDate DATETIME, 
@SpecificBCGIds VARCHAR(100) AS

--DECLARE @CompanyId INT, @PBLIds VARCHAR(100), @LocationIds VARCHAR(100), @FromDate DATETIME, @ToDate DATETIME, @SharingBy INT, 
--@IncludeReturns BIT, @SchemeGroupIds VARCHAR(1000), @ClaimGroupIds VARCHAR(1000), @SchemeIds VARCHAR(1000), 
--@FromBCGId INT, @ToBCGId INT, @FromBCGDate DATETIME, @ToBCGDate DATETIME
--SET @CompanyId = 4
--SET @PBLIds = '1'--'1,2,3,10,17,19,20,22,23,24,25'--'27,28,21,22,23,26,29'--
--SET @LocationIds = '32'--'63,64,59,58,62,51,60,54,53,47,50,57'--'2,14,16,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54'
--SET @FromDate = '1900-01-01 00:00:00'--'2011-01-01'
--SET @ToDate = '2013-07-13 00:00:00'
--SET @SharingBy = 0 /*0.)ALL;1.)UDL;2.)PRINCIPAL*/
--SET @IncludeReturns = 1
--SET @SchemeGroupIds = ''--'6,8,11,16,17'
--SET @ClaimGroupIds = ''--'7,9,12,14,16,18'
--SET @SchemeIds = ''--'1,3,4,5,7,8,12,14,15,70,71,75,77,85,86,111,113,114,115,116,117,121,123,124,131,132,133'
--SET @FromBCGId = 142--0
--SET @ToBCGId = 142--999999
--SET @FromBCGDate = '1900-01-01 00:00:00'--'2012-12-08 00:00:00.000'
--SET @ToBCGDate = '2013-07-13 00:00:00'


SELECT so.LocationId,
       so.CustomerId,
       so.CustomerToBeOpenedName,
       so.CustomerToBeOpenedAddress,
       so.CustomerToBeOpenedSubAreaId,
       so.SaleOrderId,
       so.TransactionDate,
       DATEADD(DAY, DATEDIFF(DAY, 0, so.SalePassDate), 0) SalePassDate,
       so.SaleTypeId,
       so.IsCash,
	   s.SchemeGroupId,
	   s.ClaimGroupId,
	   s.SchemeId,
	   s.[Description] [SchemeDescription],
	   s.IsInvoiceBased,
	   bc.BranchClaimId [BCG Id], 
	   bc.TransactionDate [BCG Date],
	   s.PrincipalBusinessLineId,
	   s.AppliedProductId [ProductId],
	   s.AppliedStockTypeId [StockTypeId],
	   SUM(sos.AppliedOnTPValue) AppliedOnTPValue,
	   SUM
	   (
   		sos.Discount * 
		   (
   			(
   				CASE 
   				WHEN @SharingBy = 1 THEN s.UDLPercentage 
   				WHEN @SharingBy = 2 THEN (100 - s.UDLPercentage)
   				ELSE 100 
   				END
   			)/100
		   )
	   ) [Discount]
INTO #TempScheme
	   
FROM SaleOrder so
INNER JOIN SaleOrderScheme sos ON sos.LocationId = so.LocationId AND sos.SaleOrderId = so.SaleOrderId
INNER JOIN Scheme s ON s.SchemeId = sos.SchemeId
INNER JOIN dbo.[Split](@LocationIds, ',') fl ON fl.[Data] = so.LocationId
INNER JOIN dbo.[Split](@PBLIds, ',') fp ON fp.[Data] = s.PrincipalBusinessLineId
INNER JOIN dbo.[Split](@SchemeIds, ',') fs ON (fs.[Data] = s.SchemeId OR @SchemeIds = '')
INNER JOIN dbo.[Split](@SchemeGroupIds, ',') fsg ON (fsg.[Data] = s.SchemeGroupId OR @SchemeGroupIds = '')
INNER JOIN dbo.[Split](@ClaimGroupIds, ',') fsc ON (fsc.[Data] = s.ClaimGroupId OR @ClaimGroupIds = '')
LEFT JOIN BranchClaim bc ON bc.LocationId = sos.LocationId
 AND bc.BranchClaimId = sos.BranchClaimId
INNER JOIN dbo.[Split](@SpecificBCGIds, ',') fbn ON (fbn.[Data] = bc.BranchClaimId OR @SpecificBCGIds = '') 
WHERE so.CompanyId = @CompanyId
AND	(DATEDIFF(DAY, @FromDate, so.SalePassDate) >= 0)
AND (DATEDIFF(DAY, @ToDate, so.SalePassDate) <= 0)	
AND	ISNULL(bc.BranchClaimId, 0) >= @FromBCGId 
AND ISNULL(bc.BranchClaimId, 0) <= @ToBCGId	 
AND	(DATEDIFF(DAY, @FromBCGDate, ISNULL(bc.TransactionDate, '1900-01-01 00:00:00')) >= 0) 
AND (DATEDIFF(DAY, @ToBCGDate, ISNULL(bc.TransactionDate, '1900-01-01 00:00:00')) <= 0)	 
AND s.IsDiscountBased = 1
AND sos.EndDate IS NULL
AND 
(
	@SharingBy = 0
	OR
	(
		@SharingBy = 1 
		AND s.UDLPercentage > 0
	) 
	OR 
	(
		@SharingBy = 2
		AND (100 - s.UDLPercentage) > 0 
	)
)
GROUP BY so.LocationId, so.CustomerId, so.CustomerToBeOpenedName, so.CustomerToBeOpenedAddress, 
so.CustomerToBeOpenedSubAreaId, so.SaleOrderId, so.TransactionDate, DATEADD(DAY, DATEDIFF(DAY, 0, so.SalePassDate), 0), 
so.SaleTypeId, so.IsCash, s.SchemeGroupId, s.ClaimGroupId, s.SchemeId, s.[Description], s.IsInvoiceBased,
bc.BranchClaimId, bc.TransactionDate,
s.PrincipalBusinessLineId, s.AppliedProductId, s.AppliedStockTypeId
HAVING SUM
	   (
   		sos.Discount * 
		   (
   			(
   				CASE 
   				WHEN @SharingBy = 1 THEN s.UDLPercentage 
   				WHEN @SharingBy = 2 THEN (100 - s.UDLPercentage)
   				ELSE 100 
   				END
   			)/100
		   )
	   ) > 0




SELECT l.ShortName [Location],
c.CustomerId [Customer Code], 
ISNULL(a.CustomerToBeOpenedName, c.[Name]) [Customer Name],
ISNULL(a.CustomerToBeOpenedAddress, (c.Address1 + ' ' + c.Address2)) [Customer Address],
ma.[Name] [Customer Main Area],
sa.[Name] [Customer Sub Area],
a.SaleOrderId [Sale Order Id],
a.TransactionDate [Sale Order Date],
a.SalePassDate [Sale Pass Date],
slt.Code [Sale Type],
CASE WHEN a.IsCash = 1 THEN 'CASH' ELSE 'CREDIT' END [Sale Nature],

sg.SchemeGroupId [Scheme Group Id], 
sg.[Name] [Scheme Group Name], 
sg.ShortName [Scheme Group Short Name],
cg.ClaimGroupId [Claim Group Id], 
cg.[Name] [Claim Group Name], 
cg.ShortName [Claim Group Short Name],
a.SchemeId [Scheme Code], 
a.[SchemeDescription] [Scheme Description],
CASE WHEN a.IsInvoiceBased = 1 THEN 'YES' ELSE 'NO' END [Invoice Based],
a.SLNId [SLN Id], 
a.[SLNDate] [SLN Date],

a.[BCG Id],
a.[BCG Date],

pbl.[Name] [PBL],

a.ProductId [Product Code],
up.ShortName [Product Name], 
st.[Name] [Stock Type], 
a.Quantity, 
a.Value [Applied On Value],
a.Discount [Discount Amount],
(a.Discount / a.Value) * 100 [Discount %], 
a.Value - a.Discount [Net Value]

FROM
(
	--SELECT 0 [IsReturn],
	--       so.LocationId,
	--       so.CustomerId,
	--       so.CustomerToBeOpenedName,
	--       so.CustomerToBeOpenedAddress,
	--       so.CustomerToBeOpenedSubAreaId,
	--       so.SaleOrderId,
	--       so.TransactionDate,
	--       so.SalePassDate,
	--       so.SaleTypeId,
	--       so.IsCash,
	--       sc.SchemeGroupId,
	--       sc.ClaimGroupId,
	--       sc.SchemeId,
	--       sc.[SchemeDescription],
	--       NULL SLNId,
	--       NULL [SLNDate],
	--       sc.PrincipalBusinessLineId,
	--       so.ProductId,
	--       so.StockTypeId,
	--       so.Quantity,
	--       so.Value,
	--       so.Discount
	--FROM  #TempScheme so
	--INNER JOIN
	--(
		SELECT 0 [IsReturn],
		       sos.LocationId,
		       sos.CustomerId,
		       sos.CustomerToBeOpenedName,
		       sos.CustomerToBeOpenedAddress,
		       sos.CustomerToBeOpenedSubAreaId,
		       sos.SaleOrderId,
		       sos.TransactionDate,
		       sos.SalePassDate,
		       sos.SaleTypeId,
		       sos.IsCash,
		       sos.SchemeGroupId,
		       sos.ClaimGroupId,
		       sos.SchemeId,
		       sos.[SchemeDescription],
		       sos.IsInvoiceBased,
		       NULL SLNId,
		       NULL [SLNDate],
		       sos.[BCG Id],
		       sos.[BCG Date],
		       sos.PrincipalBusinessLineId,
		       NULL ProductId,
		       NULL StockTypeId,
		       NULL Quantity,
		       sos.AppliedOnTPValue VALUE,
		       sos.Discount
		FROM #TempScheme sos
		WHERE sos.IsInvoiceBased = 1

		UNION ALL
					   
		SELECT 0 [IsReturn],
		       sos.LocationId,
		       sos.CustomerId,
		       sos.CustomerToBeOpenedName,
		       sos.CustomerToBeOpenedAddress,
		       sos.CustomerToBeOpenedSubAreaId,
		       sos.SaleOrderId,
		       sos.TransactionDate,
		       sos.SalePassDate,
		       sos.SaleTypeId,
		       sos.IsCash,
		       sos.SchemeGroupId,
		       sos.ClaimGroupId,
		       sos.SchemeId,
		       sos.[SchemeDescription],
		       sos.IsInvoiceBased,
		       NULL SLNId,
		       NULL [SLNDate],
		       sos.[BCG Id],
		       sos.[BCG Date],
		       sos.PrincipalBusinessLineId,
		       sop.ProductId,
		       sop.StockTypeId,
		       sop.Quantity,
		       sop.Value,
		       sos.Discount
		--SUM(sop.Quantity) Quantity, SUM(sop.Value) Value, SUM(sos.Discount) Discount
		FROM 
		(
			SELECT sop1.LocationId, sop1.SaleOrderId, sop1.ProductId, sop1.StockTypeId, SUM(sop1.SoldQuantity) Quantity, SUM(sop1.SoldQuantity * sop1.TP) VALUE--, SUM(sop1.Discount) Discount
			FROM SaleOrderProduct sop1
			WHERE sop1.EndDate IS NULL
			GROUP BY sop1.LocationId, sop1.SaleOrderId, sop1.ProductId, sop1.StockTypeId
		)
		sop 
		INNER JOIN #TempScheme sos ON sos.LocationId = sop.LocationId
		 AND sos.SaleOrderId = sop.SaleOrderId
		 AND sos.ProductId = sop.ProductId
		 AND sos.StockTypeId = sop.StockTypeId
		WHERE sos.IsInvoiceBased = 0 

		UNION ALL

		SELECT 1 [IsReturn],
			   s.LocationId,
			   s.CustomerId,
			   NULL CustomerToBeOpenedName,
			   NULL CustomerToBeOpenedAddress,
			   NULL CustomerToBeOpenedSubAreaId,
			   s.SaleOrderId,
			   so.TransactionDate,
			   so.SalePassDate,
			   so.SaleTypeId,
			   s.IsCash,
			   NULL SchemeGroupId,
			   NULL ClaimGroupId,
			   NULL SchemeId,
			   NULL [SchemeDescription],
			   0 IsInvoiceBased,
			   s.SLNId,
			   s.TransactionDate [SLNDate],
			   bc.BranchClaimId [BCG Id],
		       bc.TransactionDate [BCG Date],
			   s.PrincipalBusinessLineId,
			   s2.ProductId,
			   s2.StockTypeId,
			   -SUM(s2.Quantity) Quantity,
			   -SUM(s2.Quantity * pc.TP) VALUE,
			   -
			   (
   				--SUM
				   (
					   CASE 
							WHEN @SharingBy = 1 THEN s.DiscountUDLPart
							WHEN @SharingBy = 2 THEN s.DiscountPrincipalPart
							ELSE (s.DiscountUDLPart + s.DiscountPrincipalPart)
					   END
				   )
				   /
				   (SELECT COUNT(*) FROM SLNProduct s3 WHERE s3.LocationId = s.LocationId AND s3.SLNId = s.SLNId AND s3.Quantity > 0 AND s3.IsFree = 0) 
			   ) [Discount]
		FROM SLN s
		INNER JOIN SLNProduct s2 ON s2.LocationId = s.LocationId 
		 AND s2.SLNId = s.SLNId
		INNER JOIN PriceCatalog pc ON pc.PriceCatalogId = s2.PriceId 
		INNER JOIN dbo.[Split](@LocationIds, ',') fl ON fl.[Data] = s.LocationId
		INNER JOIN dbo.[Split](@PBLIds, ',') fp ON fp.[Data] = s.PrincipalBusinessLineId
		LEFT JOIN SaleOrder so ON so.LocationId = s.LocationId
		 AND so.SaleOrderId = s.SaleOrderId
		LEFT JOIN
		(
			SELECT DISTINCT bc.LocationId, bc.BranchClaimId, bc.TransactionDate, bcbd.SLNId 
			FROM BranchClaimBonusDiscount bcbd
			INNER JOIN BranchClaim bc ON bc.LocationId = bcbd.LocationId AND bc.BranchClaimId = bcbd.BranchClaimId
			INNER JOIN dbo.[Split](@SpecificBCGIds, ',') fbn ON (fbn.[Data] = bc.BranchClaimId OR @SpecificBCGIds = '')
			WHERE ISNULL(bcbd.SLNId, 0) > 0
			AND bcbd.ClaimAmount != 0
			AND bc.IsRollbacked = 0	
		) bc ON bc.LocationId = S.LocationId
		 AND bc.SLNId = S.SLNId 
		WHERE s.CompanyId = @CompanyId
		AND	(DATEDIFF(DAY, @FromDate, s.ApprovalDate) >= 0)
		AND (DATEDIFF(DAY, @ToDate, s.ApprovalDate) <= 0)
		AND	ISNULL(bc.BranchClaimId, 0) >= @FromBCGId 
		AND ISNULL(bc.BranchClaimId, 0) <= @ToBCGId	 
		AND	(DATEDIFF(DAY, @FromBCGDate, ISNULL(bc.TransactionDate, '1900-01-01 00:00:00')) >= 0) 
		AND (DATEDIFF(DAY, @ToBCGDate, ISNULL(bc.TransactionDate, '1900-01-01 00:00:00')) <= 0)	 
		AND @IncludeReturns = 1
		AND s2.IsFree = 0
		AND 
			(
				(
					@SharingBy = 0
					AND (ISNULL(s.DiscountUDLPart, 0) > 0 OR ISNULL(s.DiscountPrincipalPart, 0) > 0)
				)
				OR
				(
					@SharingBy = 1 
					AND ISNULL(s.DiscountUDLPart, 0) > 0
				) 
				OR 
				(
					@SharingBy = 2
					AND ISNULL(s.DiscountPrincipalPart, 0) = 0 
				)
			)
		GROUP BY s.LocationId,
			   s.CustomerId,
			   s.SaleOrderId,
			   so.TransactionDate,
			   so.SalePassDate,
			   so.SaleTypeId,
			   s.IsCash,
			   s.SLNId,
			   s.TransactionDate,
			   bc.BranchClaimId,
		       bc.TransactionDate,
			   s.PrincipalBusinessLineId,
			   s2.ProductId,
			   s2.StockTypeId,
			   s.DiscountUDLPart,
			   s.DiscountPrincipalPart
		HAVING SUM(s2.Quantity) > 0
) A
INNER JOIN Location l ON l.LocationId = a.LocationId
INNER JOIN Customer c ON c.LocationId = a.LocationId
 AND c.CustomerId = a.CustomerId
INNER JOIN uv_CustomerSalesArea csa ON csa.LocationId = A.LocationId 
 AND csa.CustomerId = A.CustomerId 
INNER JOIN SubArea sa ON sa.SubAreaId = ISNULL(a.CustomerToBeOpenedSubAreaId, csa.SubAreaId)
INNER JOIN MainArea ma ON ma.MainAreaId = sa.MainAreaId 
INNER JOIN uv_PrincipalBusinessLine_All pbl ON pbl.PrincipalBusinessLineId = a.PrincipalBusinessLineId

LEFT JOIN uv_Product up ON up.ProductId = a.ProductId
LEFT JOIN StockType st ON st.StockTypeId = a.StockTypeId
  
LEFT JOIN SaleType slt ON slt.SaleTypeId = a.SaleTypeId
LEFT JOIN SchemeGroup sg ON sg.SchemeGroupId = a.SchemeGroupId
LEFT JOIN ClaimGroup cg ON cg.ClaimGroupId = a.ClaimGroupId

ORDER BY ISNULL(l.SequenceId, 9999 + L.LocationId), c.CustomerId, a.[IsReturn], a.SaleOrderId, a.SchemeId, a.SLNId

DROP TABLE #TempScheme

 GO 

--CREATE PROC usp_Report_PaidDCReport @LocationIds varchar(100),@SupplierIds varchar(100),@SaleTypeIds varchar(100),@FromDate datetime,
--@ToDate datetime,@DCSelectAll int,@DCRange varchar(1000), @FromDCID varchar(100), @ToDCID varchar(100)
--AS 

DECLARE  @LocationIds  varchar(1000),@SupplierIds  varchar(1000),@SaleTypeIds  varchar(1000),@FromDate datetime, @ToDate datetime,@DCSelectAll int,
@DCRange varchar(1000), @FromDCID varchar(100), @ToDCID varchar(100)

SET @LocationIds='14'
SET @SupplierIds=''
SET @SaleTypeIds=''
SET @FromDate='2012-07-20'
SET @ToDate='2014-01-20'
SET @DCSelectAll=0
SET @DCRange = '1'
SET @FromDCID = '1'
SET @ToDCID = '9999'

--SELECT    st.Code AS [Sale Type],
--		A.LocationId, 
--		l.ShortName AS [Location Name],
--		A.DeliveryChallanId AS [DC No], 
--		CONVERT(varchar(12),A.TransactionDate,103)  AS [DC Date],
--		CONVERT(varchar(12),A.ExpectedReturnDate,103) AS [ExpectedReturnDate], 
--		A.[Payment Id],-- AS [Payment Id], 
--		CONVERT(varchar(12),A.[Payment Date],103) AS [Payment Date], 
--		A.SupplierId,
--		us.Name AS [Supplier Name],		
--		sop.PrincipalBusinessLineId,
--		up.PBLShortName AS [PBL Name],
--		sop.ProductId,
--		up.Name AS [Product Name],
--		sop.StockTypeId,st2.Name AS [Stock Type],
--		sum(sop.SoldQuantity) AS SoldQuantity,
--		sum(sop.TP*sop.SoldQuantity) AS [TP Value],
--		sum(sop.Discount) AS [Discount],
--		sum(sop.TotalOutputTaxGST+sop.TotalOutputTaxOther) AS [Tax],
--		sum(A.TotalNet) TotalNet,
--		sum((sop.TP*sop.SoldQuantity)-sop.Discount +(sop.TotalOutputTaxGST+sop.TotalOutputTaxOther)) AS [Total-SOP]
SELECT *		
FROM    
(
	
	SELECT dc.LocationId,
		dc.DeliveryChallanId,
	    dc.TransactionDate,
		dc.ExpectedReturnDate, 
		CSP.TransactionDate AS [Payment Date],
		csp.CashSalePaymentId AS [Payment Id], 
		csp.IsApproved,
		csp.IsRollbacked, 
		dc.SupplierId,
		DC.TotalNet
	FROM DeliveryChallan dc 
	INNER JOIN CashSalePayment csp ON csp.LocationId = dc.LocationId AND csp.DeliveryChallanId = dc.DeliveryChallanId 
	--INNER JOIN Location l ON l.LocationId = dc.LocationId
	INNER JOIN DBO.Split(@LocationIds, ',') LOC ON   (LOC.Data = dc.LocationId OR @LocationIds = '')
	INNER JOIN DBO.Split(@SaleTypeIds, ',') SaleType ON   (SaleType.Data = dc.SaleTypeId OR @SaleTypeIds = '')
	INNER JOIN DBO.Split(@SupplierIds, ',') UDLSupplier ON (UDLSupplier.Data = dc.SupplierId OR @SupplierIds = '')
	WHERE   csp.IsRollbacked = 0
	--AND csp.IsApproved=1
	AND 
	  (
		@DCSelectAll = 0
		OR (@DCSelectAll = 2 AND ((@FromDCID = '0' OR  DC.DeliveryChallanId >= @FromDCID) AND  (@ToDCID = '0' OR  DC.DeliveryChallanId <= @ToDCID)))
		OR (@DCSelectAll = 1 AND  DC.DeliveryChallanId IN (SELECT S.DATA FROM   DBO.Split(@DCRange, ',') S))
	  ) 
	AND (@FromDate='' OR  DATEDIFF(DAY, csp.TransactionDate,  @FromDate) <= 0)
	AND (@ToDate='' OR  DATEDIFF(DAY, csp.TransactionDate,  @ToDate) >= 0)

	UNION ALL 

	SELECT dc.LocationId,
			dc.DeliveryChallanId,
			DC.TransactionDate,
			DC.ExpectedReturnDate,
			CSP.TransactionDate  AS [Payment Date],
			csp.CashSalePaymentId AS [Payment Id], 
			csp.IsApproved,
			csp.IsRollbacked, 
			dc.SupplierId,
			dc.TotalNet
	FROM DeliveryChallan dc 
	INNER JOIN CashSalePaymentShopSale cspss ON cspss.LocationId = dc.LocationId AND cspss.DeliveryChallanId = dc.DeliveryChallanId
	INNER JOIN CashSalePayment csp ON csp.LocationId = cspss.LocationId AND csp.CashSalePaymentId  = cspss.CashSalePaymentId
	--INNER JOIN Location l ON l.LocationId = dc.LocationId
	INNER JOIN DBO.Split(@LocationIds, ',') LOC ON   (LOC.Data = dc.LocationId OR @LocationIds = '')
	INNER JOIN DBO.Split(@SaleTypeIds, ',') SaleType ON   (SaleType.Data = dc.SaleTypeId OR @SaleTypeIds = '')
	WHERE   csp.IsRollbacked = 0
	--AND csp.IsApproved=1
	AND 
	  (
		@DCSelectAll = 0
		OR (@DCSelectAll = 2 AND ((@FromDCID = '0' OR  DC.DeliveryChallanId >= @FromDCID) AND  (@ToDCID = '0' OR  DC.DeliveryChallanId <= @ToDCID)))
		OR (@DCSelectAll = 1 AND  DC.DeliveryChallanId IN (SELECT S.DATA FROM   DBO.Split(@DCRange, ',') S))
	  ) 
	AND (@FromDate='' OR  DATEDIFF(DAY, csp.TransactionDate,  @FromDate) <= 0)
	AND (@ToDate='' OR  DATEDIFF(DAY, csp.TransactionDate,  @ToDate) >= 0)
) A
		INNER JOIN   SaleOrder so ON   so.LocationId = a.LocationId 
		AND   so.DeliveryChallanId = a.DeliveryChallanId
		INNER JOIN   SaleOrderProduct sop ON   sop.LocationId = so.LocationId 
		AND   sop.SaleOrderId = so.SaleOrderId
		
		INNER JOIN SaleType st ON st.SaleTypeId = so.SaleTypeId
		INNER JOIN uv_Product up ON up.ProductId = sop.ProductId
		INNER JOIN StockType st2 ON st2.StockTypeId = sop.StockTypeId
		--INNER JOIN Location l ON l.LocationId = A.LocationId	
		LEFT  JOIN UDLSalesForce us ON us.LocationId = a.LocationId 
		AND us.UDLSalesForceId = a.SupplierId	
		WHERE sop.EndDate IS NULL
		
--GROUP BY
--		a.LocationId,  l.ShortName,l.SequenceId,
--		a.DeliveryChallanId,
--		a.TransactionDate,
--		a.ExpectedReturnDate, 
--		a.[Payment Id], 
--		a.IsApproved,
--		a.IsRollbacked,
--		A.[Payment Date], 
--		a.SupplierId,
--		sop.PrincipalBusinessLineId,
--		up.PBLShortName,
--		sop.ProductId,
--		up.Name,
--		sop.StockTypeId,st2.Name,
--		us.Name,
--		st.Code
		
--		ORDER BY l.SequenceId
 GO 
SELECT s.SICId
	,s.PrincipalBusinessLineId
	,sp.SICProductId
	,sp.Quantity
  FROM SIC s inner join SICProduct sp on s.LocationId = sp.LocationId AND s.SICId = sp.SICId
  INNER JOIN SICType sict ON s.SICTypeId= sict.SICTypeId
  INNER JOIN StockType st ON st.StockTypeId = s.ToStockTypeId
  INNER JOIN uv_product up ON up.ProductId = sp.ProductId
  INNER JOIN batch b ON b.ProductId = sp.ProductId AND b.BatchNumber = sp.BatchNumber
--INNER JOIN PriceCatalog pc ON pc.PriceCatalogId = sp.PriceId
--INNER JOIN Location l ON l.LocationId = s.LocationId
  WHERE s.locationid = 14 AND s.PrincipalBusinessLineId = 3
  SELECT * FROM SICProduct s WHERE s.SICId = 18
  SELECT * FROM sic WHERE LocationId = 14 AND PrincipalBusinessLineId = 3 AND IsRollbacked = 0
 GO 
--SELECT so.LocationId,so.SaleorderId,so.TotalNet AS SOAmount,SUM((sop.SoldQuantity * sop.TP)+(sop.TP/(sop.WHTRate*100))) AS SOProductAmount
--FROM Saleorder so 
--INNER JOIN SaleOrderProduct sop 
--	ON so.locationId = sop.LocationId
--	AND so.SaleOrderId = sop.SaleOrderId
--INNER JOIN PriceCatalog pc 
--	ON pc.PriceCatalogId = sop.PriceId
--WHERE   so.IsRollbacked = 0 
--		AND sop.SoldQuantity > 0
--		AND so.SalePassDate IS NOT NULL 
--		AND sop.EndDate IS  NULL
--		AND sop.WHTRate > 0 
--GROUP BY so.LocationId,so.SaleOrderId,so.TotalNet,sop.TP,sop.WHTRate
--HAVING  sum(so.TotalNet) <> SUM((sop.SoldQuantity * sop.TP)+ (sop.TP/(sop.WHTRate*100)))

SELECT * FROM (
SELECT sln.LocationId,sln.SLNId,sln.TransactionDate,sln.TotalNet as SLNAmount,SUM(sln.Quantity * pc.TP) AS SLNProductAmount,(sln.TotalNet+sln.DiscountUDLPart+sln.DiscountPrincipalPart) - SUM((sln.Quantity * pc.TP)+sln.OutputTaxAmount)  AS AmountDiff
FROM uv_sales_SLN sln 
INNER JOIN PriceCatalog pc 
	ON pc.PriceCatalogId = sln.PriceId
WHERE   sln.IsRollbacked = 0 
		AND sln.Quantity > 0 
		--AND locationId = 36 AND SLNID = 6
GROUP BY sln.LocationId,sln.SLNId,sln.TransactionDate,sln.TotalNet,sln.DiscountUDLPart,sln.DiscountPrincipalPart
)
a
WHERE a.AmountDiff>1
ORDER BY a.LocationId,a.SLNId

SELECT * FROM uv_Sales_SLN uss WHERE locationId = 12 AND SLNID = 18 
 GO 
/************************************************************
 * Code formatted by SoftTree SQL Assistant � v4.6.12
 * Time: 6/18/2014 11:06:23 AM
 ************************************************************/

DECLARE @FromDate     DATETIME,
        @ToDate       DATETIME,
        @IsCash       BIT,
        @IsCredit     BIT,
        @LocationIds  NVARCHAR(MAX),
        @PBLIds       NVARCHAR(MAX),
        @CustomerIds  NVARCHAR(MAX),
        @MainAreaIds  nvarchar(MAX),
        @SubAreaIds   NVARCHAR(MAX),
        @Product      NVARCHAR(MAX),
        @CompanyId    INT,
        @SaleTpyeIds  VARCHAR(50)

SET @FromDate = '2014-06-01'
SET @ToDate = '2014-06-17'
SET @IsCash = 1
SET @IsCredit = 1

SELECT l.ShortName,
       l.Name,
       l.SequenceId,
       sln.CustomerId,
       ucsa.[Customer Name],
       ucsa.[Sub Area],
       ucsa.[Main Area],
       sln.ProductId,
       up.Name AS ProductName,
       sln.PrincipalBusinessLineId,
       sln.PriceId,
       sln.Quantity,
       pc.TP,
       sln.Quantity * pc.TP AS [TP VALUE],
       sln.SLNId,
       sln.CompanyId
FROM   uv_Sales_SLN AS sln
       INNER JOIN Location AS l
            ON  sln.LocationId = l.LocationId
       INNER JOIN uv_CustomerSalesArea AS ucsa
            ON  sln.CustomerId = ucsa.CustomerId
       INNER JOIN uv_Product AS up
            ON  sln.ProductId = up.ProductId
            AND sln.PrincipalBusinessLineId = up.PrincipalBusinessLineId
       INNER JOIN PriceCatalog AS pc
            ON  sln.PriceId = pc.PriceCatalogId
WHERE  (sln.IsCash = 1 AND @IsCash = 1) OR (sln.IsCash = 0 AND @IsCredit = 1)
       AND (sln.IsRollbacked = 0)
       AND DATEDIFF(d, sln.TransactionDate, @FromDate) >= 0
       AND DATEDIFF(d, sln.TransactionDate, @ToDate) <= 0 
ORDER BY l.SequenceId,ucsa.MainAreaId,ucsa.SubAreaId,ucsa.CustomerId

 GO 
SELECT * FROM saleorder so 
WHERE locationid = 11 
	AND customerid = 8170
	AND saleorderid = 7
----------------------------
SELECT * FROM customer
WHERE customerid = 8170
	AND locationid = 11
----------------------------
SELECT * 
FROM saleorder so
WHERE so.LocationId = 11
	AND so.CustomerId = 6678
----------------------------
SELECT * 
FROM Creditcollection cc
WHERE cc.locationid = 11 
	AND	cc.CreditCollectionId = 6
 GO 
SELECT * FROM Resource
SELECT * FROM resource r WHERE r.resourceid = 685
SELECT * FROM resource r WHERE r.ParentId = 542 ORDER BY r.SortOrderNo

SELECT * FROM Privilege p

--UPDATE resource 
--SET [Type] = 'REPORTS', [Name] = 'Gross Sale and Gross &Margin'
--WHERE ResourceId = 685
 GO 
INSERT INTO [DBSV2_Live].[dbo].[Resource]
           ([FormFileName]
           ,[Name]
           ,[Code]
           ,[ParentId]
           ,[Type]
           ,[Depth]
           ,[SortOrderNo]
           ,[ShowInMenu]
           ,[ShortcutKey]
           ,[SeperatorInMenu]
           ,[IsStockReleatedScreen]
           ,[IsCustomerReleatedScreen]
           ,[IsConsignment]
           ,[IsCommercial]
           ,[IsUsageLoggingRequired]
           ,[ModuleId]
           ,[Parameter]
           ,[AllowDuringDayCycleOnly]
           ,[OnLoadBehaviorId]
           ,[OnSaveBehaviorId]
           ,[AllowProductOnes]
           ,[InsertDate]
           ,[InsertedBy]
           ,[UpdateDate]
           ,[UpdatedBy]
           ,[ToSend]
           ,[CommunicationId])
     VALUES(
           'frmGrossSaleAndGrossMargin'
           ,'Gross Sale and Gross Margin'
           ,'R174-'
           ,542
           ,'REPORT'
           ,3
           ,13
           ,1
           ,NULL
           ,0
           ,0
           ,0
           ,1
           ,1
           ,0
           ,6
           ,NULL
           ,0
           ,2
           ,2
           ,0
           ,'2013-05-18 14:17:33.697'
           ,1
           ,NULL
           ,0
           ,1
           ,NULL)
GO



 GO 
SELECT SUM(sop.SoldQuantity),sum(so.TotalOutputTax)
FROM saleorder so 
  INNER JOIN SaleOrderProduct sop  on so.locationid= sop.LocationId AND so.saleorderid = sop.SaleOrderId
  --INNER JOIN SaleOrderTax sot ON so.LocationId = sot.LocationId AND so.SaleOrderId = sot.SaleOrderId
  --INNER JOIN ProductTax pt ON sot.ProductTaxId =pt.ProductTaxId AND sop.ProductId = pt.ProductId 
  --INNER JOIN Tax t ON pt.TaxId = t.TaxId
WHERE so.LocationId = 11 AND sop.ProductId = 993 AND so.SalePassDate BETWEEN '2014-04-01 00:00:00.000' AND '2014-04-15 23:59:00.000'

SELECT slnp.productId,SUM(slnp.Quantity),SUM(slnp.InputTaxAmount),SUM(slnp.OutputTaxAmount)
FROM SLN sln 
  INNER JOIN SLNProduct slnp  on sln.locationid= slnp.LocationId AND sln.SLNID= slnp.SLNID
  --INNER JOIN SaleOrderTax sot ON sln.LocationId = sot.LocationId AND sln.SaleOrderId = slnp.SaleOrderId
  --INNER JOIN ProductTax pt ON sot.ProductTaxId =pt.ProductTaxId AND sop.ProductId = pt.ProductId 
  --INNER JOIN Tax t ON pt.TaxId = t.TaxId
WHERE sln.IsRollbacked = 0 and sln.TransactionDate BETWEEN '2014-04-01 00:00:00.000' AND '2014-04-15 23:59:00.000'
GROUP BY slnp.ProductId
HAVING SUM(slnp.InputTaxAmount)> 0 Or SUM(slnp.OutputTaxAmount)>0 

SELECT up.PrincipalBusinessLineId FROM uv_Product up WHERE up.ProductId IN (1523
,1977
,1978
,2161
,2465
,2520
,2526
,2527
,2532
,2545
,2546
,2549
,2555
,2556
,2561
,2566
,2577
,2578
,2698
,2701)




SELECT * FROM uv_Product up WHERE up.ProductId = 2545

 GO 
SELECT * FROM INFORMATION_SCHEMA.TABLES t
WHERE t.table_NAME LIKE '%inter%Branch%'
ORDER BY t.TABLE_NAME

SELECT * FROM InterBranchCollection 
SELECT * FROM InterBranchCollectionSaleOrder


SELECT * FROM SnDInterBranchCollection sdbc
 GO 
SELECT * FROM saleorder so WHERE so.LocationId = 14 AND so.SaleTypeId = (SELECT st.saletypeId FROM SaleType st WHERE st.Code = 'SPL')
SELECT * FROM SaleOrderProduct sop WHERE sop.LocationId = 14 AND sop.SaleOrderId = 2156

SELECT * FROM saleorder so --WHERE so.LocationId = 14 AND so.SaleTypeId = (SELECT st.saletypeId FROM SaleType st WHERE st.Code = 'SPL')) 
inner join saleorderscheme sos ON so.locationid = sos.locationid AND  so.saleorderid = sos.saleorderId
INNER JOIN SCHEME s ON sos.schemeId = s.SchemeId 
WHERE sos.locationid = 14 and s.IsDiscountBased = 0 AND s.IsInvoiceBased = 0 AND s.IsMBI=0 

SELECT * FROM schemeDetail sd WHERE sd.appliedQuantity <5 AND sd.appliedQuantity >0

SELECT * FROM saleorder so inner join saleorderscheme sos 
on so.locationid= sos.locationid and sos.saleorderid = so.saleorderid
INNER JOIN SCHEME s ON sos.schemeId = s.schemeId   
WHERE so.locationid = 14 AND so.deliverychallanId =251--IN (88,158,251,255)

SELECT * FROM SaleOrderProduct sop WHERE sop.LocationId = 14 AND sop.SaleOrderId = 251
 GO 
DECLARE @FromDate DATETIME, @ToDate DATETIME
SET @FromDate = '2009-12-26 00:00:00.000'--'2013-11-01 00:00:00'
SET @ToDate = '2011-01-01 23:59:59.000'

--/*NO CRITERIA*/
--SELECT * FROM SaleOrder so
--INNER JOIN SaleOrderProduct sop ON sop.LocationId = so.LocationId
--AND sop.SaleOrderId = so.SaleOrderId

--/*DATEDIFF*/
--SELECT * FROM SaleOrder so
--INNER JOIN SaleOrderProduct sop ON sop.LocationId = so.LocationId
--AND sop.SaleOrderId = so.SaleOrderId
--WHERE DATEDIFF(DAY, so.SalePassDate,  @FromDate) <= 0
--AND  DATEDIFF(DAY, so.SalePassDate,  @ToDate) >= 0

/*BETWEEN*/
SELECT * FROM SaleOrder so
INNER JOIN SaleOrderProduct sop ON sop.LocationId = so.LocationId
AND sop.SaleOrderId = so.SaleOrderId
WHERE so.SalePassDate BETWEEN @FromDate AND @ToDate



CHECKPOINT; 
GO 
DBCC DROPCLEANBUFFERS; 
GO
DBCC FREEPROCCACHE
GO

 GO 
--usp_Report_SNDOpeningBalance

--exec usp_Report_SNDOpeningBalance 5,58,29
CREATE PROC dbo.usp_Report_SNDOpeningBalance @CompanyId int, @LocationId int,@SNDID int
AS

Declare		@PreviousSNDID		numeric(5,0),
			@PreviousSndToDate	datetime,
			@OB_DD				numeric(15,2)
	
SELECT @PreviousSNDID = MAX(sndid),
		@PreviousSndToDate = ISNULL(MAX(s.ToDate), (SELECT MIN(sd.ToDate) FROM SnD sd WHERE sd.CompanyId = @CompanyId  
AND sd.LocationId = @LocationId AND sd.RollbackDate IS NULL))
FROM snd s WHERE s.CompanyId = @CompanyId  
AND s.LocationId=@LocationId AND s.SnDId < @SNDID AND s.RollbackDate IS NULL


--Create temp table
CREATE TABLE #TempSNDOpeningBalance (CompanyID numeric(9,0),LocationID numeric(9,0),SNDID numeric(9,0),
								Cash numeric(15,2),Cheque numeric(15,2),Vault numeric(15,2),DD_PO numeric(15,2),TC numeric(15,2),OtherDocument numeric(15,2)
								,BalanceDeposited numeric(15,2),BankBalance numeric(15,2),TotalBankBalance numeric(15,2),
								ReturnDocument numeric(15,2),BankCharges numeric(15,2),Shortage numeric(15,2),DirectlyRemitted numeric(15,2),
								Customer_ADJ numeric(15,2), OS_ADV_ADJ numeric(15,2), SLN_ADJ numeric(15,2), CN_ADJ numeric(15,2),
								WHT_ADJ numeric(15,2), IBC_ADJ numeric(15,2), ROUNDOFF numeric(15,2))


--Working for opening balance
--===========================
--Cash and Vault
INSERT INTO #TempSNDOpeningBalance (CompanyID,LocationID,SNDID,Cash,Vault)
(
SELECT	@CompanyId,@LocationId,@SNDID,
		OpeningBalanceSafe,OpeningBalanceVault 
FROM	SnD s inner JOIN SnDCashDetail scd ON s.LocationId = scd.LocationId AND s.SnDId = scd.SnDId
WHERE	s.CompanyId=@CompanyId AND s.LocationId=@LocationId AND s.SnDId=@SNDID AND s.RollbackDate IS NULL
)


--CHEQUE,DD_PO,TC,OTHER
INSERT INTO #TempSNDOpeningBalance (CompanyID,LocationID,SNDID,CHEQUE,DD_PO,TC,OtherDocument)
(
SELECT	@CompanyId,@LocationId,@SNDID,
		ISNULL(sum((CASE WHEN pm.typecode='CHQ' AND sdm.Type='D' THEN sdm.Amount ELSE 0 END)),0) AS CHEQUE,
		ISNULL(sum((CASE WHEN pm.typecode IN ('DD','PO') AND sdm.Type='D' THEN sdm.Amount ELSE 0 END)),0) AS DD,
		ISNULL(sum((CASE WHEN pm.typecode IN ('TC') AND sdm.Type='D' THEN sdm.Amount ELSE 0 END)),0) AS TC,
		ISNULL(sum((CASE WHEN pm.typecode NOT IN ('TC','CHQ','DD','PO','TC') AND sdm.Type='D' THEN sdm.Amount ELSE 0 END)),0) AS OTHER

FROM snd s
		INNER JOIN SnDBankDocMovement sdm ON sdm.LocationId = s.LocationId AND sdm.SnDId = s.SnDId
		INNER JOIN PaymentTransaction pt ON pt.LocationId = sdm.LocationId AND pt.PaymentTransactionId = sdm.PaymentTransactionId
		INNER JOIN PaymentMode pm ON pm.PaymentModeId=pt.PaymentModeId
WHERE	s.CompanyId=@CompanyId and	s.LocationId=@LocationId AND s.SnDId < @SNDID AND (sdm.DepositedSnDId >=@SNDID OR sdm.DepositedSnDId IS null) 
		AND s.RollbackDate IS null
)

--DD_PO,TC,OTHER (Other Doc Remit to HO)
INSERT INTO #TempSNDOpeningBalance (CompanyID,LocationID,SNDID,DD_PO,TC,OtherDocument)
(
SELECT @CompanyId,@LocationId,@SNDID,
		ISNULL(sum((CASE WHEN pm.typecode IN ('DD','PO') THEN v.AdjustedAmount ELSE 0 END)),0) AS DD,
		ISNULL(sum((CASE WHEN pm.typecode IN ('TC') THEN v.AdjustedAmount ELSE 0 END)),0) AS TC,
		ISNULL(sum((CASE WHEN pm.typecode NOT IN ('TC','DD','PO') THEN v.AdjustedAmount ELSE 0 END)),0) AS OTHER 
FROM snd s
		INNER JOIN uv_SNDPaymentTransaction v ON v.CompanyId=s.CompanyId AND  v.LocationId = s.LocationId AND v.SnDId = s.SnDId 
INNER JOIN PaymentTransaction pt ON pt.CompanyId = v.CompanyId AND pt.LocationId = v.LocationId AND pt.PaymentTransactionId = v.PaymentTransactionId
INNER JOIN PaymentMode pm ON pm.PaymentModeId = pt.PaymentModeId
WHERE  s.CompanyId=@CompanyId and	s.LocationId=@LocationId AND s.SnDId < @SNDID AND pm.IsToBeRemitted=1 AND s.RollbackDate IS null
AND Not exists (SELECT PaymentTransactionId FROM SnDRemittanceOtherDoc sdod  INNER JOIN SnD sdo ON sdo.LocationId = sdod.LocationId AND sdo.SnDId = sdod.SnDId
                WHERE  sdod.LocationId=v.LocationId and v.PaymentTransactionId=sdod.PaymentTransactionId   AND sdod.SnDId < @SNDID  AND sdo.RollbackDate IS null)
)

--CASH DD OB
INSERT INTO #TempSNDOpeningBalance (CompanyID,LocationID,SNDID,DD_PO)
(
SELECT	@CompanyId,@LocationId,@SNDID,
		ISNULL(sum(sdd.Amount),0)
FROM snd s
		INNER JOIN SnDCashDD sdd ON sdd.LocationId = s.LocationId AND sdd.SnDId = s.SnDId
WHERE	s.CompanyId=@CompanyId and	s.LocationId=@LocationId AND s.SnDId < @SNDID  AND s.RollbackDate IS null
)
--BANK DD OB
INSERT INTO #TempSNDOpeningBalance (CompanyID,LocationID,SNDID,DD_PO)
(
SELECT	@CompanyId,@LocationId,@SNDID,
		ISNULL(sum(sdd.Amount),0)
FROM snd s
		INNER JOIN SnDBankDD sdd ON sdd.LocationId = s.LocationId AND sdd.SnDId = s.SnDId
WHERE	s.CompanyId=@CompanyId and	s.LocationId=@LocationId AND s.SnDId < @SNDID  AND s.RollbackDate IS null
)
--CASH DD & BANK DD Remittance OB
INSERT INTO #TempSNDOpeningBalance (CompanyID,LocationID,SNDID,DD_PO)
(
SELECT	@CompanyId,@LocationId,@SNDID,
		(ISNULL(sum(sr.TotalCashDD),0)*-1 ) + (ISNULL(sum(sr.TotalbankDD),0)*-1 )
FROM snd s
		INNER JOIN SnDRemittance sr ON sr.LocationId = s.LocationId AND sr.SnDId = s.SnDId
WHERE	s.CompanyId=@CompanyId and	s.LocationId=@LocationId AND s.SnDId < @SNDID  AND s.RollbackDate IS null
)





--BalanceDeposited, BankBalance
--INSERT INTO #TempSNDOpeningBalance (CompanyID,LocationID,SNDID,BalanceDeposited,BankBalance)
--(
--SELECT	@CompanyId,@LocationId,@SNDID,	
--		isnull(sum(isnull(BalanceDeposited,0)),0) ,isnull(sum(isnull(BankBalance,0)),0)
--FROM	#TempBankBalance 
--WHERE	OB = 1
--)


--RETURN CHQ, BANK CHARGES
INSERT INTO #TempSNDOpeningBalance (CompanyID,LocationID,SNDID,ReturnDocument,BankCharges)
(
SELECT	@CompanyId,@LocationId,@SNDID,	
		sdb.BalanceReturned,sdb.TotalBankCharges
FROM	snd s inner JOIN SnDBankDetail sdb ON sdb.LocationId = s.LocationId AND sdb.SnDId = s.SnDId 
WHERE	s.CompanyId=@CompanyId and sdb.LocationId=@LocationId AND s.SnDId = @PreviousSNDID AND s.RollbackDate IS null
)

--Shortage OB from O/B Shortage

--Shortage OB from cash sale payment
INSERT INTO #TempSNDOpeningBalance (CompanyID,LocationID,SNDID,Shortage)
(
SELECT	@CompanyId,@LocationId,@SNDID,	
		SHORTAGE=ISNULL(sum(ISNULL(csp.Shortage,0)),0)
FROM	CashSalePayment csp 
		INNER JOIN SnDCashSalePayment sdsp ON sdsp.LocationId=csp.LocationId AND sdsp.CashSalePaymentId=csp.CashSalePaymentId
		INNER JOIN snd s ON s.LocationId = sdsp.LocationId AND s.SnDId = sdsp.SnDId
WHERE	s.CompanyId=@CompanyId  AND s.LocationId=@LocationId AND s.SnDId < @SNDID AND s.RollbackDate IS NULL AND csp.Shortage>0


--Shortage OB from credit collection

UNION all
SELECT	@CompanyId,@LocationId,@SNDID,	
		SHORTAGE=ISNULL(sum(ISNULL(cc.Shortage,0)),0)
FROM	CreditCollection cc 
		INNER JOIN SnDCreditCollection scc ON scc.LocationId=cc.LocationId AND scc.CreditCollectionId=cc.CreditCollectionId
		INNER JOIN snd s ON s.LocationId = scc.LocationId AND s.SnDId = scc.SnDId
WHERE	s.CompanyId=@CompanyId  AND s.LocationId=@LocationId AND s.SnDId < @SNDID AND s.RollbackDate IS NULL AND cc.Shortage>0
--Shortage OB from cash reduction
UNION all
SELECT	@CompanyId,@LocationId,@SNDID,	
		SHORTAGE=ISNULL(sum(ISNULL(cr.ReductionAmount,0)),0) 
FROM	SnDCashReduction cr
		INNER JOIN snd s ON s.LocationId = cr.LocationId AND s.SnDId = cr.SnDId
WHERE	s.CompanyId=@CompanyId  AND s.LocationId=@LocationId AND s.SnDId < @SNDID AND s.RollbackDate IS NULL 
--		SND Refrence table missing with opening balance shortage

UNION all
		SELECT  @CompanyId,@LocationId,@SNDID,
				SHORTAGE=ISNULL(sum(ISNULL(obs.Shortageamount,0)),0) FROM obSMShortage obs
		WHERE   obs.LocationId = @LocationId AND obs.CompanyId =@CompanyId 
--Shortage OB from Adjustment
UNION all
SELECT	@CompanyId,@LocationId,@SNDID,	
		SHORTAGE=ISNULL(sum(ISNULL(sc.CollectedAmount,0)),0) * -1 
FROM	SnDShortageCollection sc
		INNER JOIN snd s ON s.LocationId = sc.LocationId AND s.SnDId = sc.SnDId
WHERE	s.CompanyId=@CompanyId  AND s.LocationId=@LocationId AND s.SnDId < @SNDID AND s.RollbackDate IS NULL
)

-- Adjustment SLN, CN, WHT, Advance, OS Advance, IBC
-----------------------------------------------------------------------------------------------
INSERT INTO #TempSNDOpeningBalance (CompanyID,LocationID,SNDID,Customer_ADJ,OS_ADV_ADJ,SLN_ADJ,CN_ADJ,WHT_ADJ,IBC_ADJ)
(

SELECT	@CompanyId,@LocationId,@SNDID,
		ISNULL(sum(sd.CustomerAdvanceAdjusted),0) * -1,
		ISNULL(sum(sd.OutstationAdvanceAdjusted),0) *-1,
		ISNULL(sum(sd.SLNAdjusted),0),
		ISNULL(sum(sd.CustomerCNAdjusted),0),
		ISNULL(sum(sd.WHTDeducted ),0),
		ISNULL(sum(sd.InterBranchCollectionAdjusted ),0) * -1
FROM snd s 
		INNER JOIN SnDCollection sd ON sd.LocationId = s.LocationId AND sd.SnDId = s.SnDId
WHERE	s.CompanyId=@CompanyId  AND s.LocationId=@LocationId AND s.SnDId < @SNDID    AND s.RollbackDate IS null		
GROUP BY s.CompanyId,s.LocationId,s.SnDId

--SELECT	@CompanyId,@LocationId,@SNDID,	
--		ISNULL(sum(ISNULL(csp.CustomerAdvanceAdjusted,0)),0)  * -1 
--		,ISNULL(sum(ISNULL(csp.OSAdvanceAdjusted,0)),0) * -1
--		,ISNULL(sum(ISNULL(csp.SLNAdjusted,0)),0)
--		,ISNULL(sum(ISNULL(csp.CreditNoteAdjusted,0)),0)
--		,ISNULL(sum(ISNULL(csp.WHTAdjusted,0)),0)
--		,0 --IBC
--FROM	CashSalePayment csp 
--		INNER JOIN SnDCashSalePayment sdsp ON sdsp.LocationId=csp.LocationId AND sdsp.CashSalePaymentId=csp.CashSalePaymentId
--		INNER JOIN snd s ON s.LocationId = sdsp.LocationId AND s.SnDId = sdsp.SnDId
--WHERE	s.CompanyId=@CompanyId  AND s.LocationId=@LocationId AND s.SnDId < @SNDID    AND s.RollbackDate IS null
--		AND s.RollbackDate IS null
--GROUP BY s.CompanyId,s.LocationId,s.SnDId
--UNION all

--SELECT	@CompanyId,@LocationId,@SNDID,	
--		sum(ISNULL(cc.CustomerAdvanceAdjusted,0))  * -1
--		,sum(ISNULL(cc.OSAdvanceAdjusted,0))  * -1
--		,sum(ISNULL(cc.SLNAdjusted,0))
--		,sum(ISNULL(cc.CreditNoteAdjusted,0))
--		,sum(ISNULL(cc.WHTAdjusted,0))
--		,sum(ISNULL(cc.InterBranchCollectionAmount,0)) * -1
--FROM	CreditCollection cc 
--		INNER JOIN SnDCreditCollection scc ON scc.LocationId=cc.LocationId AND scc.CreditCollectionId=cc.CreditCollectionId
--		INNER JOIN snd s ON s.LocationId = scc.LocationId AND s.SnDId = scc.SnDId
--WHERE	s.CompanyId=@CompanyId  AND s.LocationId=@LocationId AND s.SnDId < @SNDID  AND s.RollbackDate IS null
--GROUP BY s.CompanyId,s.LocationId,s.SnDId

UNION ALL

SELECT	@CompanyId,@LocationId,@SNDID,	
		sum(ISNULL(da.TotalAdvance,0))  * -1
		,0 --OSAdvanceAdjusted
		,sum(ISNULL(da.TotalSLN,0))
		,sum(ISNULL(da.TotalCreditNote,0))
		,0 --WHTAdjusted
		,0 --InterBranchCollectionAmount
FROM DirectAdjustment da
WHERE da.CompanyId=@CompanyId and da.LocationId=@LocationId AND da.TransactionDate <@PreviousSndToDate AND da.ApprovalDate IS NOT null

UNION ALL
SELECT	@CompanyId,@LocationId,@SNDID,	
		0 -- AdvanceAdjusted
		,0 --OSAdvanceAdjusted
		,0 --SLN Adjusted
		,0 --CN Adjusted
		,sum(ISNULL(ow.Amount,0))   --WHTAdjusted
		,0 --InterBranchCollectionAmount
FROM obWHT ow
WHERE ow.CompanyId=@CompanyId  AND ow.LocationId=@LocationId 


--======================================
--Credit Entry -- Customer CN Adjustment
--======================================

UNION ALL
--Credit Entry -- CN Adjustment
SELECT	@CompanyId,@LocationId,@SNDID,	
		0 -- AdvanceAdjusted
		,0 --OSAdvanceAdjusted
		,0 -- SLN Adjusted
		,sum(ISNULL(cn.amount,0)) * -1
		,0 --WHTAdjusted
		,0 --InterBranchCollectionAmount
FROM CustomerCreditNote cn
WHERE cn.CompanyId=@CompanyId and cn.LocationId=@LocationId AND cn.BranchApprovalDate <@PreviousSndToDate AND cn.BranchApprovalDate IS NOT NULL

--Credit Entry -- SLN Adjustment
UNION all
SELECT	@CompanyId,@LocationId,@SNDID,	
		 0 -- AdvanceAdjusted
		,0 --OSAdvanceAdjusted
		,sum(ISNULL(s.TotalNet,0)) * -1 
		,0 --CN Adjusted
		,0 --WHTAdjusted
		,0 --InterBranchCollectionAmount
FROM SLN s
WHERE s.CompanyId=@CompanyId and s.LocationId=@LocationId AND s.ApprovalDate <@PreviousSndToDate  AND s.RollbackDate IS NULL
UNION ALL

--Credit Entry -- Customer ADV Adjustment
SELECT	@CompanyId,@LocationId,@SNDID,	
		sum(ISNULL(ca.Amount,0)) -- AdvanceAdjusted
		,0 --OSAdvanceAdjusted
		,0 --SLN Adjusted
		,0 --CN Adjusted
		,0 --WHTAdjusted
		,0 --InterBranchCollectionAmount
FROM CustomerAdvance ca
INNER JOIN SnDCustomerAdvance sd ON sd.LocationId = ca.LocationId AND sd.CustomerAdvanceId = ca.CustomerAdvanceId
INNER JOIN snd s ON s.LocationId = sd.LocationId AND s.SnDId = sd.SnDId
WHERE	s.CompanyId=@CompanyId  AND s.LocationId=@LocationId AND s.SnDId < @SNDID AND  s.RollbackDate IS null

UNION ALL

--Credit Entry -- OS ADV Adjustment
SELECT	@CompanyId,@LocationId,@SNDID,	
		0 -- AdvanceAdjusted
		,sum(ISNULL(oa.Amount,0)) --OSAdvanceAdjusted
		,0 --SLN Adjusted
		,0 --CN Adjusted
		,0 --WHTAdjusted
		,0 --InterBranchCollectionAmount
FROM OutstationAdvance oa
INNER JOIN SnDOutstationAdvance sd ON sd.LocationId = oa.LocationId AND sd.OutstationAdvanceId = oa.OutstationAdvanceId
INNER JOIN snd s ON s.LocationId = sd.LocationId AND s.SnDId = sd.SnDId
WHERE	s.CompanyId=@CompanyId  AND s.LocationId=@LocationId AND s.SnDId < @SNDID AND s.ApprovalDate IS NOT NULL  AND s.RollbackDate IS null

UNION ALL
--Credit Entry -- WHT Adjustment

SELECT	@CompanyId,@LocationId,@SNDID,	
		0 -- AdvanceAdjusted
		,0 --OSAdvanceAdjusted
		,0 --SLN Adjusted
		,0 --CN Adjusted
		,sum(ISNULL(ws.adjustedAmount,0))   * -1   --WHTAdjusted
		,0 --InterBranchCollectionAmount
FROM WHTChallan w
INNER JOIN WHTChallanSaleOrder ws ON ws.LocationId = w.LocationId AND ws.WHTChallanId = w.WHTChallanId
INNER JOIN CashSalePayment csp ON csp.LocationId = ws.LocationId AND csp.CashSalePaymentId = ws.CashSalePaymentId
INNER JOIN SnDCashSalePayment scsp ON scsp.LocationId = csp.LocationId AND scsp.CashSalePaymentId = csp.CashSalePaymentId
INNER JOIN snd s ON s.LocationId = scsp.LocationId AND s.SnDId = scsp.SnDId
WHERE s.CompanyId=@CompanyId AND s.LocationId=@LocationId AND s.SnDId<@SNDID AND ws.CashSalePaymentId IS NOT NULL  AND s.RollbackDate IS null

UNION ALL

SELECT	@CompanyId,@LocationId,@SNDID,	
		0 -- AdvanceAdjusted
		,0 --OSAdvanceAdjusted
		,0 --SLN Adjusted
		,0 --CN Adjusted
		,sum(ISNULL(ws.adjustedAmount,0))   * -1   --WHTAdjusted
		,0 --InterBranchCollectionAmount
FROM WHTChallan w
INNER JOIN WHTChallanSaleOrder ws ON ws.LocationId = w.LocationId AND ws.WHTChallanId = w.WHTChallanId
INNER JOIN CreditCollection cc ON cc.LocationId = ws.LocationId AND cc.CreditCollectionId = ws.CreditCollectionId
INNER JOIN SnDCreditCollection scc ON scc.LocationId = cc.LocationId AND scc.CreditCollectionId = cc.CreditCollectionId
INNER JOIN snd s ON s.LocationId = scc.LocationId AND s.SnDId = scc.SnDId
WHERE s.CompanyId=@CompanyId AND s.LocationId=@LocationId AND s.SnDId<@SNDID AND ws.CreditCollectionId IS NOT NULL  AND s.RollbackDate IS null

UNION all
SELECT	@CompanyId,@LocationId,@SNDID,	
		0 -- AdvanceAdjusted
		,0 --OSAdvanceAdjusted
		,0 --SLN Adjusted
		,0 --CN Adjusted
		,sum(ISNULL(wr.AdjustedAmount,0))   * -1   --WHTAdjusted
		,0 --InterBranchCollectionAmount
FROM WHTReversal wr 
INNER JOIN SnDWHTReversal sd ON sd.LocationId = wr.LocationId AND sd.WHTReversalId = wr.WHTReversalId
INNER JOIN snd s ON s.LocationId = sd.LocationId AND s.SnDId = sd.SnDId
WHERE s.CompanyId=@CompanyId AND s.LocationId=@LocationId AND s.SnDId<@SNDID  AND s.RollbackDate IS null




UNION all

SELECT	@CompanyId,@LocationId,@SNDID,	
		0 -- AdvanceAdjusted
		,0 --OSAdvanceAdjusted
		,0 --SLN Adjusted
		,0 --CN Adjusted
		,0 --WHTAdjusted
		,sum(ISNULL(ibc.TotalAmount,0))  --InterBranchCollectionAmount
FROM InterBranchCollection ibc
INNER JOIN SnDInterBranchCollection sibc ON sibc.LocationId = ibc.LocationId AND sibc.InterBranchCollectionId = ibc.InterBranchCollectionId
INNER JOIN snd s ON s.LocationId = sibc.LocationId AND s.SnDId = sibc.SnDId AND s.CompanyId=ibc.CompanyId
WHERE s.CompanyId=@CompanyId AND s.LocationId=@LocationId AND s.SnDId<@SNDID AND s.RollbackDate IS NULL

)

SELECT CompanyID,LocationID,SNDID
		,ISNULL(SUM(ISNULL(Cash,0)),0) AS Cash
		,ISNULL(SUM(ISNULL(Cheque,0)),0) AS Cheque
		,ISNULL(SUM(ISNULL(Vault,0)),0) AS Vault
		,ISNULL(SUM(ISNULL(DD_PO,0)),0) AS DD_PO
		,ISNULL(SUM(ISNULL(TC,0)),0) AS TC
		,ISNULL(SUM(ISNULL(OtherDocument,0)),0) AS OtherDocument
		,ISNULL(SUM(ISNULL(BalanceDeposited,0)),0) AS BalanceDeposited
		,ISNULL(SUM(ISNULL(BankBalance,0)),0) AS BankBalance
		,ISNULL(SUM(ISNULL(TotalBankBalance,0)),0) AS TotalBankBalance
		,ISNULL(SUM(ISNULL(ReturnDocument,0)),0) AS ReturnDocument
		,ISNULL(SUM(ISNULL(BankCharges,0)),0) AS BankCharges
		,ISNULL(SUM(ISNULL(Shortage,0)),0) AS Shortage
		,ISNULL(SUM(ISNULL(DirectlyRemitted,0)),0) AS DirectlyRemitted
		,ISNULL(SUM(ISNULL(Customer_ADJ,0)),0) AS Customer_ADJ
		,ISNULL(SUM(ISNULL(OS_ADV_ADJ,0)),0) AS OS_ADV_ADJ
		,ISNULL(SUM(ISNULL(SLN_ADJ,0)),0) AS SLN_ADJ
		,ISNULL(SUM(ISNULL(CN_ADJ,0)),0) AS CN_ADJ
		,ISNULL(SUM(ISNULL(WHT_ADJ,0)),0) AS WHT_ADJ
		,ISNULL(SUM(ISNULL(IBC_ADJ,0)),0) AS IBC_ADJ
		,ISNULL(SUM(ISNULL(ROUNDOFF,0)),0) AS ROUNDOFF
--INTO #SNDOpeningBalance	
FROM #TempSNDOpeningBalance
GROUP BY CompanyID,LocationID,SNDID

--DELETE FROM #TempSNDOpeningBalance

--INSERT INTO #TempSNDOpeningBalance
--SELECT * FROM #SNDOpeningBalance

--DROP TABLE #SNDOpeningBalance
--SELECT * FROM #TempSNDOpeningBalance
DROP TABLE #TempSNDOpeningBalance

 GO 

CREATE PROCEDURE usp_Report_MonthlyManagementReport @CompanyIds INT, @LocationIds VARCHAR(250),@PBLIds VARCHAR(250),@SelectAll INT,@FromDate DATETIME,@ToDate DATETIME
AS
--DECLARE @CompanyIds INT, @LocationIds VARCHAR(250),@PBLIds VARCHAR(250),@SelectAll INT,@FromDate DATETIME,@ToDate DATETIME
--SET @CompanyIds = 1
--SET @LocationIds = ''
--SET @PBLIds = ''
--SET @SelectAll = 2
--SET @FromDate = '2014-04-01 00:00:00.000'
--SET @ToDate = '2014-04-06 00:00:00.000'


SELECT usso.LocationId, usso.SaleOrderId, usso.PrincipalBusinessLineId, usso.IsCash, SUM(usso.soldquantity*usso.tp) [TotalTP]
INTO #TempSO
FROM uv_Sales_SaleOrder usso
INNER JOIN   DBO.Split(@PBLIds, ',') PBL ON  (PBL.Data = usso.PrincipalBusinessLineId OR @PBLIds = '')
INNER JOIN   DBO.Split(@LocationIds, ',') Location ON  (Location.Data = usso.LocationId OR @LocationIds = '')
WHERE usso.CompanyId = @CompanyIds
AND 
(
	@SelectAll = 0 
	OR ( @SelectAll = 1 AND DATEDIFF(DAY,usso.SalePassDate,@FromDate)=0) 
	OR ( @SelectAll = 2 AND DATEDIFF(DAY,usso.SalePassDate,@FromDate)<=0 AND DATEDIFF(DAY,usso.SalePassDate,@ToDate)>=0)
)
GROUP BY usso.LocationId, usso.SaleOrderId, usso.PrincipalBusinessLineId, usso.IsCash	

SELECT
l.SequenceId,
a.[LocationId],
l.ShortName AS [LOCATION],
upbla.PBLSequenceId,
a.PrincipalBusinessLineId,
upbla.[Name] AS [PBL],
--SUM(a.[GROSS SALE CASH]) AS [GROSS SALE CASH],
--SUM(a.[GROSS SALE CR]) AS [GROSS SALE CR],
--SUM(a.[GROSS UDL DISCOUNT CASH]) AS [GROSS UDL DISCOUNT CASH],
--SUM(a.[GROSS PBL DISCOUNT CASH]) AS [GROSS PBL DISCOUNT CASH],
--SUM(a.[GROSS UDL DISCOUNT CR]) AS [GROSS UDL DISCOUNT CR],
--SUM(a.[GROSS PBL DISCOUNT CR]) AS [GROSS PBL DISCOUNT CR],
--SUM(a.[SLN CASH]) AS [SLN CASH],
--SUM(a.[SLN CR]) AS [SLN CR], 
--SUM(a.[SLN UDL DISCOUNT CASH]) AS [SLN UDL DISCOUNT CASH], 
--SUM(a.[SLN PBL DISCOUNT CASH]) AS [SLN PBL DISCOUNT CASH],
--SUM(a.[SLN UDL DISCOUNT CR]) AS [SLN UDL DISCOUNT CR],
--SUM(a.[SLN PBL DISCOUNT CR]) AS [SLN PBL DISCOUNT CR]
(SUM(a.[GROSS SALE CASH]) -SUM(a.[GROSS UDL DISCOUNT CASH]) - SUM(a.[GROSS PBL DISCOUNT CASH])) AS [CASH SALE],
(SUM(a.[GROSS SALE CR]) - SUM(a.[GROSS UDL DISCOUNT CR]) - SUM(a.[GROSS PBL DISCOUNT CR])) AS [CREDIT SALE],
(SUM(a.[SLN CASH]) - SUM(a.[SLN UDL DISCOUNT CASH]) - SUM(a.[SLN PBL DISCOUNT CASH])) AS [CASH S.RTN],
(SUM(a.[SLN CR]) - SUM(a.[SLN UDL DISCOUNT CR]) - SUM(a.[SLN PBL DISCOUNT CR])) AS [CREDIT S.RTN],
((SUM(a.[GROSS SALE CASH]) - SUM(a.[GROSS UDL DISCOUNT CASH]) - SUM(a.[GROSS PBL DISCOUNT CASH])) + (SUM(a.[GROSS SALE CR]) - SUM(a.[GROSS UDL DISCOUNT CR]) - SUM(a.[GROSS PBL DISCOUNT CR])) -
(SUM(a.[SLN CASH]) - SUM(a.[SLN UDL DISCOUNT CASH]) - SUM(a.[SLN PBL DISCOUNT CASH])) - (SUM(a.[SLN CR]) - SUM(a.[SLN UDL DISCOUNT CR]) - SUM(a.[SLN PBL DISCOUNT CR]))) 
AS [NET SALE],
SUM((a.[GROSS UDL DISCOUNT CASH])) + SUM(a.[GROSS UDL DISCOUNT CR]) - SUM(a.[SLN UDL DISCOUNT CASH]) - SUM(a.[SLN UDL DISCOUNT CR]) AS [UDL DISCOUNT],
SUM(a.[GROSS PBL DISCOUNT CASH]) + SUM(a.[GROSS PBL DISCOUNT CR]) - SUM(a.[SLN PBL DISCOUNT CASH]) - SUM(a.[SLN PBL DISCOUNT CR]) AS [PBL DISCOUNT],
SUM(a.[GROSS SALE CASH]) + SUM(a.[GROSS SALE CR]) - SUM(a.[SLN CASH]) - SUM(a.[SLN CR]) AS [DSP NET SALE]
FROM

(
      SELECT
            usso.LocationId,
            usso.PrincipalBusinessLineId,
            usso.IsCash,
            CASE 
                 WHEN usso.IsCash = 1 THEN usso.TotalTP
                 ELSE 0
            END AS [Gross Sale Cash],
            CASE 
                 WHEN usso.IsCash = 1 THEN 0
                 ELSE usso.TotalTP
            END AS [Gross Sale Cr],
            (
                CASE 
                     WHEN usso.IsCash = 1 THEN ISNULL(disc.[UDL Discount],0)
                     ELSE 0
                END
            ) AS [Gross UDL Discount Cash],
			(
				CASE 
					 WHEN usso.IsCash = 1 THEN ISNULL(disc.[PBL Discount],0)
					 ELSE 0
				END
			) AS [Gross PBL Discount Cash],
			(
				CASE 
					 WHEN usso.IsCash = 1 THEN 0
					 ELSE ISNULL(disc.[UDL Discount],0)
				END
			) AS [Gross UDL Discount Cr],
			(
				CASE 
					 WHEN usso.IsCash = 1 THEN 0
					 ELSE ISNULL(disc.[PBL Discount],0)
				END
			) AS [Gross PBL Discount Cr], 
            0 AS [SLN Cash],
            0 AS [SLN Cr], 
            0 AS [SLN UDL Discount Cash], 
            0 AS [SLN PBL Discount Cash],
            0 AS [SLN UDL Discount Cr],
            0 AS [SLN PBL Discount Cr] 
      FROM 
      (
		SELECT usso.LocationId, usso.PrincipalBusinessLineId, usso.IsCash, SUM([TotalTP]) [TotalTP]
		FROM #TempSO usso
		GROUP BY usso.LocationId, usso.PrincipalBusinessLineId, usso.IsCash
      ) usso
      LEFT JOIN 
      (
		SELECT usso.LocationId,
		s.PrincipalBusinessLineId,
		usso.IsCash,
		ISNULL(SUM(sos.Discount * ((100 - s.UDLPercentage) / 100)), 0) [PBL Discount],
		ISNULL(SUM(sos.Discount * (s.UDLPercentage / 100)), 0) [UDL Discount]

		FROM
		(
			SELECT DISTINCT usso.LocationId, usso.SaleOrderId, usso.IsCash
			FROM #TempSO usso
		) usso
		INNER JOIN SaleOrderScheme sos ON sos.LocationId = usso.LocationId
		AND sos.SaleOrderId = usso.SaleOrderId
		INNER JOIN [Scheme] s ON s.SchemeId = sos.SchemeId 
		WHERE sos.EndDate IS NULL
		AND s.IsDiscountBased = 1
		GROUP BY usso.LocationId, s.PrincipalBusinessLineId, usso.IsCash
      ) disc ON disc.LocationId = usso.LocationId
       AND disc.PrincipalBusinessLineId = usso.PrincipalBusinessLineId
       AND disc.IsCash = usso.IsCash
      
      

UNION ALL

      SELECT 
            sln.LocationId,
            sln.PrincipalBusinessLineId,
            sln.IsCash,
            0 AS [Gross Sale Cash],
            0 AS  [Gross Sale Cr],
            0 AS [Gross UDL Discount Cash],
            0 AS [Gross PBL Discount Cash],
            0 AS [Gross UDL Discount Cr],
            0 AS [Gross PBL Discount Cr],  
            (case when sln.IsCash = 1 then SUM(sln.TotalTP) else 0 end) AS [SLN Cash],
            (case when sln.IsCash = 1 then 0 else SUM(sln.TotalTP) end) AS [SLN Cr], 
            (case when sln.IsCash = 1 then SUM(sln.DiscountUDLPart) else 0 end) AS [SLN UDL Discount Cash], 
            (case when sln.IsCash = 1 then SUM(sln.DiscountPrincipalPart) else 0 end) AS [SLN PBL Discount Cash],
            (case when sln.IsCash = 1 then 0 else SUM(sln.DiscountUDLPart) end) AS [SLN UDL Discount Cr],
            (case when sln.IsCash = 1 then 0 else SUM(sln.DiscountPrincipalPart) end) AS [SLN PBL Discount Cr] 
      FROM 
      (
      	SELECT sln.LocationId, sln.SLNId, sln.PrincipalBusinessLineId, sln.IsCash, isnull(sln.DiscountUDLPart,0) AS DiscountUDLPart, 
      	isnull(sln.DiscountPrincipalPart,0) AS DiscountPrincipalPart, SUM(sln.Quantity * pc.TP) TotalTP
      	FROM uv_Sales_SLN sln
		INNER JOIN PriceCatalog pc ON pc.PriceCatalogId = sln.PriceId
		INNER JOIN   DBO.Split(@PBLIds, ',') PBL ON  (PBL.Data = sln.PrincipalBusinessLineId OR @PBLIds = '')
		INNER JOIN   DBO.Split(@LocationIds, ',') Location ON  (Location.Data = sln.LocationId OR @LocationIds = '')

		WHERE sln.CompanyId = @CompanyIds
		AND (@SelectAll = 0 
			OR ( @SelectAll = 1 AND DATEDIFF(DAY,sln.TransactionDate,@FromDate)=0) 
			OR ( @SelectAll = 2 AND DATEDIFF(DAY,sln.TransactionDate,@FromDate)<=0 AND DATEDIFF(DAY,sln.TransactionDate,@ToDate)>=0))
      	GROUP BY sln.LocationId, sln.SLNId, sln.PrincipalBusinessLineId, sln.IsCash, sln.DiscountUDLPart, 
      	sln.DiscountPrincipalPart			
      ) sln
      GROUP BY sln.IsCash,sln.PrincipalBusinessLineId,sln.LocationId

) a
INNER JOIN Location l ON A.LocationId = l.LocationId
INNER JOIN uv_PrincipalBusinessLine_All upbla ON a.PrincipalBusinessLineId = upbla.PrincipalBusinessLineId
GROUP BY l.SequenceId,
	a.[LocationId],
	l.ShortName,
	upbla.PBLSequenceId,
	a.PrincipalBusinessLineId,
	upbla.[Name] 

ORDER BY l.SequenceId, upbla.PBLSequenceId

DROP TABLE #TempSO
 GO 
DECLARE @CompanyIds varchar(100),
	@PBLIds varchar(100), @LocationIds varchar(100),@ProductIds VARCHAR(500),
	@IsCash bit,
	@IsCredit bit,
	@IsTP bit,
	@SaleCriteria int,
	@SelectAll int,
	@FromDate datetime,
	@ToDate datetime      
 
SET @CompanyIds = '1'
SET @PBLIds = '3'
SET @LocationIds ='11'
SET @ProductIds = '172'

SET @SaleCriteria = 2
SET @SelectAll=2
SET @FromDate = '2014/04/04'
SET @ToDate = '2014/04/15'
SET @IsTP = 1


/*
Sale Criteria 
0-Gross Sale --Only Value
1-Net Sale -- Value-SLN
2-SLN--Only SLN
*/

SELECT 
	[A].CompanyId,
	l.SequenceId AS [LocSeq],	
	l.ShortName AS [Location Name],
	UPBLA.PBLSequenceId,
	upbla.PrincipalBusinessLineId,
	upbla.Name AS [PBL Name],	
	up.ProductSequence ,
	up.ProductId,
	up.Name AS [Product Name],
	--MAX(l.MaxDate) AS [Date],
	CASE WHEN @SaleCriteria=0 THEN sum(A.GrossQuantity)
		 WHEN @SaleCriteria=1 THEN sum(A.GrossQuantity)-SUM(A.SLN)
		 WHEN @SaleCriteria=2 THEN sum(A.SLN)
	END 
	AS [Sale Qty],	
	(CASE WHEN @SaleCriteria=0 THEN sum(A.GrossQuantity * A.Price)
		 WHEN @SaleCriteria=1 THEN sum(A.GrossQuantity * A.Price)-SUM(A.SLN*A.Price)
		 WHEN @SaleCriteria=2 THEN sum(A.SLN * A.Price)
	END 
	)
	AS [Sale Amount]	
FROM   uv_Product up
LEFT OUTER  JOIN   
( 
		SELECT 
		des.CompanyId, 	
		des.LocationId, 			
		des.ProductId,
		CASE WHEN @ISTP=1 THEN (pc.TP) ELSE (PC.PP) END Price,
		SUM
		(
			 isnull(des.BookedLocalCash,0) + isnull(des.BookedOSCash,0) + isnull(des.Shop,0)+ isnull(des.SpotLocal,0)+ isnull(des.SpotOS,0) 
			+ isnull(des.BookedLocalCredit,0)+isnull(des.BookedOSCredit,0) 
		) AS [GrossQuantity], 					
		SUM(isnull((des.SLNCash),0)  + isnull((des.SLNCredit),0) ) AS [SLN]					
		FROM uv_DayEndSale des				
		INNER JOIN PriceCatalog pc ON pc.PriceCatalogId=des.PriceId	
		INNER JOIN   DBO.Split(@CompanyIds, ',') Company ON  (Company.Data = des.companyId OR @CompanyIds = '')
		INNER JOIN   DBO.Split(@LocationIds, ',') Location ON  (Location.Data = des.LocationId OR @LocationIds = '')		
		WHERE		
		 (
			   @SelectAll = 0
			   OR  (
					   @SelectAll = 1
				  AND  (
						   DATEDIFF(DAY,des.[Date],  @FromDate) >= 0
					   )
				   )
			   OR  (
					   @SelectAll = 2
				  AND  (
						   DATEDIFF(DAY,des.[Date],  @FromDate) <= 0
					  AND  DATEDIFF(DAY,des.[Date],  @ToDate) >= 0
					   )
				   )
			 
		 )
		GROUP BY des.CompanyId, 	
		des.LocationId, 			
		des.ProductId,
		CASE WHEN @ISTP=1 THEN (pc.TP) ELSE (PC.PP) END
) AS [A] ON [A].ProductId = up.ProductId
INNER JOIN   DBO.Split(@PBLIds, ',') PBL ON  (PBL.Data = up.PrincipalBusinessLineId OR @PBLIds = '')
INNER JOIN   DBO.Split(@ProductIds, ',') P ON  (P.Data = up.ProductId OR @ProductIds = '')
INNER JOIN uv_PrincipalBusinessLine_All upbla ON upbla.PrincipalBusinessLineId=up.PrincipalBusinessLineId
INNER JOIN (
				SELECT l1.SequenceId,l1.LocationId, l1.ShortName, max (des2.Date) AS MaxDate
				FROM Location l1
				INNER JOIN uv_DayEndSale des2 ON des2.LocationId = l1.LocationId
				WHERE DATEDIFF(DAY, des2.[Date],  @ToDate) >= 0
				GROUP BY l1.SequenceId,l1.LocationId, l1.ShortName
			)l 
ON l.LocationId = [A].LocationId
		
WHERE [A].LocationId IS NOT NULL

GROUP BY
	[A].CompanyId,
	l.SequenceId,	
	l.ShortName,
	UPBLA.PBLSequenceId,
	upbla.PrincipalBusinessLineId,
	upbla.Name,	
	up.ProductSequence ,
	up.ProductId,
	up.Name
	
ORDER BY 
l.SequenceId,
UPBLA.PBLSequenceId,
up.ProductSequence


 GO 
usp_report_DSP
dbo.fn_MonthEnd_Get_ClosingDSP
fn_MonthEnd_Get_DSPByDateRange
 GO 
DECLARE @COMPANYID INT = 1
		,@LOCATIONID INT = 11
		,@SNDID INT = 5
		
--SELECT	@CompanyId,@LocationId,@SNDID,
--		ISNULL(sum(sd.CustomerAdvanceAdjusted),0) * -1,
--		ISNULL(sum(sd.OutstationAdvanceAdjusted),0) *-1,
--		ISNULL(sum(sd.SLNAdjusted),0),
--		ISNULL(sum(sd.CustomerCNAdjusted),0),
--		ISNULL(sum(sd.WHTDeducted ),0),
--		ISNULL(sum(sd.InterBranchCollectionAdjusted ),0) * -1
--FROM snd s 
--		INNER JOIN SnDCollection sd ON sd.LocationId = s.LocationId AND sd.SnDId = s.SnDId
--WHERE	s.CompanyId=@CompanyId  AND s.LocationId=@LocationId AND s.SnDId < @SNDID    AND s.RollbackDate IS null		
--GROUP BY s.CompanyId,s.LocationId,s.SnDId

--SELECT	@CompanyId,@LocationId,@SNDID,	
--		sum(ISNULL(cc.CustomerAdvanceAdjusted,0))  * -1
--		,sum(ISNULL(cc.OSAdvanceAdjusted,0))  * -1
--		,sum(ISNULL(cc.SLNAdjusted,0))
--		,sum(ISNULL(cc.CreditNoteAdjusted,0))
--		,sum(ISNULL(cc.WHTAdjusted,0))
--		,sum(ISNULL(cc.InterBranchCollectionAmount,0)) * -1
--FROM	CreditCollection cc 
--		INNER JOIN SnDCreditCollection scc ON scc.LocationId=cc.LocationId AND scc.CreditCollectionId=cc.CreditCollectionId
--		INNER JOIN snd s ON s.LocationId = scc.LocationId AND s.SnDId = scc.SnDId
--WHERE	s.CompanyId=@CompanyId  AND s.LocationId=@LocationId AND s.SnDId < @SNDID  AND s.RollbackDate IS null
--GROUP BY s.CompanyId,s.LocationId,s.SnDId

SELECT	@CompanyId,@LocationId,@SNDID,	
		 0 --AdvanceAdjusted
		,0 --OSAdvanceAdjusted
		,0 --SLN Adjusted
		,0 --CN Adjusted
		,0 --WHTAdjusted
		,sum(ISNULL(ibc.TotalAmount,0))  --InterBranchCollectionAmount
FROM InterBranchCollection ibc
INNER JOIN SnDInterBranchCollection sibc ON sibc.LocationId = ibc.LocationId AND sibc.InterBranchCollectionId = ibc.InterBranchCollectionId
INNER JOIN snd s ON s.LocationId = sibc.LocationId AND s.SnDId = sibc.SnDId AND s.CompanyId=ibc.CompanyId
WHERE s.CompanyId=@CompanyId AND s.LocationId=@LocationId AND s.SnDId<@SNDID AND s.RollbackDate IS NULL





--SELECT SNDID 
--FROM SnD 
--WHERE SND.LOCATIONID = 11 AND SND.SNDNUMBER = 2

 GO 
SELECT * FROM sndInterBranchCollection sibc
SELECT * FROM InterBranchCollection ibc



SELECT * FROM INFORMATION_SCHEMA.columns 
WHERE column_name LIKE '%open%bal%'--'%inter%Branch%coll%'
	OR TABLE_NAME LIKE '%open%bal%'--'%inter%Branch%coll%'


--SELECT * FROM CreditCollectionInterBranch
SELECT * FROM sndcollection


SELECT * FROM sndremittance
 GO 
SELECT DISTINCT usso.SalePassDate,Count(usso.CustomerId)
  FROM uv_Sales_SaleOrder usso WHERE usso.LocationId = 11 AND usso.BookerId = 1 AND usso.PrincipalBusinessLineId = 3  AND DATEDIFF(DAY, usso.SalePassDate ,  '04/06/2014') <= 0 AND datediff (day,usso.SalePassDate , '04/06/2014') >= 0

GROUP BY usso.SalePassDate
  
  
 GO 



--EXEC usp_Report_SND 5,64,45
--CREATED BY : RIZWAN AHMED KHAN
--DATE       : 16 FEB, 2013
--PURPOSE    : GENERATE SND MAIN REPORT.

--CREATE PROC [dbo].usp_Report_SND @CompanyId int, @LocationId int,@SNDID int AS

DECLARE @CompanyId INT = 1, @LocationId INT = 11,@SNDID INT = 4 

SET @CompanyId = 1--@CompanyId
SET @LocationId = 11--@LocationId
SET @SNDID = 7--@SNDID
--Declaration for Adjustment
--drop table #TempCollectionReceipt

DECLARE
	@Cash					numeric(15,2),
	@Vault					numeric(15,2),
	@Cheque					numeric(15,2),
	@DD_PO					numeric(15,2),
	@TC 					numeric(15,2),
	@RS 					numeric(15,2),
	@DS_HO					numeric(15,2),
	@OtherDocument			numeric(15,2),
	@BalanceDeposited		numeric(15,2),
	@BankBalance			numeric(15,2),
	@TransferBankDOC		numeric(15,2),
	@RertunDocument			numeric(15,2),
	@BankChanrges			numeric(15,2),
	@Customer_ADJ			numeric(15,2),
	@OS_ADV_ADJ				numeric(15,2),
	@SLN_ADJ				numeric(15,2),
	@CN_ADJ					numeric(15,2),
	@WHT_ADJ				numeric(15,2),
	@IBC_ADJ				numeric(15,2),
	@SHORTAGE				numeric(15,2),
	@ROUNDOFF				numeric(15,2),
	@DS_BR					numeric(15,2),
	@ShortageCollection		numeric(15,2),
	@FromDate				datetime,
	@ToDate					datetime,
	
	--Remittance related variable
	@Remittance_OB						numeric(15,2),
	@Remittance_CollAccChqDishonoured	numeric(15,2),
	@Remittance_CollAccChqRedeposited	numeric(15,2),
	@Remittance_CashInHandDepInHOAcc	numeric(15,2),
	@Remittance_HOC						numeric(15,2),
	@Remittance_TC						numeric(15,2),
	@Remittance_DD_PO					numeric(15,2),
	@Remittance_CASH_DD					numeric(15,2),
	@Remittance_BANK_DD					numeric(15,2),
	@Remittance_OtherDocument			numeric(15,2),
	@Remittance_CollAccChqDepInHOAcc	numeric(15,2),
	@Remittance_TTFromCollAcc			numeric(15,2),
	@Remittance_DirectRemToHODS			numeric(15,2),
	@Remittance_DirectRemToHORS			numeric(15,2),
	@Remittance_TOTALREMITTEDTODAY		numeric(15,2),
	@Remittance_CF						numeric(15,2)
	

SELECT	@FromDate=s.FromDate, 
		@ToDate=s.ToDate 
FROM	SnD s
WHERE	s.CompanyId=@CompanyId and s.LocationId=@LocationID AND s.SnDId=@SNDID



SELECT c.Name AS CompanyName,l.ShortName AS LocationName,s.SnDNumber,s.FromDate,s.ToDate 
FROM snd s 
INNER JOIN Company c ON c.CompanyId = s.CompanyId
INNER JOIN Location l ON s.LocationId=l.LocationId
WHERE	s.CompanyId=@CompanyId and s.LocationId=@LocationID AND s.SnDId=@SNDID


--Create table for SND Reconciliation data
CREATE TABLE #SnDReconciliation (GroupID numeric(5,0),GroupDescription Varchar(50),SortID numeric(5,0),SourceReceipt Varchar(100),CompanyID numeric(9,0),LocationID numeric(9,0),SNDID numeric(9,0),
								Cash numeric(15,2),Cheque numeric(15,2),Vault numeric(15,2),DD_PO numeric(15,2),TC numeric(15,2),OtherDocument numeric(15,2)
								,BalanceDeposited numeric(15,2),BankBalance numeric(15,2),TotalBankBalance numeric(15,2),
								ReturnDocument numeric(15,2),BankCharges numeric(15,2),Shortage numeric(15,2),DirectlyRemitted numeric(15,2),
								Customer_ADJ numeric(15,2), OS_ADV_ADJ numeric(15,2), SLN_ADJ numeric(15,2), CN_ADJ numeric(15,2),
								WHT_ADJ numeric(15,2), IBC_ADJ numeric(15,2), ROUNDOFF numeric(15,2), TOTALREMITTABEBALANCE numeric(15,2))

--Create table for SND Remittance data
CREATE TABLE #SnDRemittance    (SortID numeric(5,0),SourceReceipt Varchar(100),CompanyID numeric(9,0),LocationID numeric(9,0),SNDID numeric(9,0),
								TotalAmount numeric(15,2))


----------------------------------------------------------------------------------------------------------------------------------------
-- BEGIN - SND COLLECTION
----------------------------------------------------------------------------------------------------------------------------------------

CREATE TABLE #TempSnDCollection (CompanyID numeric(9,0),LocationID numeric(9,0),SNDID numeric(9,0),SnDNumber numeric(9,0),SortID numeric(5,0),SourceReceipt Varchar(100),
								Cash numeric(15,2),Cheque numeric(15,2),DD_PO numeric(15,2),TC numeric(15,2)
								,RS numeric(15,2),DS_HO numeric(15,2),DS_BR numeric(15,2),OtherDocument  numeric(15,2),
								Customer_ADJ numeric(15,2), OS_ADV_ADJ numeric(15,2), SLN_ADJ numeric(15,2), CN_ADJ numeric(15,2),
								WHT_ADJ numeric(15,2), IBC_ADJ numeric(15,2),Shortage numeric(15,2), ROUNDOFF numeric(15,2), SUBTOTAL numeric(15,2), ALREADYINREMITTABLE numeric(15,2), ADDEDTOREMITTABLE numeric(15,2))

INSERT INTO #TempSnDCollection
exec usp_Report_SNDCollection @CompanyId,@LocationId,@SnDId
SELECT * FROM #TempSnDCollection

----------------------------------------------------------------------------------------------------------------------------------------
-- END - SND COLLECTION
----------------------------------------------------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------------------------------------------------
-- BEGIN - SND BANK BALANCE
----------------------------------------------------------------------------------------------------------------------------------------

CREATE TABLE #TempBankBalance (BankAccountID int, ShortName VarChar(75), OB int, BalanceDeposited numeric(15,4),BankBalance numeric(15,4))
INSERT INTO #TempBankBalance
exec usp_Report_SND_BankBalance @CompanyId,@LocationId,@SnDId

SELECT BankAccountID,ShortName,isnull(sum(isnull(BalanceDeposited,0)) ,0) AS BalanceDeposited
								,isnull(sum(isnull(BankBalance,0)) ,0) AS BankBalance
FROM #TempBankBalance
GROUP BY BankAccountID,ShortName
---------------------------------------------------------------------------------------------------------------------------------------
-- END - SND BANK BALANCE
----------------------------------------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------------------------------------
-- BEGIN - SND RECONCILLIATION OPENING BALANCE
----------------------------------------------------------------------------------------------------------------------------------------

CREATE TABLE #TempSnDOpeningBalance (CompanyID numeric(9,0),LocationID numeric(9,0),SNDID numeric(9,0),
								Cash numeric(15,2),Cheque numeric(15,2),Vault numeric(15,2),DD_PO numeric(15,2),TC numeric(15,2),OtherDocument numeric(15,2)
								,BalanceDeposited numeric(15,2),BankBalance numeric(15,2),TotalBankBalance numeric(15,2),
								ReturnDocument numeric(15,2),BankCharges numeric(15,2),Shortage numeric(15,2),DirectlyRemitted numeric(15,2),
								Customer_ADJ numeric(15,2), OS_ADV_ADJ numeric(15,2), SLN_ADJ numeric(15,2), CN_ADJ numeric(15,2),
								WHT_ADJ numeric(15,2), IBC_ADJ numeric(15,2), ROUNDOFF numeric(15,2))
INSERT INTO #TempSnDOpeningBalance
exec usp_Report_SNDOpeningBalance @CompanyId,@LocationId,@SnDId

-- Bank Balance Updates

UPDATE #TempSnDOpeningBalance SET BalanceDeposited =	(SELECT isnull(sum(isnull(BalanceDeposited,0)),0) FROM #TempBankBalance WHERE OB=1)
UPDATE #TempSnDOpeningBalance SET BankBalance =			(SELECT isnull(sum(isnull(BankBalance,0)),0) FROM #TempBankBalance WHERE OB=1)

--Reconciliation OPENING BALANCE
----------------------------------------------------------------------------------------------------------------------------------------
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,Cash,Cheque,Vault,DD_PO,TC,OtherDocument
								,BalanceDeposited,BankBalance,TotalBankBalance,ReturnDocument,BankCharges,Shortage,DirectlyRemitted,Customer_ADJ
								,OS_ADV_ADJ,SLN_ADJ,CN_ADJ,WHT_ADJ,IBC_ADJ,ROUNDOFF)	
SELECT		1 AS  GroupID, 'OPENING BALANCE' AS  GroupDescription,1 AS SortID,'OPENING BALANCE' AS SourceReceipt,
			CompanyID,LocationID,SNDID,Cash,Cheque,Vault,DD_PO,TC,OtherDocument,BalanceDeposited,BankBalance,TotalBankBalance = 0--BalanceDeposited + BankBalance
			,ReturnDocument,BankCharges,Shortage,DirectlyRemitted,Customer_ADJ,OS_ADV_ADJ,SLN_ADJ,CN_ADJ,WHT_ADJ,IBC_ADJ,ROUNDOFF
FROM #TempSnDOpeningBalance tsdb
----------------------------------------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------------------------------------
-- END - SND RECONCILLIATION OPENING BALANCE
----------------------------------------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------------------------------------
-- BEGIN - SND RECONCILLIATION 
----------------------------------------------------------------------------------------------------------------------------------------

---GET RECONCILIATION DATA
----------------------------------------------------------------------------------------------------------------------------------------
SELECT	 @CASH			=	ISNULL(sum(isnull(Cash,0)),0)
		,@CHEQUE		=	ISNULL(sum(isnull(Cheque,0)),0)
		,@DD_PO			=	ISNULL(sum(isnull(DD_PO,0)),0)
		,@TC			=	ISNULL(sum(isnull(TC,0)),0)
		,@OtherDocument	=	ISNULL(sum(isnull(OtherDocument,0)),0)
		,@Shortage		=	ISNULL(sum(isnull(Shortage,0)),0) --+ ISNULL(sum(isnull(ROUNDOFF,0)),0)
		,@RS			=	ISNULL(sum(isnull(RS,0)),0)
		,@DS_HO			=	ISNULL(sum(isnull(DS_HO,0)),0)
		,@DS_BR			=	ISNULL(sum(isnull(DS_BR,0)),0)
		,@Remittance_DirectRemToHODS	=	ISNULL(sum(isnull(DS_HO,0)),0)
		,@Remittance_DirectRemToHORS	=	ISNULL(sum(isnull(RS,0)),0)
FROM	#TempSnDCollection tsd

--GET REMITTANCE DATA
SELECT	@Remittance_OB						= sr.OpeningBalance
		,@Remittance_TTFromCollAcc			= sr.TotalCollectionAccountRemittance
		,@Remittance_DD_PO					= sr.TotalBankDD + sr.TotalCashDD
		,@Remittance_CASH_DD				= sr.TotalCashDD
		,@Remittance_BANK_DD				= sr.TotalBankDD 
		,@Remittance_CollAccChqDishonoured	= sr.TotalCollectionAccountReturned
		,@Remittance_CollAccChqRedeposited	= sr.TotalCollectionAccountRedeposited 

FROM	snd s 
		INNER JOIN SnDRemittance sr ON sr.LocationId = s.LocationId AND sr.SnDId = s.SnDId
WHERE	s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL


--GET OTHER REMITTANCE DATA
SELECT	 @Remittance_DD_PO			= @Remittance_DD_PO + isnull(sum(isnull(DD_PO,0)),0)
		,@Remittance_TC				= isnull(sum(isnull(TC,0)),0)
		,@Remittance_OtherDocument	= isnull(sum(isnull(OtherDocument,0)),0)
		
from	(
		SELECT	DD_PO = (CASE WHEN pm.TypeCode IN ('DD','PO') THEN isnull(sum(isnull(PT.Amount,0)),0) ELSE 0 END)
				,TC = (CASE WHEN pm.TypeCode='TC' THEN isnull(sum(isnull(PT.Amount,0)),0) ELSE 0 END)
				,OtherDocument = (CASE WHEN pm.TypeCode NOT IN ('DD','PO','TC','RS') THEN isnull(sum(isnull(PT.Amount,0)),0) ELSE 0 END)
				
		FROM snd s 
		INNER JOIN SnDRemittanceOtherDoc ROD ON s.LocationId=ROD.LocationId AND s.SnDId=ROD.SnDId
		INNER JOIN PaymentTransaction pt ON pt.LocationId = ROD.LocationId AND pt.PaymentTransactionId = ROD.PaymentTransactionId
		INNER JOIN PaymentMode pm ON pt.PaymentModeId=pm.PaymentModeId
		WHERE s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL
		GROUP BY pm.TypeCode
		) tmp



----------------------------------------------------------------------------------------------------------------------------------------
--ADDITION-1: RECEIVED TODAY / DIRECT REMITTED
----------------------------------------------------------------------------------------------------------------------------------------

--ADD: RECEIVED TODAY / DIRECT REMITTED
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID
			,Cash,Cheque,DD_PO,TC,OtherDocument,DirectlyRemitted,BankBalance)
(
SELECT	2 AS  GroupID, 'ADDITION' AS  GroupDescription,1 AS SortID,'ADD: RECEIVED TODAY / DIRECT REMITTED' AS SourceReceipt,@CompanyID,@LocationID,@SNDID
		,@CASH,@CHEQUE,@DD_PO,@TC,@OtherDocument,@RS+@DS_HO,@DS_BR
)		



----------------------------------------------------------------------------------------------------------------------------------------
--ADDITION-2: DEPOSITED IN BANK
----------------------------------------------------------------------------------------------------------------------------------------
--		CASH Deposit in Collection A/C

SELECT	@Cash = sum(cash)
		,@Vault = sum(Vault)
FROM
(
SELECT	Cash=(CASE WHEN scd.VaultCompanyId IS NULL then isnull(sum(isnull(DepositAmount ,0)),0) ELSE 0 END),
		Vault=(CASE WHEN scd.VaultCompanyId IS not NULL then isnull(sum(isnull(DepositAmount ,0)),0) ELSE 0 END)
		
FROM	SnD s 
		LEFT Outer JOIN SnDCashDepositBank scd ON s.LocationId = scd.LocationId AND s.SnDId = scd.SnDId
		LEFT Outer JOIN PaymentTransaction pt ON scd.LocationId=pt.LocationId AND scd.PaymentTransactionId=pt.PaymentTransactionId  
		LEFT Outer JOIN BankAccount ba ON  pt.SystemBankAccountId=ba.BankAccountId 
WHERE	s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL AND ba.AccountType='BR'
GROUP BY s.CompanyId,s.LocationId,s.SnDId,scd.VaultCompanyId
) tmp
--ADD: CASH DEPOSITED IN BANK
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,BankBalance)
(
SELECT	2 AS  GroupID, 'ADDITION' AS  GroupDescription,2 AS SortID,'ADD: DEPOSITED IN BANK' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@Cash+@Vault
)
--LESS: DEPOSITED IN COLLECTION A/C
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,Cash,Vault)
(
SELECT	3 AS  GroupID, 'DEDUCTION' AS  GroupDescription,1 AS SortID,'LESS: DEPOSITED IN COLLECTION A/C' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@Cash,@Vault
)





--		DOC Deposit in bank but not credited



SELECT	@Cheque=isnull(sum(isnull(Cheque,0)),0)
		,@DD_PO=isnull(sum(isnull(DD_PO,0)),0)
		,@TC=isnull(sum(isnull(TC,0)),0)
		,@OtherDocument=isnull(sum(isnull(OtherDocument,0)),0)
		,@TransferBankDOC=isnull(sum(isnull(TransferBankDOC,0)),0)
from	(
		SELECT	Cheque = (CASE WHEN sbd.Type='D' AND pm.TypeCode='CHQ' THEN isnull(sum(isnull(sbd.Amount,0)),0) ELSE 0 END)
				,DD_PO = (CASE WHEN sbd.Type='D' AND pm.TypeCode IN ('DD','PO') THEN isnull(sum(isnull(sbd.Amount,0)),0) ELSE 0 END)
				,TC = (CASE WHEN sbd.Type='D' AND pm.TypeCode='TC' THEN isnull(sum(isnull(sbd.Amount,0)),0) ELSE 0 END)
				,OtherDocument = (CASE WHEN sbd.Type='D' AND pm.TypeCode NOT IN ('CHQ','CASH','DD','PO','TC') THEN isnull(sum(isnull(sbd.Amount,0)),0) ELSE 0 END)
				,TransferBankDOC = (CASE WHEN sbd.Type='T' THEN isnull(sum(isnull(sbd.Amount,0)),0) ELSE 0 END)
		FROM snd s 
		LEFT Outer  JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.DepositedSnDId
		LEFT Outer  JOIN PaymentTransaction pt ON pt.LocationId = sbd.LocationId AND pt.PaymentTransactionId = sbd.PaymentTransactionId
		LEFT Outer  JOIN PaymentMode pm ON pt.PaymentModeId=pm.PaymentModeId
		WHERE sbd.Type IN ('D','T') AND pm.IsToBeDeposited=1 
		AND s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL
		GROUP BY pm.TypeCode,sbd.Type
		) tmp
--ADD: DOC DEPOSITED IN BANK
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,BalanceDeposited)
(
SELECT	2 AS  GroupID, 'ADDITION' AS  GroupDescription,2 AS SortID,'ADD: DEPOSITED IN BANK' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@Cheque+@DD_PO+@TC+@OtherDocument+@TransferBankDOC
)
--LESS: DOC DEPOSITED IN COLLECTION A/C
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,Cheque,DD_PO,TC,OtherDocument,BankBalance)
(
SELECT	3 AS  GroupID, 'DEDUCTION' AS  GroupDescription,1 AS SortID,'LESS: DEPOSITED IN COLLECTION A/C' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@Cheque,@DD_PO,@TC,@OtherDocument,@TransferBankDOC
)
----------------------------------------------------------------------------------------------------------------------------------------
--ADD: RETURNED CHQ. REDEPOSITED
----------------------------------------------------------------------------------------------------------------------------------------
SELECT	@Cheque=isnull(sum(isnull(Cheque,0)),0)
		,@DD_PO=isnull(sum(isnull(DD_PO,0)),0)
		,@TC=isnull(sum(isnull(TC,0)),0)
		,@OtherDocument=isnull(sum(isnull(OtherDocument,0)),0)
		,@TransferBankDOC=isnull(sum(isnull(TransferBankDOC,0)),0)
from	(
		SELECT	Cheque = (CASE WHEN sbd.Type='D' AND pm.TypeCode='CHQ' THEN isnull(sum(isnull(sbd.Amount,0)),0) ELSE 0 END)
				,DD_PO = (CASE WHEN sbd.Type='D' AND pm.TypeCode IN ('DD','PO') THEN isnull(sum(isnull(sbd.Amount,0)),0) ELSE 0 END)
				,TC = (CASE WHEN sbd.Type='D' AND pm.TypeCode='TC' THEN isnull(sum(isnull(sbd.Amount,0)),0) ELSE 0 END)
				,OtherDocument = (CASE WHEN sbd.Type='D' AND pm.TypeCode NOT IN ('CHQ','CASH','DD','PO','TC','DS') THEN isnull(sum(isnull(sbd.Amount,0)),0) ELSE 0 END)
				,TransferBankDOC = (CASE WHEN sbd.Type='T' THEN isnull(sum(isnull(sbd.Amount,0)),0) ELSE 0 END)
		FROM snd s 
		LEFT Outer  JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.DepositedSnDId
		LEFT Outer  JOIN PaymentTransaction pt ON pt.LocationId = sbd.LocationId AND pt.PaymentTransactionId = sbd.PaymentTransactionId
		LEFT Outer  JOIN PaymentMode pm ON pt.PaymentModeId=pm.PaymentModeId
		WHERE sbd.Type IN ('D','T') AND pm.IsToBeDeposited=1 
		AND s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND sbd.LastSettlementSnDId=@SNDID AND s.RollbackDate IS NULL
		--All Redeposit Doc
		AND EXISTS (SELECT sbd2.SnDBankDocMovementId FROM SnDBankDocMovement sbd2 
						WHERE sbd2.PaymentTransactionId=sbd.PaymentTransactionId
						AND sbd2.DepositedSnDId=sbd.LastSettlementSnDId)
		GROUP BY pm.TypeCode,sbd.Type
		) tmp


INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,Cheque,DD_PO,TC,OtherDocument,BankBalance)
(
SELECT	2 AS  GroupID, 'ADDITION' AS  GroupDescription,3 AS SortID,'ADD: RETURNED CHQ. REDEPOSITED' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@Cheque,@DD_PO,@TC,@OtherDocument,@TransferBankDOC
)

INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,BankBalance)
(
SELECT	3 AS  GroupID, 'DEDUCTION' AS  GroupDescription,10 AS SortID,'LESS: COLLECTION A/C CHEQUE REDEPOSITED' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@TransferBankDOC
)
--LESS: RETURN DOCUMENT SETTLEMENT
--INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,ReturnDocument)
--(
--SELECT	3 AS  GroupID, 'DEDUCTION' AS  GroupDescription,11 AS SortID,'LESS: DEDUCTED / ADJUSTED /CLEARED'  AS SourceReceipt
--		,@CompanyID,@LocationID,@SNDID, @Cheque + @DD_PO + @TC + @OtherDocument
--)
----------------------------------------------------------------------------------------------------------------------------------------
--ADD: CHEQUE CLEARED & REMITTABLE BY BANK
----------------------------------------------------------------------------------------------------------------------------------------
SELECT	@BankBalance = isnull(sum(isnull(sbd.Amount,0)),0)
FROM snd s 
LEFT Outer  JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.ClearedSnDId
LEFT Outer  JOIN PaymentTransaction pt ON pt.LocationId = sbd.LocationId AND pt.PaymentTransactionId = sbd.PaymentTransactionId
LEFT Outer  JOIN PaymentMode pm ON pt.PaymentModeId=pm.PaymentModeId
WHERE sbd.Type IN ('D','T') AND pm.IsToBeDeposited=1 
AND s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL

INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,BankBalance)
(
SELECT	2 AS  GroupID, 'ADDITION' AS  GroupDescription,4 AS SortID,'ADD: CHEQUE CLEARED & REMITTABLE BY BANK' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@BankBalance
)
--LESS: DOC DEPOSITED IN COLLECTION A/C
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,BalanceDeposited)
(
SELECT	3 AS  GroupID, 'DEDUCTION' AS  GroupDescription,6 AS SortID,'LESS: CHEQUE CLEARED FROM NOT CREDATED' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@BankBalance
)
----------------------------------------------------------------------------------------------------------------------------------------
--ADD: CASH DD / BANK DD PREPARED
----------------------------------------------------------------------------------------------------------------------------------------
SELECT	@Cash=(CASE WHEN scd.VaultCompanyId IS NULL then isnull(sum(isnull(SCD.Amount  ,0)),0) ELSE 0 END),
		@Vault=(CASE WHEN scd.VaultCompanyId IS not NULL then isnull(sum(isnull(SCD.Amount ,0)),0) ELSE 0 END)
FROM	SnD s 
		LEFT Outer  JOIN SnDCashDD scd ON s.LocationId = scd.LocationId AND s.SnDId = scd.SnDId
WHERE	s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL 
GROUP BY s.CompanyId,s.LocationId,s.SnDId,scd.VaultCompanyId

SELECT	@BankBalance=isnull(sum(isnull(bd.Amount  ,0)),0)
FROM	SnD s 
		LEFT Outer  JOIN SnDBankDD bd ON s.LocationId = bd.LocationId AND s.SnDId = bd.SnDId
WHERE	s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL 
GROUP BY s.CompanyId,s.LocationId,s.SnDId

--ADD: CASH DEPOSITED IN BANK
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,DD_PO)
(
SELECT	2 AS  GroupID, 'ADDITION' AS  GroupDescription,5 AS SortID,'ADD: CASH DD / BANK DD PREPARED' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@Cash+@Vault+@BankBalance
)
--LESS: DEPOSITED IN COLLECTION A/C
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,Cash,Vault,BankBalance)
(
SELECT	3 AS  GroupID, 'DEDUCTION' AS  GroupDescription,4 AS SortID,'LESS: CASH DD / BANK DD PREPARED' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@Cash,@Vault,@BankBalance
)

----------------------------------------------------------------------------------------------------------------------------------------
--ADD: COLLECTION A/C CHEQUE RETURN
----------------------------------------------------------------------------------------------------------------------------------------
SELECT	@BankBalance = isnull(sum(isnull(sbd.Amount,0)),0)
FROM snd s 
LEFT Outer  JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.ReturnedSnDId
LEFT Outer  JOIN PaymentTransaction pt ON pt.LocationId = sbd.LocationId AND pt.PaymentTransactionId = sbd.PaymentTransactionId
LEFT Outer  JOIN PaymentMode pm ON pt.PaymentModeId=pm.PaymentModeId
WHERE sbd.Type IN ('R','T') AND pm.IsToBeDeposited=1 
AND s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL

INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,BankBalance)
(
SELECT	2 AS  GroupID, 'ADDITION' AS  GroupDescription,6 AS SortID,'ADD: COLLECTION A/C CHEQUE RETURN' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@BankBalance
)
----------------------------------------------------------------------------------------------------------------------------------------
--ADD: ADDED / RECEIVED
----------------------------------------------------------------------------------------------------------------------------------------
SET @Customer_ADJ=0
SET @OS_ADV_ADJ=0
SET @WHT_ADJ=0
SET @RertunDocument=0
SET @BankChanrges=0
SET @Cash=0
SET @Vault=0


--RETURN CHQ
SELECT	@RertunDocument = isnull(sum(isnull(sbd.Amount,0)),0)
FROM snd s 
LEFT Outer  JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.ReturnedSnDId
LEFT Outer  JOIN PaymentTransaction pt ON pt.LocationId = sbd.LocationId AND pt.PaymentTransactionId = sbd.PaymentTransactionId
LEFT Outer  JOIN PaymentMode pm ON pt.PaymentModeId=pm.PaymentModeId
WHERE sbd.Type IN ('D') AND pm.IsToBeDeposited=1 
AND s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL

--Customer Advance , OS Advance  Receiving and WHT deducted
SELECT	@Customer_ADJ = isnull(sum(isnull(sc.CustomerAdvance ,0)),0)
		,@OS_ADV_ADJ = isnull(sum(isnull(sc.OutstationAdvance ,0)),0)
		,@WHT_ADJ = isnull(sum(isnull(sc.WHTDeducted,0)),0)
FROM snd s 
LEFT Outer  JOIN SnDCollection sc ON s.LocationId=sc.LocationId AND s.SnDId=sc.SnDId
WHERE s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL

--Bank Charges
SELECT	@BankChanrges = isnull(sum(isnull(bc.Amount ,0)),0)
FROM snd s 
LEFT Outer  JOIN SnDBankCharges bc ON s.LocationId=bc.LocationId AND s.SnDId=bc.SnDId
WHERE s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL


--SND Cash Reduction
SELECT	@Cash = isnull(sum(isnull(cr.ReductionAmount ,0)),0)
FROM snd s 
LEFT Outer  JOIN SnDCashReduction cr ON s.LocationId=cr.LocationId AND s.SnDId=cr.SnDId
WHERE s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL

--Cash Deposit in Vault
SELECT	@Vault = isnull(sum(isnull(cd.DepositedInVault ,0)),0)
FROM snd s 
LEFT Outer  JOIN SnDCashDetail cd ON s.LocationId=cd.LocationId AND s.SnDId=cd.SnDId
WHERE s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL


--SLN
SELECT @SLN_ADJ= isnull(sum(isnull(s.TotalNet ,0)),0) --*-1
FROM SLN s
WHERE  s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.BLMApprovalDate BETWEEN @FromDate AND @Todate AND s.totalnet>0

--CN
SELECT @CN_ADJ = isnull(sum(isnull(cn.Amount  ,0)),0) --*-1
FROM CustomerCreditNote cn
WHERE  cn.CompanyId=@CompanyId AND cn.LocationId=@LocationID AND cn.BranchApprovalDate BETWEEN @FromDate AND @Todate AND cn.Amount>0

--IBC --CHANGED BY OVAIS ON 24 OCT 2013
SELECT @IBC_ADJ = isnull(sum(isnull(ibc.TotalAmount  ,0)),0) --* -1
--FROM InterBranchCollection ibc
--WHERE  ibc.CompanyId=@CompanyId AND ibc.LocationId=@LocationID AND ibc.ApprovalDate BETWEEN @FromDate AND @Todate AND ibc.TotalAmount>0
FROM InterBranchCollection ibc
INNER JOIN SnDInterBranchCollection sibc ON sibc.LocationId = ibc.LocationId AND sibc.InterBranchCollectionId = ibc.InterBranchCollectionId
INNER JOIN snd s ON s.LocationId = sibc.LocationId AND s.SnDId = sibc.SnDId AND s.CompanyId=ibc.CompanyId
WHERE s.CompanyId=@CompanyId AND s.LocationId=@LocationId AND s.SnDId = @SNDID AND s.RollbackDate IS NULL


--ADDED / RECEIVED
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,Vault,ReturnDocument,BankCharges
								,Shortage,Customer_ADJ,OS_ADV_ADJ,SLN_ADJ,CN_ADJ,WHT_ADJ,IBC_ADJ)
(
SELECT	2 AS  GroupID, 'ADDITION' AS  GroupDescription,7 AS SortID,'ADD: ADDED / RECEIVED' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@Vault,@RertunDocument,@BankChanrges,@SHORTAGE+@CASH,@Customer_ADJ,@OS_ADV_ADJ,@SLN_ADJ,@CN_ADJ,@WHT_ADJ,@IBC_ADJ
)

--LESS: CHEQUE DISHONOURED
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,BalanceDeposited)
(
SELECT	3 AS  GroupID, 'DEDUCTION' AS  GroupDescription,7 AS SortID,'LESS: CHEQUE DISHONOURED' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@RertunDocument
)
--LESS: BANK CHARGES
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,BankBalance)
(
SELECT	3 AS  GroupID, 'DEDUCTION' AS  GroupDescription,8 AS SortID,'LESS: BANK CHARGES' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@BankChanrges
)
--LESS: CASH DEPOSIT IN VAULT
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,Cash)
(
SELECT	3 AS  GroupID, 'DEDUCTION' AS  GroupDescription,11 AS SortID,'LESS: DEDUCTED / ADJUSTED /CLEARED'  AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@Vault
)


SET @Vault=0
--Cash Received From Vault
SELECT	@Vault = isnull(sum(isnull(cd.ReceivedFromVault ,0)),0)
FROM snd s 
LEFT Outer  JOIN SnDCashDetail cd ON s.LocationId=cd.LocationId AND s.SnDId=cd.SnDId
WHERE s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL
--ADDED / RECEIVED
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,Cash)
(
SELECT	2 AS  GroupID, 'ADDITION' AS  GroupDescription,7 AS SortID,'ADD: ADDED / RECEIVED' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@Vault
)
--LESS: CASH DEPOSIT IN VAULT
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,Vault)
(
SELECT	3 AS  GroupID, 'DEDUCTION' AS  GroupDescription,11 AS SortID,'LESS: DEDUCTED / ADJUSTED /CLEARED'  AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@Vault
)


----------------------------------------------------------------------------------------------------------------------------------------
--LESS: DEPOSITED IN HO A/C
----------------------------------------------------------------------------------------------------------------------------------------
SET @Cash=0
SET @Vault=0
SET @Remittance_CashInHandDepInHOAcc=0
SET @DD_PO=0
SET @TC=0
SET @OtherDocument=0

SELECT	@Cash=(CASE WHEN scd.VaultCompanyId IS NULL then isnull(sum(isnull(DepositAmount ,0)),0) ELSE 0 END)
		,@Vault=(CASE WHEN scd.VaultCompanyId IS not NULL then isnull(sum(isnull(DepositAmount ,0)),0) ELSE 0 END)
		,@Remittance_CashInHandDepInHOAcc = isnull(sum(isnull(DepositAmount ,0)),0)
		
FROM	SnD s 
		LEFT Outer  JOIN SnDCashDepositBank scd ON s.LocationId = scd.LocationId AND s.SnDId = scd.SnDId
		LEFT Outer  JOIN PaymentTransaction pt ON scd.LocationId=pt.LocationId AND scd.PaymentTransactionId=pt.PaymentTransactionId  
		LEFT Outer  JOIN BankAccount ba ON pt.CompanyId=ba.CompanyId and pt.SystemBankAccountId=ba.BankAccountId  AND ba.CloseDate IS null
WHERE	s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL  AND ba.AccountType IN ('HO','HOBR')
GROUP BY s.CompanyId,s.LocationId,s.SnDId,scd.VaultCompanyId

SET @Cash = isnull(@Cash,0)
SET @Vault = isnull(@Vault,0)
SET @Remittance_CashInHandDepInHOAcc = isnull(@Remittance_CashInHandDepInHOAcc,0)

SELECT	@DD_PO			= isnull(sum((CASE WHEN pm.TypeCode IN ('DD','PO') THEN pt.Amount ELSE 0 END)),0) ,
		@TC				= isnull(sum((CASE WHEN pm.TypeCode='TC' THEN pt.Amount ELSE 0 END)),0),
		@OtherDocument	=	isnull(sum((CASE WHEN pm.TypeCode NOT IN ('DD','PO','TC') THEN pt.Amount ELSE 0 END)),0)
FROM	snd s 
		LEFT OUTER JOIN SnDRemittanceOtherDoc sro ON sro.LocationId = s.LocationId AND sro.SnDId = s.SnDId
		LEFT OUTER JOIN PaymentTransaction pt ON pt.LocationId = sro.LocationId AND pt.PaymentTransactionId = sro.PaymentTransactionId 
		LEFT OUTER JOIN PaymentMode pm ON pm.PaymentModeId= pt.PaymentModeId AND pm.IsToBeRemitted=1 
WHERE	s.CompanyId =@CompanyId and s.LocationId=@LocationID AND s.SnDId = @SNDID


--LESS: DEPOSITED IN COLLECTION A/C
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,Cash,Vault,DD_PO,TC,OtherDocument)
(
SELECT	3 AS  GroupID, 'DEDUCTION' AS  GroupDescription,2 AS SortID,'LESS: DEPOSITED IN HO A/C' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@Cash,@Vault,@DD_PO,@TC,@OtherDocument
)



----------------------------------------------------------------------------------------------------------------------------------------
--LESS: WITHDRAWAL AG. HOC
----------------------------------------------------------------------------------------------------------------------------------------
SELECT	@Cash	=	isnull(sum(isnull(h.Amount ,0)),0) 
		,@Remittance_HOC=	isnull(sum(isnull(h.Amount ,0)),0) 
FROM	HOC h 
WHERE	h.CompanyId=@CompanyId AND h.LocationId=@LocationID AND h.WithdrawSnDId=@SNDID AND h.ApprovalDate IS NOT null


--LESS: DEPOSITED IN COLLECTION A/C
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,Cash)
(
SELECT	3 AS  GroupID, 'DEDUCTION' AS  GroupDescription,3 AS SortID,'LESS: WITHDRAWAL AG. HOC' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@Cash
)


----------------------------------------------------------------------------------------------------------------------------------------
--LESS: COLLECTION A/C CHEQUE DEPOSITED
----------------------------------------------------------------------------------------------------------------------------------------
SELECT @Remittance_CollAccChqDepInHOAcc = sum(Remittance_CollAccChqDepInHOAcc)
		,@Remittance_TTFromCollAcc=sum(Remittance_TTFromCollAcc)
FROM
(
SELECT	--@BankBalance = isnull(sum(isnull(sbd.Amount,0)),0)
		Remittance_CollAccChqDepInHOAcc = (CASE WHEN pm.IsDirectRemitted<>1 THEN isnull(sum(isnull(sbd.Amount,0)),0) ELSE 0 END)
		,Remittance_TTFromCollAcc = (CASE WHEN pm.IsDirectRemitted=1 THEN isnull(sum(isnull(sbd.Amount,0)),0) ELSE 0 END)
		
FROM snd s 
LEFT Outer JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.DepositedSnDId
LEFT Outer  JOIN PaymentTransaction pt ON pt.LocationId = sbd.LocationId AND pt.PaymentTransactionId = sbd.PaymentTransactionId
LEFT Outer  JOIN PaymentMode pm ON pt.PaymentModeId=pm.PaymentModeId
WHERE sbd.Type IN ('R') --AND pm.IsToBeDeposited=1 
AND s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL
GROUP BY pm.IsDirectRemitted
) tmp

--LESS: DOC DEPOSITED IN COLLECTION A/C
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,BankBalance)
(
SELECT	3 AS  GroupID, 'DEDUCTION' AS  GroupDescription,9 AS SortID,'LESS: COLLECTION A/C CHEQUE DEPOSITED' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@Remittance_CollAccChqDepInHOAcc
)
----------------------------------------------------------------------------------------------------------------------------------------
--LESS: SENT / TRANSFERRED TO HO
----------------------------------------------------------------------------------------------------------------------------------------

--LESS: SENT / TRANSFERRED TO HO
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,BankBalance, DD_PO)
(
SELECT	3 AS  GroupID, 'DEDUCTION' AS  GroupDescription,5 AS SortID,'LESS: SENT / TRANSFERRED TO HO' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@Remittance_TTFromCollAcc,@Remittance_CASH_DD+@Remittance_BANK_DD
)
--LESS: COLLECTION A/C CHEQUE REDEPOSITED
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,BalanceDeposited)
(
SELECT	3 AS  GroupID, 'DEDUCTION' AS  GroupDescription,10 AS SortID,'LESS: COLLECTION A/C CHEQUE REDEPOSITED' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@Remittance_CollAccChqRedeposited
)


--SELECT * FROM SnDRemittance sdd


----------------------------------------------------------------------------------------------------------------------------------------
--LESS: DEDUCTED / ADJUSTED / CLEARED
----------------------------------------------------------------------------------------------------------------------------------------
--Bank Charges Recorded
--SELECT	@BankBalance = isnull(sum(isnull(bc.Amount ,0)),0)
--FROM snd s 
--LEFT Outer  JOIN SnDBankCharges bc ON s.LocationId=bc.LocationId AND s.SnDId=bc.SnDId
--WHERE s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL

--Bank Charges Collected
--SELECT	@BankChanrges = isnull(sum(isnull(bc.Amount ,0)),0)
--FROM snd s 
--LEFT Outer JOIN SnDBankCharges bc ON s.LocationId=bc.LocationId AND s.SnDId=bc.CollectionSnDId
--WHERE s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL

--SND Cash Reduction
SELECT	@Cash = isnull(sum(isnull(cr.ReductionAmount ,0)),0)
FROM snd s 
LEFT Outer JOIN SnDCashReduction cr ON s.LocationId=cr.LocationId AND s.SnDId=cr.SnDId
WHERE s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL


SELECT	@ShortageCollection = isnull(sum(isnull(SC.CollectedAmount ,0)),0)
FROM snd s 
LEFT Outer JOIN SnDShortageCollection SC ON s.LocationId=SC.LocationId AND s.SnDId=SC.SnDId
WHERE s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL



SELECT	 @RS			=	ISNULL(sum(isnull(RS,0)),0)
		,@DS_HO			=	ISNULL(sum(isnull(DS_HO,0)),0)
		,@IBC_ADJ		=	ISNULL(sum(isnull(IBC_ADJ,0)),0)
		,@Customer_ADJ	=	ISNULL(sum(isnull(Customer_ADJ,0)),0)
		,@OS_ADV_ADJ	=	ISNULL(sum(isnull(OS_ADV_ADJ,0)),0)
		,@SLN_ADJ		=	ISNULL(sum(isnull(SLN_ADJ,0)),0)
		--,@WHT_ADJ		=	ISNULL(sum(isnull(WHT_ADJ,0)),0)
		,@CN_ADJ		=	ISNULL(sum(isnull(CN_ADJ,0)),0)
FROM #TempSnDCollection tsd


SELECT @RertunDocument= isnull(sum(isnull(sd.SettlementAmount, 0) ),0)
FROM    SnD s LEFT Outer JOIN
		SnDBankDocSettlement sd ON sd.LocationId = s.LocationId AND sd.SnDId = s.SnDId
WHERE	s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL

--WHT
SELECT @WHT_ADJ = isnull(sum(isnull(wr.AdjustedAmount  ,0)),0)
FROM WHTReversal wr 
WHERE  wr.CompanyId=@CompanyId AND wr.LocationId=@LocationID AND wr.ApprovalDate BETWEEN @FromDate AND @Todate AND wr.AdjustedAmount>0

SELECT @WHT_ADJ =@WHT_ADJ + isnull(sum(isnull(wso.AdjustedAmount  ,0)),0)
FROM WHTChallanSaleOrder wso 
WHERE  wso.LocationId=@LocationID AND CONVERT(datetime,CONVERT(varchar(10),wso.insertdate,101)) BETWEEN @FromDate AND @Todate AND wso.AdjustedAmount>0


--LESS: DOC DEPOSITED IN COLLECTION A/C
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,Cash,ReturnDocument
								,Shortage,DirectlyRemitted,Customer_ADJ,OS_ADV_ADJ,SLN_ADJ,CN_ADJ,WHT_ADJ,IBC_ADJ)
(
SELECT	3 AS  GroupID, 'DEDUCTION' AS  GroupDescription,11 AS SortID,'LESS: DEDUCTED / ADJUSTED /CLEARED' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@Cash,@RertunDocument,@ShortageCollection,@DS_HO+@RS
		,@Customer_ADJ,@OS_ADV_ADJ,@SLN_ADJ,@CN_ADJ,@WHT_ADJ,@IBC_ADJ
)

SELECT GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID
		,ISNULL(SUM(ISNULL(Cash,0)),0) AS Cash
		,ISNULL(SUM(ISNULL(Cheque,0)),0) AS Cheque
		,ISNULL(SUM(ISNULL(Vault,0)),0) AS Vault
		,ISNULL(SUM(ISNULL(DD_PO,0)),0) AS DD_PO
		,ISNULL(SUM(ISNULL(TC,0)),0) AS TC
		,ISNULL(SUM(ISNULL(OtherDocument,0)),0) AS OtherDocument
		,ISNULL(SUM(ISNULL(BalanceDeposited,0)),0) AS BalanceDeposited
		,ISNULL(SUM(ISNULL(BankBalance,0)),0) AS BankBalance
		,ISNULL(SUM(ISNULL(TotalBankBalance,0)),0) AS TotalBankBalance
		,ISNULL(SUM(ISNULL(ReturnDocument,0)),0) AS ReturnDocument
		,ISNULL(SUM(ISNULL(BankCharges,0)),0) AS BankCharges
		,ISNULL(SUM(ISNULL(Shortage,0)),0) AS Shortage
		,ISNULL(SUM(ISNULL(DirectlyRemitted,0)),0) AS DirectlyRemitted
		,ISNULL(SUM(ISNULL(Customer_ADJ,0)),0) AS Customer_ADJ
		,ISNULL(SUM(ISNULL(OS_ADV_ADJ,0)),0) AS OS_ADV_ADJ
		,ISNULL(SUM(ISNULL(SLN_ADJ,0)),0) AS SLN_ADJ
		,ISNULL(SUM(ISNULL(CN_ADJ,0)),0) AS CN_ADJ
		,ISNULL(SUM(ISNULL(WHT_ADJ,0)),0) AS WHT_ADJ
		,ISNULL(SUM(ISNULL(IBC_ADJ,0)),0) AS IBC_ADJ
		,ISNULL(SUM(ISNULL(ROUNDOFF,0)),0) AS ROUNDOFF
		,ISNULL(SUM(ISNULL(TOTALREMITTABEBALANCE,0)),0) AS TOTALREMITTABEBALANCE
		
FROM #SnDReconciliation
GROUP BY GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID

---------------------------------------------------------------------------------------------------------------------------------------
-- END - SND RECONCILLIATION 
----------------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------------------------
-- BEGIN - REIMTTANCE RELATED INFORMATION
----------------------------------------------------------------------------------------------------------------------------------------

	--REMITTANCE-1   (REMITTANCE TO HO B/F)
	INSERT INTO #SnDRemittance(SortID,SourceReceipt,CompanyID,LocationID,SNDID,TotalAmount)
	(
	SELECT	1 AS SortID,
			'REMITTANCE TO HO B/F' AS SourceReceipt,
			@CompanyID,
			@LocationID,
			@SNDID,
			isnull(@Remittance_OB,0)
	)
	
	--REMITTANCE-2   (ADD: COLLECTION A/C CHEQUE DISHONOURED)
	INSERT INTO #SnDRemittance(SortID,SourceReceipt,CompanyID,LocationID,SNDID,TotalAmount)
	(
	SELECT	2 AS SortID,'ADD: COLLECTION A/C CHEQUE DISHONOURED' AS SourceReceipt
			,@CompanyID,@LocationID,@SNDID,isnull(@Remittance_CollAccChqDishonoured,0)
	)
	
	--REMITTANCE-3   (LESS: COLLECTION A/C CHEQUE REDEPOSITED)
	INSERT INTO #SnDRemittance(SortID,SourceReceipt,CompanyID,LocationID,SNDID,TotalAmount)
	(
	SELECT	3 AS SortID,'LESS: COLLECTION A/C CHEQUE REDEPOSITED' AS SourceReceipt
			,@CompanyID,@LocationID,@SNDID,isnull(@Remittance_CollAccChqRedeposited,0)
	)
	
	--REMITTANCE-4   (REMITTABLE BALANCE TOTAL:')
	INSERT INTO #SnDRemittance(SortID,SourceReceipt,CompanyID,LocationID,SNDID,TotalAmount)
	(
	SELECT	4 AS SortID,'TOTAL BEFORE TODAY REMITTANCE:' AS SourceReceipt
			,@CompanyID,@LocationID,@SNDID,isnull(@Remittance_OB,0)  + isnull(@Remittance_CollAccChqDishonoured,0) - isnull(@Remittance_CollAccChqRedeposited,0)
	)
	
	--REMITTANCE-5   (ADD: CASH IN HAND DEPOSITED IN HO A/C)
	INSERT INTO #SnDRemittance(SortID,SourceReceipt,CompanyID,LocationID,SNDID,TotalAmount)
	(
	SELECT	5 AS SortID,'CASH IN HAND DEPOSITED IN HO A/C' AS SourceReceipt
			,@CompanyID,@LocationID,@SNDID,isnull(@Remittance_CashInHandDepInHOAcc,0)
	)
	
	--REMITTANCE-6   (REMITTANCE - HOC)
	INSERT INTO #SnDRemittance(SortID,SourceReceipt,CompanyID,LocationID,SNDID,TotalAmount)
	(
	SELECT	6 AS SortID,'HOC' AS SourceReceipt
			,@CompanyID,@LocationID,@SNDID,isnull(@Remittance_HOC,0)
	)
	
	--REMITTANCE-7   (TC)
	INSERT INTO #SnDRemittance(SortID,SourceReceipt,CompanyID,LocationID,SNDID,TotalAmount)
	(
	SELECT	7 AS SortID,'TC' AS SourceReceipt
			,@CompanyID,@LocationID,@SNDID,isnull(@Remittance_TC,0)
	)
	
	--REMITTANCE-8   (DD / PO)
	INSERT INTO #SnDRemittance(SortID,SourceReceipt,CompanyID,LocationID,SNDID,TotalAmount)
	(
	SELECT	8 AS SortID,'DD / PO' AS SourceReceipt
			,@CompanyID,@LocationID,@SNDID,isnull(@Remittance_DD_PO,0)
	)
	
	--REMITTANCE-9   (OTHER DOCUMENT)
	INSERT INTO #SnDRemittance(SortID,SourceReceipt,CompanyID,LocationID,SNDID,TotalAmount)
	(
	SELECT	9 AS SortID,'OTHER DOCUMENT' AS SourceReceipt
			,@CompanyID,@LocationID,@SNDID,isnull(@Remittance_OtherDocument,0)
	)
	
	--REMITTANCE-10   (COLLECTION A/C CHEQUE DEPOSITED IN HO A/C)
	INSERT INTO #SnDRemittance(SortID,SourceReceipt,CompanyID,LocationID,SNDID,TotalAmount)
	(
	SELECT	10 AS SortID,'COLLECTION A/C CHEQUE DEPOSITED IN HO A/C' AS SourceReceipt
			,@CompanyID,@LocationID,@SNDID,isnull(@Remittance_CollAccChqDepInHOAcc,0)
	)

	--REMITTANCE-11   (REMITTANCE FROM COLLECTION A/C (ET/TT/MT))
	INSERT INTO #SnDRemittance(SortID,SourceReceipt,CompanyID,LocationID,SNDID,TotalAmount)
	(
	SELECT	11 AS SortID,'REMITTANCE FROM COLLECTION A/C (ET/TT/MT)' AS SourceReceipt
			,@CompanyID,@LocationID,@SNDID,isnull(@Remittance_TTFromCollAcc,0)
	)

	--REMITTANCE-12   (DIRECT REMITTANCE TO HO - DEPOSIT SLIP)
	INSERT INTO #SnDRemittance(SortID,SourceReceipt,CompanyID,LocationID,SNDID,TotalAmount)
	(
	SELECT	12 AS SortID,'DIRECT REMITTANCE TO HO - DEPOSIT SLIP' AS SourceReceipt
			,@CompanyID,@LocationID,@SNDID,isnull(@Remittance_DirectRemToHODS,0)
	)

	--REMITTANCE-13   (DIRECT REMITTANCE TO HO - REMITTANCE SLIP)
	INSERT INTO #SnDRemittance(SortID,SourceReceipt,CompanyID,LocationID,SNDID,TotalAmount)
	(
	SELECT	13 AS SortID,'DIRECT REMITTANCE TO HO - REMITTANCE SLIP' AS SourceReceipt
			,@CompanyID,@LocationID,@SNDID,isnull(@Remittance_DirectRemToHORS,0)
	)
	
	--REMITTANCE-14   (REMITTED TODAY'S TOTAL)

	SET @Remittance_TOTALREMITTEDTODAY =	isnull(@Remittance_CashInHandDepInHOAcc,0)
											+ isnull(@Remittance_HOC,0)
											+ isnull(@Remittance_DD_PO,0)
											+ isnull(@Remittance_TC,0)
											+ isnull(@Remittance_OtherDocument,0)
											+ isnull(@Remittance_CollAccChqDepInHOAcc,0)
											+ isnull(@Remittance_TTFromCollAcc,0)
											+ isnull(@Remittance_DirectRemToHODS,0)
											+ isnull(@Remittance_DirectRemToHORS,0)

	INSERT INTO #SnDRemittance(SortID,SourceReceipt,CompanyID,LocationID,SNDID,TotalAmount)
	(
	SELECT	14 AS SortID,'TOTAL REMITTED TODAY:' AS SourceReceipt
			,@CompanyID,@LocationID,@SNDID, isnull(@Remittance_TOTALREMITTEDTODAY,0)
	)


	--REMITTANCE-15   (REMITTANCE CF)

	SELECT @Remittance_CF = SUM(ADDEDTOREMITTABLE) FROM #TempSnDCollection 
	SET @Remittance_CF = @Remittance_CF + @Remittance_OB + @Remittance_CollAccChqDishonoured - @Remittance_CollAccChqRedeposited - @Remittance_TOTALREMITTEDTODAY

	INSERT INTO #SnDRemittance(SortID,SourceReceipt,CompanyID,LocationID,SNDID,TotalAmount)
	(
	SELECT	15 AS SortID,'TOTAL REMITTANCE TO HO C/F:' AS SourceReceipt
			,@CompanyID,@LocationID,@SNDID,@Remittance_CF
	)


	SELECT * FROM #SnDRemittance

----------------------------------------------------------------------------------------------------------------------------------------
-- END - REIMTTANCE RELATED INFORMATION
----------------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------------------------
-- BEGIN - SND BANK DEBIT ADVICE
----------------------------------------------------------------------------------------------------------------------------------------

	Declare		@DepositedDate datetime,
				@TransactionDate datetime,
				@PreviousSNDID	numeric(5,0),
				@DayBeforePreviousSNDID	numeric(5,0),
				@DefaultBank numeric(15,4),
				@OtherBank numeric(15,4)

	set  @PreviousSNDID				=	(SELECT max(sndid) FROM snd s WHERE s.CompanyId =@CompanyId  AND s.LocationId=@LocationId AND s.SnDId < @SNDID AND s.RollbackDate IS NULL)
	set  @DayBeforePreviousSNDID	=	(SELECT max(sndid) FROM snd s WHERE s.CompanyId =@CompanyId  AND s.LocationId=@LocationId AND s.SnDId < @PreviousSNDID AND s.RollbackDate IS NULL)


	--CREATE TABLE FOR SND BANK DEBIT ADVICE
	CREATE TABLE #SnDDebitAdvice    (SortID numeric(5,0),SourceReceipt Varchar(100),DepositedDate datetime,TransactionDate datetime,
									 DefaultBankAmount numeric(15,2),OtherBankAmount numeric(15,2))


--CASH DEPOSITED PREVIOUS DAY

	SET		@DepositedDate=null
	SET		@TransactionDate=NULL
	SET		@DefaultBank=0
	SET		@OtherBank=0
		
	
	SELECT	@DepositedDate		=	s.ToDate,
			@TransactionDate	=	s.ToDate,
			@DefaultBank		=	(CASE WHEN bas.IsDefault=1 THEN isnull(sum(isnull(scd.DepositAmount,0)),0)  ELSE 0 END), 
			@OtherBank			=	(CASE WHEN bas.IsDefault<>1 THEN isnull(sum(isnull(scd.DepositAmount,0)),0)  ELSE 0 END)
	FROM snd s 
	INNER JOIN SnDCashDepositBank scd ON s.LocationId=scd.LocationId AND s.SnDId=scd.SnDId
	INNER JOIN PaymentTransaction pt ON pt.LocationId = scd.LocationId AND pt.PaymentTransactionId = scd.PaymentTransactionId
	INNER JOIN uv_SystemBankAccounts sba ON pt.SystemBankAccountId=sba.BankAccountId AND pt.LocationId=sba.LocationId
	INNER JOIN BankAccountSequence bas ON bas.LocationId= sba.LocationId AND bas.BankAccountId= sba.BankAccountId 
	WHERE s.CompanyId=@CompanyId AND s.LocationId=@LocationId AND s.SnDId = @PreviousSNDID 
	GROUP BY s.ToDate,bas.IsDefault
	
	INSERT INTO #SnDDebitAdvice
	SELECT 1,'CASH DEPOSITED PREVIOUS DAY',@DepositedDate,@TransactionDate, @DefaultBank, @OtherBank

uno

	INSERT INTO #SnDDebitAdvice		
	SELECT	1,'CASH DEPOSITED PREVIOUS DAY', DepositedDate		=	s.ToDate,
			TransactionDate	=	s.ToDate,
			DefaultBank		=	(CASE WHEN bas.IsDefault=1 THEN isnull(sum(isnull(spt.AdjustedAmount,0)),0)  ELSE 0 END), 
			OtherBank			=	(CASE WHEN bas.IsDefault<>1 THEN isnull(sum(isnull(spt.AdjustedAmount,0)),0)  ELSE 0 END)
	FROM snd s
	INNER JOIN uv_SNDPaymentTransaction spt ON s.LocationId=spt.LocationId AND s.SnDId=spt.SnDId
	INNER JOIN PaymentTransaction pt ON pt.LocationId = spt.LocationId AND pt.PaymentTransactionId = spt.PaymentTransactionId
	INNER JOIN Paymentmode pm ON pt.PaymentModeId=pm.PaymentModeId
	INNER JOIN uv_SystemBankAccounts sba ON pt.SystemBankAccountId=sba.BankAccountId AND pt.LocationId=sba.LocationId
	INNER JOIN BankAccountSequence bas ON bas.LocationId= sba.LocationId AND bas.BankAccountId= sba.BankAccountId 
	WHERE s.CompanyId=@CompanyId AND s.LocationId=@LocationId AND s.SnDId = @PreviousSNDID   AND s.RollbackDate IS null
	AND pm.IsDirectDeposited=1
	GROUP BY s.ToDate,bas.IsDefault

--CHQS DEPOSITED DAY BEFORE PREVIOUS DAY

	SET		@DepositedDate		= (SELECT todate FROM snd s WHERE s.CompanyId =@CompanyId  AND s.LocationId=@LocationId AND s.SnDId = @DayBeforePreviousSNDID )
	SET		@TransactionDate	= (SELECT todate FROM snd s WHERE s.CompanyId =@CompanyId  AND s.LocationId=@LocationId AND s.SnDId = @SNDID )
	SET		@DefaultBank		= 0
	SET		@OtherBank			= 0
			
	SELECT	@DefaultBank		=	(CASE WHEN bas.IsDefault=1 THEN isnull(sum(isnull(sbd.Amount,0)),0)  ELSE 0 END), 
			@OtherBank			=	(CASE WHEN bas.IsDefault<>1 THEN isnull(sum(isnull(sbd.Amount,0)),0)  ELSE 0 END)
	FROM snd s 
	inner JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.DepositedSnDId
	INNER JOIN uv_SystemBankAccounts usba ON usba.LocationId = sbd.LocationId AND usba.BankAccountId = sbd.BankAccountId
	INNER JOIN BankAccountSequence bas ON bas.LocationId = usba.LocationId AND bas.BankAccountId = usba.BankAccountId
	WHERE sbd.Type = 'D' 
	AND s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId = @DayBeforePreviousSNDID   AND s.RollbackDate IS null
	--Exclude Redeposit Doc
	AND NOT EXISTS (SELECT	sbd2.SnDBankDocMovementId FROM SnDBankDocMovement sbd2 
					WHERE	sbd2.PaymentTransactionId=sbd.PaymentTransactionId
					AND     sbd2.LocationId = sbd.LocationId
					AND		sbd2.DepositedSnDId=sbd.LastSettlementSnDId)
	GROUP BY bas.IsDefault,s.ToDate
	
	INSERT INTO #SnDDebitAdvice
	SELECT 2,'ADD: CHQS DEPOSITED DAY BEFORE PREVIOUS DAY',@DepositedDate,@TransactionDate, @DefaultBank, @OtherBank


--LESS: SAME BANK CHQ. CLEARED PREV. DAY

	SET		@DepositedDate		= (SELECT todate FROM snd s WHERE s.CompanyId =@CompanyId  AND s.LocationId=@LocationId AND s.SnDId = @DayBeforePreviousSNDID )
	SET		@TransactionDate	= (SELECT todate FROM snd s WHERE s.CompanyId =@CompanyId  AND s.LocationId=@LocationId AND s.SnDId = @PreviousSNDID )
	SET		@DefaultBank		= 0
	SET		@OtherBank			= 0
			
	SELECT	@DefaultBank		=	(CASE WHEN bas.IsDefault=1 THEN isnull(sum(isnull(sbd.Amount,0)),0)  * -1  ELSE 0 END), 
			@OtherBank			=	(CASE WHEN bas.IsDefault<>1 THEN isnull(sum(isnull(sbd.Amount,0)),0) * -1  ELSE 0 END)
	FROM snd s 
	inner JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.DepositedSnDId
	INNER JOIN uv_SystemBankAccounts usba ON usba.LocationId = sbd.LocationId AND usba.BankAccountId = sbd.BankAccountId
	INNER JOIN BankAccountSequence bas ON bas.LocationId = usba.LocationId AND bas.BankAccountId = usba.BankAccountId
	WHERE sbd.Type = 'D' 
	AND s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId = @DayBeforePreviousSNDID AND sbd.ClearedSnDId=@PreviousSNDID  AND s.RollbackDate IS null
	--Exclude Redeposit Doc
	AND NOT EXISTS (SELECT	sbd2.SnDBankDocMovementId FROM SnDBankDocMovement sbd2 
					WHERE	sbd2.PaymentTransactionId=sbd.PaymentTransactionId
					AND     sbd2.LocationId = sbd.LocationId
					AND		sbd2.DepositedSnDId=sbd.LastSettlementSnDId)
	GROUP BY bas.IsDefault,s.ToDate
	
	INSERT INTO #SnDDebitAdvice
	SELECT 3,'LESS: SAME BANK CHQ. CLEARED PREV. DAY',@DepositedDate,@TransactionDate, @DefaultBank, @OtherBank


--ADD: SAME BANK CHQ. DEP. PREV. DAY CLEARED

	SET		@DepositedDate		= (SELECT todate FROM snd s WHERE s.CompanyId =@CompanyId  AND s.LocationId=@LocationId AND s.SnDId = @PreviousSNDID )
	SET		@TransactionDate	= (SELECT todate FROM snd s WHERE s.CompanyId =@CompanyId  AND s.LocationId=@LocationId AND s.SnDId = @SNDID )
	SET		@DefaultBank		= 0
	SET		@OtherBank			= 0
			
	SELECT	@DefaultBank		=	(CASE WHEN bas.IsDefault=1 THEN isnull(sum(isnull(sbd.Amount,0)),0)  ELSE 0 END), 
			@OtherBank			=	(CASE WHEN bas.IsDefault<>1 THEN isnull(sum(isnull(sbd.Amount,0)),0)  ELSE 0 END)
	FROM snd s 
	inner JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.DepositedSnDId
	INNER JOIN uv_SystemBankAccounts usba ON usba.LocationId = sbd.LocationId AND usba.BankAccountId = sbd.BankAccountId
	INNER JOIN BankAccountSequence bas ON bas.LocationId = usba.LocationId AND bas.BankAccountId = usba.BankAccountId
	WHERE sbd.Type = 'D' 
	AND s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId = @PreviousSNDID AND sbd.ClearedSnDId = @SNDID  AND s.RollbackDate IS null
	--Exclude Redeposit Doc
	AND NOT EXISTS (SELECT	sbd2.SnDBankDocMovementId FROM SnDBankDocMovement sbd2 
					WHERE	sbd2.PaymentTransactionId=sbd.PaymentTransactionId
					AND     sbd2.LocationId = sbd.LocationId
					AND		sbd2.DepositedSnDId=sbd.LastSettlementSnDId)
	GROUP BY bas.IsDefault,s.ToDate

	INSERT INTO #SnDDebitAdvice
	SELECT 4,'ADD: SAME BANK CHQ. DEP. PREV. DAY CLEARED',@DepositedDate,@TransactionDate, @DefaultBank, @OtherBank


--ADD: SAME BANK CHQ. DEP. PREV. DAY RETURNED

	SET		@DepositedDate		= (SELECT todate FROM snd s WHERE s.CompanyId =@CompanyId  AND s.LocationId=@LocationId AND s.SnDId = @PreviousSNDID )
	SET		@TransactionDate	= (SELECT todate FROM snd s WHERE s.CompanyId =@CompanyId  AND s.LocationId=@LocationId AND s.SnDId = @SNDID )
	SET		@DefaultBank		= 0
	SET		@OtherBank			= 0
			
	SELECT	@DefaultBank		=	(CASE WHEN bas.IsDefault=1 THEN isnull(sum(isnull(sbd.Amount,0)),0)  ELSE 0 END), 
			@OtherBank			=	(CASE WHEN bas.IsDefault<>1 THEN isnull(sum(isnull(sbd.Amount,0)),0)  ELSE 0 END)
	FROM snd s 
	inner JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.DepositedSnDId
	INNER JOIN uv_SystemBankAccounts usba ON usba.LocationId = sbd.LocationId AND usba.BankAccountId = sbd.BankAccountId
	INNER JOIN BankAccountSequence bas ON bas.LocationId = usba.LocationId AND bas.BankAccountId = usba.BankAccountId
	WHERE sbd.Type = 'D' 
	AND s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId = @PreviousSNDID AND sbd.ReturnedSnDId = @SNDID  AND s.RollbackDate IS null
	--Exclude Redeposit Doc
	AND NOT EXISTS (SELECT	sbd2.SnDBankDocMovementId FROM SnDBankDocMovement sbd2 
					WHERE	sbd2.PaymentTransactionId=sbd.PaymentTransactionId
					AND     sbd2.LocationId = sbd.LocationId
					AND		sbd2.DepositedSnDId=sbd.LastSettlementSnDId)
	GROUP BY bas.IsDefault,s.ToDate

	INSERT INTO #SnDDebitAdvice
	SELECT 5,'ADD: SAME BANK CHQ. DEP. PREV. DAY RETURNED',@DepositedDate,@TransactionDate, @DefaultBank, @OtherBank

--ADD: CHQS. PRIOR TO DAY BEFORE PREV. DAY
--Those cheques which is Prior to day before deposited day but not clear and return

	SET		@DepositedDate		=  null
	SET		@TransactionDate	= (SELECT todate FROM snd s WHERE s.CompanyId =@CompanyId  AND s.LocationId=@LocationId AND s.SnDId = @SNDID )
	SET		@DefaultBank		= 0
	SET		@OtherBank			= 0
			
	SELECT	@DefaultBank		=	(CASE WHEN bas.IsDefault=1 THEN isnull(sum(isnull(sbd.Amount,0)),0)  ELSE 0 END), 
			@OtherBank			=	(CASE WHEN bas.IsDefault<>1 THEN isnull(sum(isnull(sbd.Amount,0)),0)  ELSE 0 END)
	FROM snd s 
	inner JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.DepositedSnDId
	INNER JOIN uv_SystemBankAccounts usba ON usba.LocationId = sbd.LocationId AND usba.BankAccountId = sbd.BankAccountId
	INNER JOIN BankAccountSequence bas ON bas.LocationId = usba.LocationId AND bas.BankAccountId = usba.BankAccountId
	WHERE	sbd.Type = 'D' 
	--AND s.CompanyId=5 AND s.LocationId=58 AND s.SnDId=28 AND s.RollbackDate IS NULL
	AND		s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId < @DayBeforePreviousSNDID   AND s.RollbackDate IS null
	AND		(
			ISNULL(SBD.ClearedSnDId, @SNDID+1)	> @SNDID  
			and ISNULL(SBD.ReturnedSnDId,@SNDID+1) > @SNDID
			)
	
	--Exclude Redeposit Doc
	AND NOT EXISTS (SELECT	sbd2.SnDBankDocMovementId FROM SnDBankDocMovement sbd2 
					WHERE	sbd2.PaymentTransactionId=sbd.PaymentTransactionId
					AND     sbd2.LocationId = sbd.LocationId
					AND		sbd2.DepositedSnDId=sbd.LastSettlementSnDId)
	GROUP BY bas.IsDefault,s.ToDate

	INSERT INTO #SnDDebitAdvice
	SELECT 6,'ADD: CHQS. PRIOR TO DAY BEFORE PREV. DAY',@DepositedDate,@TransactionDate, @DefaultBank, @OtherBank



--LESS: CHQS. RET. ALL PREV. DEPOSIT
--Those cheques which is Prior to day before deposited day but return in current SND

	SET		@DepositedDate		=  null
	SET		@TransactionDate	= (SELECT todate FROM snd s WHERE s.CompanyId =@CompanyId  AND s.LocationId=@LocationId AND s.SnDId = @SNDID )
	SET		@DefaultBank		= 0
	SET		@OtherBank			= 0
			
	SELECT	@DefaultBank		=	(CASE WHEN bas.IsDefault=1 THEN isnull(sum(isnull(sbd.Amount,0)),0) * -1   ELSE 0 END), 
			@OtherBank			=	(CASE WHEN bas.IsDefault<>1 THEN isnull(sum(isnull(sbd.Amount,0)),0) * -1  ELSE 0 END)
	FROM snd s 
	inner JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.DepositedSnDId
	INNER JOIN uv_SystemBankAccounts usba ON usba.LocationId = sbd.LocationId AND usba.BankAccountId = sbd.BankAccountId
	INNER JOIN BankAccountSequence bas ON bas.LocationId = usba.LocationId AND bas.BankAccountId = usba.BankAccountId
	WHERE	sbd.Type = 'D' 
	AND		s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId < @DayBeforePreviousSNDID   AND s.RollbackDate IS null
	AND		SBD.ReturnedSnDId = @SNDID
	--Exclude Redeposit Doc
	AND NOT EXISTS (SELECT	sbd2.SnDBankDocMovementId FROM SnDBankDocMovement sbd2 
					WHERE	sbd2.PaymentTransactionId=sbd.PaymentTransactionId
					AND     sbd2.LocationId = sbd.LocationId
					AND		sbd2.DepositedSnDId=sbd.LastSettlementSnDId)
	GROUP BY bas.IsDefault,s.ToDate

	INSERT INTO #SnDDebitAdvice
	SELECT 7,'LESS: CHQS. RET. ALL PREV. DEPOSIT',@DepositedDate,@TransactionDate, @DefaultBank, @OtherBank


--LESS: UNMARKED CHEQUES
--Those cheques which is Prior to day before deposited day but not clear and return

	SET		@DepositedDate		= Null
	SET		@TransactionDate	= Null
	SET		@DefaultBank		= 0
	SET		@OtherBank			= 0
			
	SELECT	@DefaultBank		=	(CASE WHEN bas.IsDefault=1 THEN isnull(sum(isnull(sbd.Amount,0)),0) * -1   ELSE 0 END), 
			@OtherBank			=	(CASE WHEN bas.IsDefault<>1 THEN isnull(sum(isnull(sbd.Amount,0)),0) * -1  ELSE 0 END)
	FROM snd s 
	inner JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.DepositedSnDId
	INNER JOIN uv_SystemBankAccounts usba ON usba.LocationId = sbd.LocationId AND usba.BankAccountId = sbd.BankAccountId
	INNER JOIN BankAccountSequence bas ON bas.LocationId = usba.LocationId AND bas.BankAccountId = usba.BankAccountId
	WHERE	sbd.Type = 'D' 
	AND		s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId <= @DayBeforePreviousSNDID   AND s.RollbackDate IS null
	AND		(
			ISNULL(SBD.ClearedSnDId, @SNDID+1)	> @SNDID  
			and ISNULL(SBD.ReturnedSnDId,@SNDID+1) > @SNDID
			)
	--Exclude Redeposit Doc
	AND NOT EXISTS (SELECT	sbd2.SnDBankDocMovementId FROM SnDBankDocMovement sbd2 
					WHERE	sbd2.PaymentTransactionId=sbd.PaymentTransactionId
					AND     sbd2.LocationId = sbd.LocationId
					AND		sbd2.DepositedSnDId=sbd.LastSettlementSnDId)
	GROUP BY bas.IsDefault,s.ToDate
	
	INSERT INTO #SnDDebitAdvice
	SELECT 8,'LESS: UNMARKED CHEQUES',@DepositedDate,@TransactionDate, @DefaultBank, @OtherBank


	--GET DATA
	SELECT SortID,SourceReceipt,DepositedDate,TransactionDate,sum(isnull(DefaultBankAmount,0)) AS DefaultBank,sum(isnull(OtherBankAmount,0)) AS OtherBank 
	FROM #SnDDebitAdvice
	GROUP BY SortID,SourceReceipt,DepositedDate,TransactionDate
	
----------------------------------------------------------------------------------------------------------------------------------------
-- END - SND BANK DEBIT ADVICE
----------------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------------------------
-- BEGIN - BREAKUP OF DAY BEFORE PREV. DAY DEPOSITED CHQS
----------------------------------------------------------------------------------------------------------------------------------------

	--CREATE TABLE FOR SND BANK DEBIT ADVICE
	CREATE TABLE #SnDepositedChequeDetail(SortID numeric(5,0),SourceReceipt Varchar(100),DepositedDate datetime,TransactionDate datetime,
	DefaultBankAmount numeric(15,2),OtherBankAmount numeric(15,2))

--CHQS DEPOSITED DAY BEFORE PREVIOUS DAY

	SET		@DepositedDate		= Null
	SET		@TransactionDate	= Null
	SET		@DefaultBank		= 0
	SET		@OtherBank			= 0
			
	SELECT	@DepositedDate		=   s.ToDate,
			@DefaultBank		=	(CASE WHEN bas.IsDefault=1 THEN isnull(sum(isnull(sbd.Amount,0)),0) * -1   ELSE 0 END), 
			@OtherBank			=	(CASE WHEN bas.IsDefault<>1 THEN isnull(sum(isnull(sbd.Amount,0)),0) * -1  ELSE 0 END)
	FROM snd s 
	inner JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.DepositedSnDId
	INNER JOIN uv_SystemBankAccounts usba ON usba.LocationId = sbd.LocationId AND usba.BankAccountId = sbd.BankAccountId
	INNER JOIN BankAccountSequence bas ON bas.LocationId = usba.LocationId AND bas.BankAccountId = usba.BankAccountId
	WHERE sbd.Type = 'D' 
	AND s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId = @DayBeforePreviousSNDID   AND s.RollbackDate IS null
	--Exclude Redeposit Doc
	AND NOT EXISTS (SELECT	sbd2.SnDBankDocMovementId FROM SnDBankDocMovement sbd2 
					WHERE	sbd2.PaymentTransactionId=sbd.PaymentTransactionId
					AND     sbd2.LocationId = sbd.LocationId
					AND		sbd2.DepositedSnDId=sbd.LastSettlementSnDId)
	GROUP BY bas.IsDefault,s.ToDate
	
	INSERT INTO #SnDepositedChequeDetail
	SELECT 1,'ADD: CHQS DEPOSITED ON',@DepositedDate,@TransactionDate, @DefaultBank, @OtherBank
	
--CHQS CLEARED - NORMAL CLEARING

	SET		@DepositedDate		= Null
	SET		@TransactionDate	= (SELECT todate FROM snd s WHERE s.CompanyId =@CompanyId  AND s.LocationId=@LocationId AND s.SnDId = @SNDID )
	SET		@DefaultBank		= 0
	SET		@OtherBank			= 0
			
	SELECT	@DepositedDate		=   s.ToDate,
			@DefaultBank		=	(CASE WHEN bas.IsDefault=1 THEN isnull(sum(isnull(sbd.Amount,0)),0)    ELSE 0 END), 
			@OtherBank			=	(CASE WHEN bas.IsDefault<>1 THEN isnull(sum(isnull(sbd.Amount,0)),0)   ELSE 0 END)
	FROM snd s 
	inner JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.DepositedSnDId
	INNER JOIN uv_SystemBankAccounts usba ON usba.LocationId = sbd.LocationId AND usba.BankAccountId = sbd.BankAccountId
	INNER JOIN BankAccountSequence bas ON bas.LocationId = usba.LocationId AND bas.BankAccountId = usba.BankAccountId
	WHERE sbd.Type			=	'D' 
	AND s.CompanyId			=	@CompanyId 
	AND s.LocationId		=	@LocationID 
	AND s.SnDId				=	@DayBeforePreviousSNDID 
	AND sbd.ClearedSnDId	<=	@SNDID 
	AND s.RollbackDate		IS null
	--Exclude Redeposit Doc
	AND NOT EXISTS (SELECT	sbd2.SnDBankDocMovementId FROM SnDBankDocMovement sbd2 
					WHERE	sbd2.PaymentTransactionId=sbd.PaymentTransactionId
					AND     sbd2.LocationId = sbd.LocationId
					AND		sbd2.DepositedSnDId=sbd.LastSettlementSnDId)
	GROUP BY bas.IsDefault,s.ToDate
	
	INSERT INTO #SnDepositedChequeDetail
	SELECT 2,'LESS: CHQ. CLEARED',@DepositedDate,@TransactionDate, @DefaultBank, @OtherBank

----LESS: CHQS CLEARED - SAME BANK

--	SET		@DepositedDate		= Null
--	SET		@TransactionDate	= (SELECT todate FROM snd s WHERE s.CompanyId =@CompanyId  AND s.LocationId=@LocationId AND s.SnDId = @PreviousSNDID )
--	SET		@DefaultBank		= 0
--	SET		@OtherBank			= 0
			
--	SELECT	@DepositedDate		=   s.ToDate,
--			@DefaultBank		=	(CASE WHEN bas.IsDefault=1 THEN isnull(sum(isnull(sbd.Amount,0)),0) * -1   ELSE 0 END), 
--			@OtherBank			=	(CASE WHEN bas.IsDefault<>1 THEN isnull(sum(isnull(sbd.Amount,0)),0) * -1  ELSE 0 END)
--	FROM snd s 
--	inner JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.DepositedSnDId
--	INNER JOIN uv_SystemBankAccounts usba ON usba.LocationId = sbd.LocationId AND usba.BankAccountId = sbd.BankAccountId
--	INNER JOIN BankAccountSequence bas ON bas.LocationId = usba.LocationId AND bas.BankAccountId = usba.BankAccountId
--	WHERE sbd.Type = 'D' 
--	AND s.CompanyId=@CompanyId AND s.LocationId=@LocationID    AND s.RollbackDate IS null
--	AND s.SnDId = @DayBeforePreviousSNDID 
--	AND sbd.ClearedSnDId = @PreviousSNDID 
--	--Exclude Redeposit Doc
--	AND NOT EXISTS (SELECT	sbd2.SnDBankDocMovementId FROM SnDBankDocMovement sbd2 
--					WHERE	sbd2.PaymentTransactionId=sbd.PaymentTransactionId
--					AND		sbd2.DepositedSnDId=sbd.LastSettlementSnDId)
--	GROUP BY bas.IsDefault,s.ToDate
	
--	INSERT INTO #SnDepositedChequeDetail
--	SELECT 3,'LESS: CHQS CLEARED - SAME BANK',@DepositedDate,@TransactionDate, @DefaultBank, @OtherBank
	
	--CHQS RETURNED - TODAY snd
	
	SET		@DepositedDate		= Null
	SET		@TransactionDate	= (SELECT todate FROM snd s WHERE s.CompanyId =@CompanyId  AND s.LocationId=@LocationId AND s.SnDId = @SNDID )
	SET		@DefaultBank		= 0
	SET		@OtherBank			= 0
			
	SELECT	@DepositedDate		=   s.ToDate,
			@DefaultBank		=	(CASE WHEN bas.IsDefault=1 THEN isnull(sum(isnull(sbd.Amount,0)),0)    ELSE 0 END), 
			@OtherBank			=	(CASE WHEN isnull(bas.IsDefault,0)<>1 THEN isnull(sum(isnull(sbd.Amount,0)),0)  ELSE 0 END)
	FROM snd s 
	inner JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.DepositedSnDId
	INNER JOIN uv_SystemBankAccounts usba ON usba.LocationId = sbd.LocationId AND usba.BankAccountId = sbd.BankAccountId
	INNER JOIN BankAccountSequence bas ON bas.LocationId = usba.LocationId AND bas.BankAccountId = usba.BankAccountId
	WHERE sbd.Type = 'D' 
	AND s.CompanyId=@CompanyId AND s.LocationId=@LocationID    AND s.RollbackDate IS NULL 
	AND s.SnDId = @DayBeforePreviousSNDID 
	AND sbd.ReturnedSnDId <= @SNDID 
	--Exclude Redeposit Doc
	AND NOT EXISTS (SELECT	sbd2.SnDBankDocMovementId FROM SnDBankDocMovement sbd2 
					WHERE	sbd2.PaymentTransactionId=sbd.PaymentTransactionId
					AND     sbd2.LocationId = sbd.LocationId
					AND		sbd2.DepositedSnDId=sbd.LastSettlementSnDId)
	GROUP BY bas.IsDefault,s.ToDate

	INSERT INTO #SnDepositedChequeDetail
	SELECT 4,'LESS: CHQS RETURNED',@DepositedDate,@TransactionDate, @DefaultBank, @OtherBank
	
----LESS: CHQS ALREADY RETURNED - SAME BANK

--	SET		@DepositedDate		= Null
--	SET		@TransactionDate	= (SELECT todate FROM snd s WHERE s.CompanyId =@CompanyId  AND s.LocationId=@LocationId AND s.SnDId = @PreviousSNDID  )
--	SET		@DefaultBank		= 0
--	SET		@OtherBank			= 0
			
--	SELECT	@DepositedDate		=   s.ToDate,
--			@DefaultBank		=	(CASE WHEN bas.IsDefault=1 THEN isnull(sum(isnull(sbd.Amount,0)),0) * -1   ELSE 0 END), 
--			@OtherBank			=	(CASE WHEN bas.IsDefault<>1 THEN isnull(sum(isnull(sbd.Amount,0)),0) * -1  ELSE 0 END)
--	FROM snd s 
--	inner JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.DepositedSnDId
--	INNER JOIN uv_SystemBankAccounts usba ON usba.LocationId = sbd.LocationId AND usba.BankAccountId = sbd.BankAccountId
--	INNER JOIN BankAccountSequence bas ON bas.LocationId = usba.LocationId AND bas.BankAccountId = usba.BankAccountId
--	WHERE sbd.Type = 'D' 
--	AND s.CompanyId=@CompanyId AND s.LocationId=@LocationID    AND s.RollbackDate IS null
--	AND s.SnDId = @DayBeforePreviousSNDID 
--	AND sbd.ReturnedSnDId = @PreviousSNDID 
--	--Exclude Redeposit Doc
--	AND NOT EXISTS (SELECT	sbd2.SnDBankDocMovementId FROM SnDBankDocMovement sbd2 
--					WHERE	sbd2.PaymentTransactionId=sbd.PaymentTransactionId
--					AND		sbd2.DepositedSnDId=sbd.LastSettlementSnDId)
--	GROUP BY bas.IsDefault,s.ToDate		
	
--	INSERT INTO #SnDepositedChequeDetail
--	SELECT 5,'LESS: CHQS RETURNED - SAME BANK',@DepositedDate,@TransactionDate, @DefaultBank, @OtherBank
	
	--LESS: CHQS UNMARKED
	
	SET		@DepositedDate		= Null
	SET		@TransactionDate	= Null
	SET		@DefaultBank		= 0
	SET		@OtherBank			= 0
			
	SELECT	@DefaultBank		=	(CASE WHEN bas.IsDefault=1 THEN isnull(sum(isnull(sbd.Amount,0)),0)    ELSE 0 END), 
			@OtherBank			=	(CASE WHEN isnull(bas.IsDefault,0)<>1 THEN isnull(sum(isnull(sbd.Amount,0)),0)   ELSE 0 END)
	FROM snd s 
	inner JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.DepositedSnDId
	INNER JOIN uv_SystemBankAccounts usba ON usba.LocationId = sbd.LocationId AND usba.BankAccountId = sbd.BankAccountId
	INNER JOIN BankAccountSequence bas ON bas.LocationId = usba.LocationId AND bas.BankAccountId = usba.BankAccountId
	WHERE sbd.Type = 'D' 
	AND s.CompanyId=@CompanyId AND s.LocationId=@LocationID    AND s.RollbackDate IS null
	AND s.SnDId = @DayBeforePreviousSNDID 
	AND		(
			ISNULL(SBD.ClearedSnDId, @SNDID+1)	> @SNDID  
			and ISNULL(SBD.ReturnedSnDId,@SNDID+1) > @SNDID
			)
	--Exclude Redeposit Doc
	AND NOT EXISTS (SELECT	sbd2.SnDBankDocMovementId FROM SnDBankDocMovement sbd2 
					WHERE	sbd2.PaymentTransactionId=sbd.PaymentTransactionId
					AND     sbd2.LocationId = sbd.LocationId
					AND		sbd2.DepositedSnDId=sbd.LastSettlementSnDId)
	GROUP BY bas.IsDefault,s.ToDate	
	
	INSERT INTO #SnDepositedChequeDetail
	SELECT 6,'LESS: CHQS UNMARKED',@DepositedDate,@TransactionDate, @DefaultBank, @OtherBank
	
	
--GET DATA
	SELECT SortID,SourceReceipt,DepositedDate,TransactionDate,sum(isnull(DefaultBankAmount,0)) AS DefaultBank,sum(isnull(OtherBankAmount,0)) AS OtherBank 
	FROM #SnDepositedChequeDetail
	GROUP BY SortID,SourceReceipt,DepositedDate,TransactionDate
	
	----------------------------------------------------------------------------------------------------------------------------------------
-- END - BREAKUP OF DAY BEFORE PREV. DAY DEPOSITED CHQS
----------------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------------------------
-- BEGIN - ALL INCLEARING CHEQUES
----------------------------------------------------------------------------------------------------------------------------------------
	
	SET  @DepositedDate	= 	(SELECT todate FROM snd s WHERE s.CompanyId =@CompanyId  AND s.LocationId=@LocationId AND s.SnDId = @SNDID )

	SELECT	1 AS SORTID,
			'CHQS DEPOSITED ON:' AS SourceReceipt,
			S.ToDate AS Depositeddate,
			DefaultBank	=	(CASE WHEN bas.IsDefault=1 THEN isnull(sum(isnull(sbd.Amount,0)),0)   ELSE 0 END), 
			OtherBank	=	(CASE WHEN isnull(bas.IsDefault,0)<>1 THEN isnull(sum(isnull(sbd.Amount,0)),0)   ELSE 0 END)
	FROM snd s 
	inner JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.DepositedSnDId
	left JOIN uv_SystemBankAccounts usba ON usba.LocationId = sbd.LocationId AND usba.BankAccountId = sbd.BankAccountId
	left JOIN BankAccountSequence bas ON bas.LocationId = usba.LocationId AND bas.BankAccountId = usba.BankAccountId
	WHERE sbd.Type = 'D' 
	AND s.CompanyId=@CompanyId AND s.LocationId=@LocationID   AND s.RollbackDate IS NULL  AND s.SnDId  <= @SNDID
	AND		
	(
			ISNULL(SBD.ClearedSnDId, @SNDID+1)	> @SNDID  
			and ISNULL(SBD.ReturnedSnDId,@SNDID+1) > @SNDID
	)
	AND s.ToDate > @DepositedDate - 3
	--Exclude Redeposit Doc
	--AND NOT EXISTS (SELECT	sbd2.SnDBankDocMovementId FROM SnDBankDocMovement sbd2 
	--				WHERE	sbd2.PaymentTransactionId=sbd.PaymentTransactionId
	--				AND     sbd2.LocationId = sbd.LocationId
	--				AND		sbd2.DepositedSnDId=sbd.LastSettlementSnDId)
	AND sbd.SnDBankDocMovementId NOT IN 
	(
		SELECT	sbd2.SnDBankDocMovementId 
        FROM SnDBankDocMovement sbd2 
		WHERE sbd2.LocationId = sbd.LocationId
		AND	sbd2.DepositedSnDId=sbd.LastSettlementSnDId
		AND	sbd2.RefSnDBankDocMovementId IS NOT NULL 
	)
	GROUP BY s.ToDate,bas.IsDefault	
	
	
	UNION ALL
	
	
	SELECT  2 AS SORTID,
			'CHQS DEPOSITED LESS THEN:' AS SourceReceipt,
			@DepositedDate AS Depositeddate,
			DefaultBank	=	(CASE WHEN bas.IsDefault=1 THEN isnull(sum(isnull(sbd.Amount,0)),0)   ELSE 0 END), 
			OtherBank	=	(CASE WHEN isnull(bas.IsDefault,0)<>1 THEN isnull(sum(isnull(sbd.Amount,0)),0)   ELSE 0 END)
	FROM snd s 
	inner JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.DepositedSnDId
	left JOIN uv_SystemBankAccounts usba ON usba.LocationId = sbd.LocationId AND usba.BankAccountId = sbd.BankAccountId
	left JOIN BankAccountSequence bas ON bas.LocationId = usba.LocationId AND bas.BankAccountId = usba.BankAccountId
	WHERE sbd.Type = 'D' 
	AND s.CompanyId=@CompanyId AND s.LocationId=@LocationID  AND s.RollbackDate IS NULL   AND s.SnDId  <= @SNDID
	AND		
	(
			ISNULL(SBD.ClearedSnDId, @SNDID+1)	> @SNDID  
			and ISNULL(SBD.ReturnedSnDId,@SNDID+1) > @SNDID
	)
	AND s.ToDate < @DepositedDate - 4
	--Exclude Redeposit Doc
	--AND NOT EXISTS 
	--(
	--	SELECT	sbd2.SnDBankDocMovementId FROM SnDBankDocMovement sbd2 
	--	WHERE	
	--	sbd2.PaymentTransactionId=sbd.PaymentTransactionId
	--	AND sbd2.LocationId = sbd.LocationId
	--	AND		sbd2.DepositedSnDId=sbd.LastSettlementSnDId
	--)
	AND sbd.SnDBankDocMovementId NOT IN 
	(
		SELECT	sbd2.SnDBankDocMovementId 
        FROM SnDBankDocMovement sbd2 
		WHERE sbd2.LocationId = sbd.LocationId
		AND	sbd2.DepositedSnDId=sbd.LastSettlementSnDId
		AND	sbd2.RefSnDBankDocMovementId IS NOT NULL 
	)
					
	GROUP BY bas.IsDefault	
	ORDER BY SORTID ,Depositeddate desc
	
	DROP TABLE #SnDReconciliation
	DROP TABLE #SnDRemittance
	DROP TABLE #TempSnDCollection
	DROP TABLE #TempBankBalance
	DROP TABLE #TempSnDOpeningBalance
	DROP TABLE #SnDDebitAdvice
	DROP TABLE #SnDepositedChequeDetail
 GO 
SELECT *--max(LEN(p.[Name])) 
FROM Product p 
WHERE p.ProductId = 2406

UPDATE product SET [Name] =  [Name] + '1234567890'
WHERE ProductId = 2406  
 GO 
SELECT
				usso.LocationId,
				usso.PrincipalBusinessLineId,
				usso.ProductId,
				--Case When @SalesCriteria  = 0 then SUM(usso.SoldQuantity) 
				--     When @SalesCriteria  = 1 then SUM(usso.SoldQuantity)
				--     When @SalesCriteria  = 2 then 0 END 
				--AS [Quantity],
				usso.SalePassDate AS [Date],
				pc.PP,				
				pc.TP
			FROM uv_Sales_SaleOrder usso 
			INNER JOIN PriceCatalog pc ON usso.PriceId = pc.PriceCatalogId
		
			--INNER JOIN   DBO.Split(@ProductIds, ',') Product ON  (Product.Data = usso.ProductId OR @ProductIds = '')
			--INNER JOIN   DBO.Split(@PBLIds, ',') PBL ON  (PBL.Data = usso.PrincipalBusinessLineId OR @PBLIds = '')
			--INNER JOIN   DBO.Split(@LocationIds, ',') Location ON  (Location.Data = usso.LocationId OR @LocationIds = '')
			--WHERE 
			--(  @SelectAll = 0	  
			-- OR  (@SelectAll = 1 AND ( DATEDIFF(DAY, usso.SalePassDate,  @FromDate) = 0 ))
			-- OR  (@SelectAll = 2 AND ( DATEDIFF(DAY, usso.SalePassDate,  @FromDate) <= 0 AND DATEDIFF(day, usso.SalePassDate, @ToDate) >= 0 ))   
			--) AND usso.IsRollbacked = 0
		  --  GROUP BY 
				--usso.LocationId,
				--usso.PrincipalBusinessLineId,
				--usso.ProductId,
				--usso.SalePassDate,
				--pc.PP,
				
				usp_Report_GrossSaleAndMargin
				--pc.TP
 GO 
DECLARE @PrincipalTeamIds varchar(max),
		@SalesForce  varchar(max),
		@PBLIds  varchar(max),
		@Locations  varchar(max),
		@IsTemporary bit,
		@IsShopSale bit,
		@IsUnTagg bit,       		        
		@FromDate datetime,
		@ToDate datetime 
SET @PrincipalTeamIds =''--'36,32,33,34,35'
SET @SalesForce = ''--'4,26,28,73,75,95,96,102,108,113,116,118,119,141,146,153,181,196,199,205,11,18,45,47,53,57,66,78,89,93,122,130,133,158,164,171,179,188,191,206,1,12,14,16,34,36,58,63,87,91,120,123,145,170,186,197,202,208,210,219,2,22,27,35,46,49,67,70,107,126,131,134,135,144,149,177,180,182,216,217,'
SET @PBLIds='28,55'
SET @Locations='14'
SET @IsTemporary = 1
SET @IsShopSale = 1
SET @IsUnTagg = 1
SET @FromDate = '2013-11-23 00:00:00.000'
SET @ToDate = '2013-11-26 00:00:00.000'

SELECT 
	L.Name AS [Location Name],
	P.PBLSequenceId,
	P.[Principal Business Line], 
	P.DeliveryChallanId,
	P.PrincipalTeamId,
	P.[Principal Team],
	P.ProductId, 
	P.[Product Name],
	P.ProductSequence,
	P.[SoldQuantity],
	P.[Value],
	P.FFId,
	P.FFName,
	P.FFName AS [FFSeq],
	P.LocationId
	INTO #Temp
FROM 
(
	SELECT upbla.PBLSequenceId,upbla.Name AS [Principal Business Line],SOPROD.DeliveryChallanId, 
	       TeamProduct.PrincipalTeamId,TeamProduct.[Principal Team],
		   TeamProduct.ProductId, 
		   up.ShortName AS [Product Name],up.ProductSequence,
		   SUM(ISNULL(SOProd.SoldQuantity,0)) AS [SoldQuantity],
		   SUM(ISNULL(SOProd.SoldQuantity,0) * ISNULL(SOProd.TP,0)) AS [Value],
		   SOProd.FFId,
		   SOProd.FFName,
		   SOProd.FFName AS [FFSeq],
		   LocationId
	FROM   
	(
		 SELECT  ptp.PrincipalTeamProductId, ptp.PrincipalTeamId,ptt.ShortName AS [Principal Team],
		 ptp.ToBeDeleted,ptp.ProductId
		 FROM PrincipalTeamProduct ptp
		 INNER JOIN PrincipalTeam ptt ON ptt.PrincipalTeamId = ptp.PrincipalTeamId
		 INNER JOIN   DBO.Split(@PrincipalTeamIds, ',' ) PT ON ( PT.Data = ptp.PrincipalTeamId OR @PrincipalTeamIds = '' )         
		 WHERE  ptp.ToBeDeleted = 0          
		 AND DATEDIFF(day, ptt.EffectiveDate,GETDATE())>= 0
		 AND  DATEDIFF(day,GETDATE(), isnull( ptt.EndDate,GETDATE()+1))> 0
	)  TeamProduct
	LEFT JOIN 
	(
			SELECT so.LocationId,so.DeliveryChallanId, so.SaleOrderId,so.SalePassDate, so.IsCash, st.Code AS [Sale Type], sop.ProductId, 
			sop.SoldQuantity, so.CustomerId, sfo.PrincipalTeamId, sop.tp AS [TP],
			( CASE  WHEN st.Code = 'SHP' THEN -1 WHEN c.IsTemporary = 1 THEN -2 ELSE ISNULL(sfo.SalesForceId,-3) END ) AS FFId,
			( CASE  WHEN st.Code = 'SHP' THEN 'SHOP' WHEN c.IsTemporary = 1 THEN 'NEW' ELSE ISNULL(sfo.[FieldForceName],'UNTAG') END ) AS FFName,
			st.Code,
			c.IsTemporary
			FROM   SaleOrder so
			INNER JOIN DBO.Split(@Locations, ',' ) Loc ON   ( Loc.Data = so.LocationId OR @Locations = '' )
			INNER JOIN  SaleType st ON   so.SaleTypeId = st.SaleTypeId
			INNER JOIN  Customer c ON   ( c.CustomerId = so.CustomerId AND   c.LocationId = so.LocationId )
			INNER JOIN  SaleOrderProduct sop ON   ( sop.LocationId = so.LocationId AND   sop.SaleOrderId = so.SaleOrderId  AND sop.EndDate IS NULL )
			LEFT JOIN  
			(
				SELECT DISTINCT sfc.LocationId, sfc.CustomerId, sfc.PrincipalTeamId, sf.SalesForceId, sf.ShortName [FieldForceName],ptp.ProductId
				FROM SalesForceCustomer sfc
				INNER JOIN SalesForce sf ON sf.LocationId = sfc.LocationId
				AND sf.SalesForceId = sfc.SalesForceId
				INNER JOIN PrincipalTeam ptt ON ptt.PrincipalTeamId=sf.PrincipalTeamId
				INNER JOIN PrincipalTeamProduct ptp ON ptt.PrincipalTeamId=ptp.PrincipalTeamId AND ptp.ToBeDeleted=0			
				INNER JOIN DBO.Split(@PrincipalTeamIds, ',' ) PT ON ( PT.Data = sfc.PrincipalTeamId OR @PrincipalTeamIds = '' )  		 
				INNER JOIN DBO.Split(@SalesForce, ',' ) ff ON   ( ff.Data = sfc.SalesForceId OR @SalesForce = '' )	
				INNER JOIN DBO.Split(@Locations, ',' ) Loc ON   ( Loc.Data = sf.LocationId OR @Locations = '' )
				
				WHERE sfc.ToBeDeleted = 0
				    /*AND DATEDIFF(day, sf.EffectiveDate,ISNULL(@FromDate,GETDATE()))>= 0
					AND  DATEDIFF(day,ISNULL(@ToDate,GETDATE()), isnull( sf.EndDate,@ToDate+1))> 0*/
					AND DATEDIFF(day, sf.EffectiveDate,GETDATE())>= 0
					AND  DATEDIFF(day,GETDATE(), isnull( sf.EndDate,GETDATE()+1))> 0					  	
					AND DATEDIFF(day, ptt.EffectiveDate,GETDATE())>= 0
					AND  DATEDIFF(day,GETDATE(), isnull( ptt.EndDate,GETDATE()+1))> 0
					
			) SFO
			ON ( SFO.LocationId = so.LocationId AND SFO.Customerid = so.CustomerId  AND sop.ProductId=SFO.ProductId)
			WHERE   (DATEDIFF(DAY,so.SalePassDate,  @FromDate) <= 0 AND  DATEDIFF(DAY,so.SalePassDate,  @ToDate) >= 0)				   
			AND
			(
					(@IsTemporary = 1	OR (@IsTemporary = 0	AND  c.IsTemporary = 0))
				AND (@IsShopSale = 1	OR (@IsShopSale = 0		AND  st.Code <> 'SHP')	)
				AND (@IsUnTagg = 1		OR (@IsUnTagg = 0		AND  sfo.PrincipalTeamId IS NOT NULL))
			)
			
	) SOProd ON TeamProduct.ProductId = SOProd.ProductId 
	AND (TeamProduct.PrincipalTeamId = SOProd.PrincipalTeamId OR SOProd.PrincipalTeamId IS NULL)	
	INNER JOIN   uv_Product up ON   TeamProduct.ProductId = up.ProductId
    INNER JOIN uv_PrincipalBusinessLine_All upbla ON upbla.PrincipalBusinessLineId = up.PrincipalBusinessLineId   
    INNER JOIN   DBO.Split(@PBLIds, ',' ) PBL ON   ( PBL.Data = up.PrincipalBusinessLineId OR @PBLIds = '' )
     	
	GROUP BY
	upbla.PBLSequenceId,upbla.Name,
	SOPROD.DeliveryChallanId,
	SOProd.FFId, SOProd.FFName,
	TeamProduct.PrincipalTeamId,
	TeamProduct.[Principal Team],
	up.ProductSequence,
	TeamProduct.ProductId, 
	up.ShortName,
	SOProd.CustomerId,SOProd.LocationId


	UNION ALL

	SELECT upbla.PBLSequenceId,upbla.Name AS [Principal Business Line],so.DeliveryChallanId,99999 AS PrincipalTeamId,
	[Product].[Principal Team], [Product].ProductId,[Product].Name ,[Product].ProductSequence,
	sum(sop.SoldQuantity) AS [SoldQuantity],
	sum(sop.SoldQuantity*sop.TP) AS [Amount],
	( CASE  WHEN st.Code = 'SHP' THEN -1 WHEN c.IsTemporary = 1 THEN -2 ELSE ISNULL(sf.SalesForceId,-3) END ) AS FFId,
	( CASE  WHEN st.Code = 'SHP' THEN 'SHOP' WHEN c.IsTemporary = 1 THEN 'NEW' ELSE ISNULL(sf.Name,'UNTAG') END ) AS FFName,
	( CASE  WHEN st.Code = 'SHP' THEN 'SHOP' WHEN c.IsTemporary = 1 THEN 'NEW' ELSE ISNULL(sf.Name,'UNTAG') END ) AS FFSeq	
	,SO.LocationId
	FROM 
	(
		SELECT up.ProductId, 
		up.Name,
		isnull(up.ProductSequence,99999) AS ProductSequence,
		ISNULL(pt.ShortName,'UNTAGGED PRODUCT') AS [Principal Team],
		up.PrincipalBusinessLineId,pt.PrincipalTeamId
		FROM uv_Product up
		LEFT OUTER JOIN PrincipalTeamProduct ptp ON ptp.ProductId = up.ProductId AND ptp.ProductSequence = up.ProductSequence
		AND ptp.ToBeDeleted = 0
		LEFT OUTER JOIN PrincipalTeam pt ON pt.PrincipalTeamId = ptp.PrincipalTeamId			
	   -- AND DATEDIFF(day, pt.EffectiveDate,ISNULL(@FromDate,GETDATE()))>= 0
	    --AND  DATEDIFF(day,ISNULL(@ToDate,GETDATE()), isnull( pt.EndDate,@ToDate+1))> 0	  
	     AND DATEDIFF(day, pt.EffectiveDate,GETDATE())>= 0
		 AND  DATEDIFF(day,GETDATE(), isnull( pt.EndDate,GETDATE()+1))> 0
		WHERE pt.PrincipalTeamId IS NULL	  
	) AS [Product] 
	INNER JOIN SaleOrderProduct sop ON Product.ProductId=sop.ProductId /*AND sop.EndDate IS NULL*/
	INNER JOIN SaleOrder so ON (so.SaleOrderId = sop.SaleOrderId AND so.LocationId = sop.LocationId)
	INNER JOIN SaleType st ON st.SaleTypeId=so.SaleTypeId
	INNER JOIN Customer c ON   ( c.CustomerId = so.CustomerId AND   c.LocationId = so.LocationId )
	INNER JOIN   DBO.Split(@Locations, ',' ) Loc ON   ( Loc.Data =so.LocationId OR @Locations = '' )
	LEFT OUTER  JOIN   SalesForceCustomer sfc ON   ( sfc.LocationId = so.LocationId AND   sfc.Customerid = so.CustomerId 
	AND sfc.ToBeDeleted=0 AND sfc.SalesForceCustomerId IS  null)
	LEFT OUTER JOIN   SalesForce sf ON   ( sf.LocationId = sfc.LocationId AND   sf.SalesForceId = sfc.SalesForceId )
	--INNER JOIN   DBO.Split(@SalesForce, ',' ) ff ON   ( ff.Data = sfc.SalesForceId OR @SalesForce = '' )
   INNER JOIN uv_PrincipalBusinessLine_All upbla ON upbla.PrincipalBusinessLineId =  [Product].PrincipalBusinessLineId
   INNER JOIN   DBO.Split(@PBLIds, ',' ) PBL ON   ( PBL.Data = [Product].PrincipalBusinessLineId OR @PBLIds = '' )
    	
    WHERE    
    (DATEDIFF(DAY,so.SalePassDate,  @FromDate) <= 0 
	AND  DATEDIFF(DAY,so.SalePassDate,  @ToDate) >= 0)			      
    AND
		(
			(@IsTemporary=0 OR (@IsTemporary=1 AND c.IsTemporary=1))
		 OR (@IsShopSale=0 OR (@IsShopSale=1 AND st.Code='SHP'))
		 OR (@IsUnTagg=0 OR (@IsUnTagg=1 AND sfc.SalesForceCustomerId IS NULL))		 		
		)
		
	GROUP BY
		upbla.PBLSequenceId,
		upbla.Name,
		SO.DeliveryChallanId,
		[Product].[Principal Team], 
		[Product].ProductId,
		[Product].Name ,
		[Product].ProductSequence,
		st.Code,
		c.IsTemporary,
		sf.Name,
		sf.SalesForceId,
		SO.LocationId
		
	HAVING 
		sum(sop.SoldQuantity)>0 

)AS P
INNER JOIN Location l ON l.LocationId=P.LocationId
	


SELECT 
DISTINCT
IDENTITY(INT, 1,1) Id,
PrincipalTeamId,
[Principal Team]
INTO #tblLoop
FROM #Temp t

DECLARE @Count INT, @QUERY VARCHAR(max), @PrincipalTeam VARCHAR(50), 
@colFF VARCHAR(MAX),@colFFNonZeroQty VARCHAR(MAX),@colFFZeroQty VARCHAR(MAX)
,@PvtSummary VARCHAR(MAX)
,@PvtSummaryThousand VARCHAR(MAX)
,@colTQty varchar(max),@colSUMTQty varchar(max)

SET @Count = 1
WHILE @Count <= (SELECT COUNT(*) FROM #tblLoop)
	BEGIN
		
		SET @PrincipalTeam = (SELECT [Principal Team] FROM #tblLoop WHERE Id = @Count)	   			
		SET @colFF =
		ISNULL(( 
			SELECT DISTINCT '['+FFName + '], '
			FROM #tblLoop L 
			INNER JOIN #TEMP T ON l.PrincipalTeamId = t.PrincipalTeamId
			WHERE Id = @Count
			AND FFName NOT IN ('SHOP', 'NEW', 'UNTAG')
			FOR XML PATH('' ) 
		),'')
		SET @colFF = @colFF + ' [SHOP], [NEW], [UNTAG]'		
	
		SET @colFFNonZeroQty = 
		ISNULL(( 
			SELECT DISTINCT '['+FFName + '], 0 [' + FFName + ' Value], ' 
			FROM #tblLoop L 
			INNER JOIN #TEMP T ON l.PrincipalTeamId = t.PrincipalTeamId
			WHERE Id = @Count
			AND FFName NOT IN ('SHOP', 'NEW', 'UNTAG')
			FOR XML PATH('' ) 
		),'')                            
		SET @colFFNonZeroQty =@colFFNonZeroQty + ' [SHOP], 0 [SHOP Value], [NEW], 0 [NEW Value], [UNTAG], 0 [UNTAG Value]'
				
		SET @colFFZeroQty = 
		ISNULL(( 
			SELECT DISTINCT '0 ['+FFName + '], ['+FFName + '] [' + FFName + ' Value], ' 
			FROM #tblLoop L 
			INNER JOIN #TEMP T ON l.PrincipalTeamId = t.PrincipalTeamId
			WHERE Id = @Count
			AND FFName NOT IN ('SHOP', 'NEW', 'UNTAG')
			FOR XML PATH('' ) 
		),'')                            
		SET @colFFZeroQty = @colFFZeroQty + ' 0 [SHOP], [SHOP] [SHOP Value], 0 [NEW], [NEW] [NEW Value], 0 [UNTAG], [UNTAG] [UNTAG Value]'
		
		SET @PvtSummary = 
		ISNULL(( 
			SELECT DISTINCT 'SUM(['+FFName + ']) AS ['+FFName + '],' 
			FROM #tblLoop L 
			INNER JOIN #TEMP T ON l.PrincipalTeamId = t.PrincipalTeamId
			WHERE Id = @Count
			AND FFName NOT IN ('SHOP', 'NEW', 'UNTAG')
			FOR XML PATH('' ) 
		),'')              
		SET @PvtSummary = @PvtSummary+ ' ISNULL(SUM([SHOP]),0) [SHOP], ISNULL(SUM([NEW]),0) [NEW], ISNULL(SUM([UNTAG]),0) [UNTAG]'
	
		SET @PvtSummaryThousand = 
		ISNULL(( 
			SELECT DISTINCT 'SUM(['+FFName + '])/1000 AS ['+FFName + '],' 
			FROM #tblLoop L 
			INNER JOIN #TEMP T ON l.PrincipalTeamId = t.PrincipalTeamId
			WHERE Id = @Count
			AND FFName NOT IN ('SHOP', 'NEW', 'UNTAG')
			FOR XML PATH('' ) 
		),'')              
			
		SET @PvtSummaryThousand =@PvtSummaryThousand + ' SUM([SHOP])/1000 [SHOP], SUM([NEW])/1000 [NEW], SUM([UNTAG])/1000 [UNTAG]'		
		
		SET @colSUMTQty = 'SUM(' +
		ISNULL(( 
			SELECT DISTINCT + 'ISNULL(['+ FFName + '],0)+ ' 
			FROM #tblLoop L 
			INNER JOIN #TEMP T ON l.PrincipalTeamId = t.PrincipalTeamId
			WHERE Id = @Count
			AND FFName NOT IN ('SHOP', 'NEW', 'UNTAG')
			FOR XML PATH('' ) 
		),'')                            
		SET @colSUMTQty = @colSUMTQty+ ' ISNULL([SHOP],0)+ ISNULL([NEW],0)+ ISNULL([UNTAG],0)' + ')'
	
		SET @colTQty =
		ISNULL(( 
			SELECT DISTINCT + 'ISNULL(['+ FFName + '],0)+ ' 
			FROM #tblLoop L 
			INNER JOIN #TEMP T ON l.PrincipalTeamId = t.PrincipalTeamId
			WHERE Id = @Count
			AND FFName NOT IN ('SHOP', 'NEW', 'UNTAG')
			FOR XML PATH('' ) 
		),'')                            
		SET @colTQty = @colTQty+ ' ISNULL([SHOP],0)+ ISNULL([NEW],0)+ ISNULL([UNTAG],0)'
		
					
		SET @QUERY = 
		(
		'		
		 SELECT * 
		 FROM
		 (			
		 SELECT A.[Location Name],A.DeliveryChallanId, A.ProductSequence ,A.PrincipalTeamId,A.[Principal Team], A.[Code],A.[Product Name],'+@PvtSummary+', SUM(A.[T.QTY]) [T.QTY], SUM(A.[T.VALUE]) [T.VALUE]
		 FROM
		 (
			SELECT [Location Name],st.DeliveryChallanId,PrincipalTeamId,''Team: '+ @PrincipalTeam +''' AS [Principal Team], ProductSequence , ProductId [Code], [Product Name], '+@colFFNonZeroQty+', '+@colTQty+' AS [T.QTY],0 AS [T.VALUE]
			FROM
			(
				SELECT t.[Location Name],t.DeliveryChallanId,t.PrincipalTeamId,
					   t.[Principal Business Line], CONVERT(char(11),t.ProductId) as [ProductId],t.[Product Name],  
					   T.FFName, ISNULL(SoldQuantity,0) as [SoldQuantity] ,
					   T.ProductSequence
				FROM #tblLoop L 
				INNER JOIN #TEMP T ON l.PrincipalTeamId = t.PrincipalTeamId
				WHERE Id = ' + CONVERT(VARCHAR(10), @Count) + '
			)ST
			PIVOT
			(SUM(SOLDQUANTITY) FOR FFName IN ('+@colFF+')) AS PVT
			
			UNION ALL
			
			SELECT [Location Name],st.DeliveryChallanId,,PrincipalTeamId,''Team: '+ @PrincipalTeam +''' AS [Principal Team], ProductSequence , ProductId [Code], [Product Name], '+@colFFZeroQty+', 0 AS [T.QTY], '+@colTQty+' AS [T.VALUE]
			FROM
			(
				SELECT t.[Location Name],t.PrincipalTeamId,
					   t.[Principal Business Line],t.DeliveryChallanId, CONVERT(char(11),t.ProductId) as [ProductId],t.[Product Name],  
					   T.FFName, ISNULL(Value,0) as [Value], 
					   T.ProductSequence
				FROM #tblLoop L 
				INNER JOIN #TEMP T ON l.PrincipalTeamId = t.PrincipalTeamId
				WHERE Id = ' + CONVERT(VARCHAR(10), @Count) + '
			)ST
			PIVOT
			(SUM(Value) FOR FFName IN ('+@colFF+')) AS PVT		
		 ) AS [A]
		 GROUP BY
		 A.[Location Name],A.PrincipalTeamId,A.[Principal Team], A.[Code],A.[Product Name] , A.ProductSequence
		 		 
		 )SA
		 
		 UNION ALL
	
		SELECT [Location Name],st.DeliveryChallanId 99999 ProductSequence ,99999 AS PrincipalTeamId,'''' AS [Principal Team],'''' as  [Code],''Team: '+ @PrincipalTeam +' VALUES(''''000)'' AS [Product Name], '+@PvtSummaryThousand+', 0 AS [T.QTY], '+@colSUMTQty+' AS [T.VALUE]
		FROM
		(
			SELECT t.[Location Name], t.PrincipalTeamId,
				   t.[Principal Business Line],t.DeliveryChallanId, CONVERT(char(11),t.ProductId) as [ProductId],t.[Product Name],  
				   T.FFName, ISNULL(Value,0) as [Value] ,
				   T.ProductSequence
			FROM #tblLoop L 
			INNER JOIN #TEMP T ON l.PrincipalTeamId = t.PrincipalTeamId
			WHERE Id = ' + CONVERT(VARCHAR(10), @Count) + '
			
		)ST
		
		PIVOT
		(SUM(Value) FOR FFName IN ('+@colFF+')) AS PVT
		GROUP BY [Location Name]
		Order by  ProductSequence
		 '
		)
				
		BEGIN TRY
			EXEC (@QUERY)			
		END TRY		
		BEGIN CATCH
			PRINT ('eRROR')
			PRINT (@QUERY)
		END CATCH
			
		
		SET @Count = @Count + 1	
	  	
	END				
	
--DROP TABLE #tblLoop					
--DROP TABLE #Temp
SELECT a.DeliveryChallanId,sum(a.SoldQuantity) AS [R59 Quantity]--SUM(a.SoldQuantity) 
FROM #TEMP a WHERE a.ProductId = 14 AND PrincipalTeamId <> 99999
GROUP BY a.DeliveryChallanId
--AND a.DeliveryChallanId IN  

SELECT so.DeliveryChallanId,SUM(sop.SoldQuantity) AS [DC Quantity]
FROM dbo.SaleOrder so INNER JOIN dbo.SaleOrderProduct sop ON so.LocationId = sop.LocationId AND so.SaleOrderId = sop.SaleOrderId
--GROUP BY so.DeliveryChallanId
WHERE (DATEDIFF(DAY,so.SalePassDate,  '2013/11/23') <= 0 AND  DATEDIFF(DAY,so.SalePassDate,  '2013/11/26') >= 0) AND sop.ProductId = 14 AND sop.SoldQuantity>0
GROUP BY so.DeliveryChallanId
 GO 
DECLARE @PBLIds varchar(1000), @LocationIds varchar(1000), @RecLocationIds varchar(1000),
		@SelectAll int,@FromDate datetime,@ToDate datetime, 
		@TRSelectAll int,@TRFromDate datetime,@TRToDate datetime,
		@SelectAllDoc int,@DocRange  varchar(50),@FromDoc int,@ToDoc int, 
		@TOStatus  varchar(5),
		@Status  varchar(5),
		@IsCombineCorrection bit 

SET @PBLIds = '4'
SET @LocationIds = '11,14,29,17,19,21,28,23,12,38,26,42,15,35,18,37,43,30,36,22,24,44,13,32,27,16'
SET @RecLocationIds = '11,14,29,17,19,21,28,23,12,38,26,42,15,35,18,37,43,30,36,22,24,44,13,32,27,16'
SET @SelectAll=0
SET @FromDate = '2013-11-01 '
SET @ToDate = '2013-11-30 '
SET @TRSelectAll=0
SET @TRFromDate = '2013-11-01'
SET @TRToDate = '2013-12-31'
SET @SelectAllDoc=2
SET @DocRange='162'
SET @FromDoc = '162'
SET @ToDoc = '247' 
SET @TOStatus = 'AP'
SET @Status = ''
SET @IsCombineCorrection = 1

SELECT * FROM TransferOut to1
INNER JOIN   (
           SELECT to1.LocationId,
                  to1.TransferOutId,
                  to1.ReferenceTransferOutId
           FROM   TransferOut to1
           INNER JOIN   DBO.Split(@LocationIds, ',' ) LOC
             ON   (
                      LOC.Data = to1.LocationId OR @LocationIds = ''
                  )
           INNER JOIN   DBO.Split(@RecLocationIds, ',' ) RecLOC
             ON   (
                      RecLOC.Data = to1.ToLocationId OR @RecLocationIds = ''
                  )
           INNER JOIN   DBO.Split(@PBLIds, ',' ) PBL
             ON   (
                      PBL.Data = to1.PrincipalBusinessLineId 
                      OR @PBLIds = ''
                  )
           WHERE 
               (
                      @TOStatus = '' 
					OR (@TOStatus='AP' AND to1.IsRollbacked=0)
					OR (@TOStatus='P' AND to1.IsApproved=0 AND to1.IsRollbacked=0)
					OR (@TOStatus='A' AND to1.IsApproved=1 AND to1.IsRollbacked=0)
					OR (@TOStatus='R' AND to1.IsApproved=0 AND to1.IsRollbacked=1)
                )
            AND (
                      @Status = ''
                  OR  (
                          @Status = 'R'
                     AND  To1.TransferOutId IS NOT 
                     NULL
                      )
                  OR  (
                          @Status = 'I'
                     AND  To1.TransferOutId IS  NULL
                      )
                  OR  (
                          @Status = 'P'
                     AND  to1.TREntryDate IS NULL
                      )
               ) 
           	AND (
					   @SelectAll = 0
				   OR  (
						   @SelectAll = 1 AND  ( DATEDIFF(DAY, to1.TransactionDate,  @FromDate) = 0 /* only FOR one day*/)
					   )
				   OR  (
						   @SelectAll = 2 AND   
							(
								DATEDIFF(DAY, to1.TransactionDate,  @FromDate) <= 0
								AND 
								(
									(@IsCombineCorrection = 1 AND to1.ReferenceTransferOutId IS NOT NULL) 
									OR   datediff (day,to1.TransactionDate, @ToDate) >= 0
								)
							)  				
					   )   
				)    
			AND (
					   @TRSelectAll = 0
				   OR  (
						   @TRSelectAll = 1
					  AND  ( DATEDIFF(DAY,to1.TREntryDate,  @TRFromDate) = 0 /* only FOR one day*/)
					   )
				   OR  (
						   @TRSelectAll = 2
						   AND  (DATEDIFF(DAY,to1.TREntryDate,  @TRFromDate) <= 0AND  DATEDIFF(DAY,to1.TREntryDate,  @TRToDate) >= 0)										
					   )   
				)      			
			AND (
					   @SelectAllDoc = 0 
				   OR (
						@SelectAllDoc = 1 AND  to1.TransferOutId IN (SELECT S.DATA FROM   DBO.Split(@DocRange, ',') S)
					  )
					OR(
					  @SelectAllDoc = 2 AND ( (@FromDoc = '0'OR to1.TransferOutId>= @FromDoc) AND  (@ToDoc = '0' OR to1.TransferOutId <= @ToDoc))
					  )
				)            
       ) AS RefTI
  ON   (
           (
               to1.TransferOutId = RefTI.TransferOutId OR( @IsCombineCorrection = 1 
               AND   to1.ReferenceTransferOutId = RefTI.TransferOutId )
           )AND   to1.LocationId = RefTI.LocationId
  )
WHERE (ISNULL(RefTI.ReferencetransferOutId, 0) = CASE WHEN (@IsCombineCorrection  = 1) THEN  0 ELSE 1 END) 
   OR  
   (ISNULL(RefTI.ReferencetransferOutId, 1) > CASE WHEN (@IsCombineCorrection  = 0) THEN  0 ELSE (refti.transferoutid) END)
  -- AND RefTI.ReferenceTransferOutId IS  NULLIF(@IsCombineCorrection = 1)
  --AND ASE WHEN (@IsCombineCorrection  = 1) THEN refti.referencetransferoutid IS null ELSE refti.referencetransferoutid END 
 GO 
--CREATE   PROCEDURE dbo.usp_UDLSalesForce_ByStatus @IsBooker bit,@IsSupplier bit,@Status varchar(100) AS  

DECLARE @IsBooker bit,@IsSupplier bit,@LocationId  varchar(100) ,@Status varchar(100)  
SET @IsBooker=1  
SET @IsSupplier=1
SET @LocationId='14'  
SET @Status=''  
  
SELECT DISTINCT uf.UDLSalesForceId, uf.Name  
FROM   UDLSalesForceCategoryTagging ufct  
INNER JOIN UDLSalesForce uf ON uf.UDLSalesForceId = ufct.UDLSalesForceId  
INNER JOIN UDLSalesForceCategory ufc ON ufc.UDLSalesForceCategoryId = ufct.UDLSalesForceCategoryId  
INNER JOIN  DBO.Split(@LocationId, ',') Loc ON  (Loc.Data = uf.LocationId OR @LocationId = '')
WHERE (((@IsBooker=1 AND ufc.IsBooker = @IsBooker )OR (@IsSupplier=1 AND  ufc.IsSupplier=@IsSupplier)) OR ufct.UDLSalesForceCategoryId IN (8,9))
AND   @Status = ''  
   OR  (  
           @Status = '0'  
      AND  DATEDIFF(day,uf.EffectiveDate,GETDATE())>= 0  
      AND  DATEDIFF(day,GETDATE(),ISNULL(uf.EndDate, GETDATE()+1))>0  
      AND  DATEDIFF(day,ufct.EffectiveDate,GETDATE())>= 0  
      AND  DATEDIFF(day,GETDATE(),ISNULL(ufct.EndDate,GETDATE()+1))>0  
       )  
   OR  (  
           @Status = '1'  
      AND  DATEDIFF(day,uf.EndDate,ISNULL(GETDATE(), GETDATE()+1))>0          
  AND  DATEDIFF(day,GETDATE(),ISNULL(ufct.EndDate,GETDATE()+1))>0  
   )  
     
ORDER BY uf.Name

 GO 

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'usp_Insert_BankAccountSequence')AND type in (N'P', N'PC'))
DROP PROCEDURE usp_Insert_BankAccountSequence
GO

 CREATE PROCEDURE usp_Insert_BankAccountSequence
@out_error_number INT = 0 OUTPUT,
@LocationId int,
@BankAccountId int,
@SequenceId int,
@IsDefault bit,
@InsertDate datetime,
@UserId int
AS

SET @SequenceId  = (SELECT MAX(SequenceId)+ 1 FROM BankAccountSequence WHERE LocationId = @LocationId )
BEGIN
BEGIN TRY
	Insert into BankAccountSequence (LocationId,BankAccountId,SequenceId,IsDefault,InsertDate,InsertedBy)
	values(@LocationId,@BankAccountId,@SequenceId,@IsDefault,@InsertDate,@UserId)
END TRY
BEGIN CATCH
	SELECT @out_error_number=ERROR_NUMBER()
END CATCH
END
GO

 GO 
--CREATE PROC [dbo].[usp_Report_CustomerPeriodicalSale] 
--	@LocationIds varchar(200), 
--	@CompanyIds varchar(20),  
--	@PBLIds varchar(100),   
--	@SaleTypeIds varchar(100),   
--	@MainAreaIds varchar(MAX),  
--	@SubAreaIds varchar(MAX),  
--	@CustomerIds varchar(MAX),  
--	@ProductIds varchar(MAX), 
--	@FromDate datetime, 
--	@ToDate datetime,   	   
--	@IsCash bit,
--	@IsCredit bit,
--	@CustStatus int
--AS 

DECLARE 
	@LocationIds varchar(1000), 
	@CompanyIds varchar(1000),  
	@PBLIds varchar(1000),   
	@SaleTypeIds varchar(1000),   
	@MainAreaIds varchar(1000),  
	@SubAreaIds varchar(1000),  
	@CustomerIds varchar(1000),  
	@ProductIds varchar(1000),   
	@FromDate datetime, 
	@ToDate datetime,   		      
    @IsCash bit,
	@IsCredit bit,
	@CustStatus INT,
	@Period INT
SET @LocationIds = ''--'11,14'--'11,18,23,28,30,35,37,42,44'  
SET @CompanyIds= '1'
SET @PBLIds = ''--3,4,'--'7,3,5,28,40,4,33,37,38,20,35,41,43,44,45,47,48,49,50,55,57,58,59,60,61,62'
SET @SaleTypeIds = ''--'1,2,3,4,5'
SET @MainAreaIds = ''--'24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43'
SET @SubAreaIds = ''--'149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238'
SET @ProductIds = '' --'2545'
SET @CustomerIds= ''--'2780,2781'
SET @FromDate = '2014-04-01'  
SET @ToDate = GETDATE() 
SET @IsCash= 1
SET @IsCredit= 1
SET @CustStatus = 0
SET @Period  = 0
SELECT 
	L.SequenceId AS [LocationSequence],	
	l.ShortName AS [LOCATION NAME], 	
	A.[SALE DATE],
	Case When @Period = 0 then LEFT(RIGHT(convert(varchar(20),[SALE DATE],06),6),3)+'-'+RIGHT(convert(varchar(20),[SALE DATE],06),2)
	ELSE LEFT(CONVERT(VARCHAR(7), [SALE DATE], 111),4) END 
	AS [PERIOD],            
	A.CustomerId AS [CODE],
	csa.[Customer Name] AS [CUSTOMER NAME],
	csa.[Main Area] AS [MAIN AREA],
	csa.[Sub Area] AS [SUB AREA],
	a.[SALE NATURE] AS [SALE NATURE],	
	up.PBLShortName AS [PBL],
	A.ProductId  AS [PROD ID], 	
	UP.Name  AS [PRODUCT NAME], 		
	sum(a.[TP Value]) [TP VALUE]
	INTO #temp
FROM 
(
	SELECT 
		so.LocationId, 
		SO.SalePassDate AS [SALE DATE],	
		SO.CustomerId,
		sop.PrincipalBusinessLineId, 
		sop.ProductId,  
		CASE WHEN SO.IsCash=1 THEN 'CASH' ELSE 'CREDIT' END AS [SALE NATURE], 			
		ISNULL(sop.SoldQuantity * sop.TP,0)  [TP Value]
	FROM SaleOrder SO INNER JOIN SaleOrderProduct sop ON   sop.LocationId = SO.LocationId 
		 AND   sop.SaleOrderId = SO.SaleOrderId 				
		INNER JOIN   DBO.Split(@CompanyIds, ',' ) Company ON ( Company.Data = SO.CompanyId OR @CompanyIds = '' )	
		INNER JOIN   DBO.Split(@LocationIds, ',' ) Loc ON  ( Loc.Data = SO.LocationId OR @LocationIds = '' )
		INNER JOIN   DBO.Split(@CustomerIds, ',' ) Customer ON ( Customer.Data = SO.CustomerId OR @CustomerIds = '' )						
		INNER JOIN   DBO.Split(@PBLIds, ',' ) PBL ON (PBL.Data = sop.PrincipalBusinessLineId OR @PBLIds = '' )
		INNER JOIN   DBO.Split(@ProductIds, ',' ) Product ON ( Product.Data = sop.ProductId OR @ProductIds = '' )			 
		INNER JOIN   DBO.Split(@SaleTypeIds, ',' ) SaleTypes ON ( SaleTypes.Data = so.SaleTypeId OR @SaleTypeIds = '' )			 
	
	WHERE  SO.IsRollbacked = 0
		AND sop.EndDate IS NULL 
		AND ( DATEDIFF(DAY,SO.SalePassDate,@FromDate) <= 0 AND  DATEDIFF(DAY,SO.SalePassDate,@ToDate) >= 0)                                              	
		AND((@IsCash=1 AND SO.IsCash=1)  OR (@IsCredit=1 AND SO.IsCash=0)) 
			
	UNION ALL
	
	SELECT 
		S.LocationId, 
		S.TransactionDate AS [SALE DATE],	
		s.CustomerId,
		s.PrincipalBusinessLineId, 
		s2.ProductId, 
		CASE WHEN s.IsCash=1 THEN 'CASH' ELSE 'CREDIT' END  AS [SALE NATURE],		
		-1*s2.Quantity * pc.TP  [TP Value]
	FROM SLN s
		INNER JOIN SLNProduct s2 ON s2.LocationId = s.LocationId AND s2.SLNId = s.SLNId   
		INNER JOIN PriceCatalog pc ON  pc.PriceCatalogId=s2.PriceId
		INNER JOIN   DBO.Split(@CompanyIds, ',' ) Company ON ( Company.Data = s.CompanyId OR @CompanyIds = '' )	
		INNER JOIN   DBO.Split(@LocationIds, ',' ) Loc ON  ( Loc.Data = s.LocationId OR @LocationIds = '' )
		INNER JOIN   DBO.Split(@CustomerIds, ',' ) Customer ON ( Customer.Data = s.CustomerId OR @CustomerIds = '' )						
		INNER JOIN   DBO.Split(@PBLIds, ',' ) PBL ON (PBL.Data = s.PrincipalBusinessLineId OR @PBLIds = '' )			 
		INNER JOIN   DBO.Split(@ProductIds, ',' ) Product ON ( Product.Data = s2.ProductId OR @ProductIds = '' )			
		
	WHERE s2.Quantity > 0 
		AND (DATEDIFF(DAY,s.TransactionDate,  @FromDate) <= 0 AND DATEDIFF(DAY,s.TransactionDate,  @ToDate) >= 0)
		AND((@IsCash=1 AND s.IsCash=1)  OR (@IsCredit=1 AND s.IsCash=0)) 
		AND s2.IsFree=0
		AND S.IsRollbacked = 0	
) A 
INNER JOIN  uv_Product up ON  up.ProductId = A.ProductId
INNER JOIN  Location l ON  l.LocationId = A.LocationId
INNER JOIN  uv_CustomerSalesArea csa ON csa.LocationId=A.LocationId AND csa.CustomerId=A.CustomerId
INNER JOIN   DBO.Split(@MainAreaIds, ',' ) MainArea ON ( MainArea.Data = csa.MainAreaId OR @MainAreaIds = '' )
INNER JOIN   DBO.Split(@SubAreaIds, ',' ) SubArea ON ( SubArea.Data = csa.SubAreaId OR @SubAreaIds = '' )

WHERE
		( @CustStatus = 0 OR ( @CustStatus = 1 AND ( DATEDIFF(day, csa.[Cus Effective Date],GETDATE())>= 0 AND DATEDIFF(day,GETDATE(), isnull( csa.[Cus End Date],GETDATE()+1))> 0))
	OR ( @CustStatus = 2 AND  DATEDIFF(day,csa.[Cus End Date],ISNULL(GETDATE(), GETDATE()+1))>0 ))
 	
GROUP BY L.SequenceId ,	
	l.ShortName , 	
	A.[SALE DATE],            
	A.CustomerId,
	csa.[Customer Name] ,
	csa.[Main Area] ,
	csa.[Sub Area] ,
	a.[SALE NATURE],
	up.PBLShortName,
	A.ProductId,   	
	UP.Name    
	
DECLARE @pvtPERIOD NVARCHAR(MAX)
SET @pvtPERIOD = (SELECT DISTINCT '[' +PERIOD+  '], '
					FROM #TEMP 
                    FOR XML PATH(''), root('MyString'), type).value('/MyString[1]','varchar(max)')               
SET @pvtPERIOD= LEFT( @pvtPERIOD,LEN(@pvtPERIOD)-1 )  
--SELECT @pvtPERIOD
DECLARE @Query NVARCHAR(MAX)
SET @Query = '
SELECT [LocationSequence],[LOCATION NAME],[CODE],[CUSTOMER NAME],[MAIN AREA],[SUB AREA],[SALE NATURE],[PBL],[PROD ID],[PRODUCT NAME],'+@pvtPERIOD+'
FROM
(	SELECT	[LocationSequence],[LOCATION NAME],[CODE],[CUSTOMER NAME],[MAIN AREA],[SUB AREA],[SALE NATURE],[PBL],[PROD ID],[PRODUCT NAME],Isnull([TP VALUE],0) as [TP VALUE],PERIOD
	FROM #TEMP 
 	Where [LocationSequence]= 52
)a
PIVOT(SUM([TP VALUE])  FOR a.PERIOD IN ('+@pvtPERIOD+')) as PVT '
 
--SELECT Distinct PERIOD,CONVERT(Date,'01-'+Period,112) AS sodate
--INTO #tblLoop 
--FROM #TEMP
--ORDER BY 
--CONVERT(Date,'01-'+Period,112)

DECLARE @PeriodCount INT
SET @PeriodCount =  1

--WHILE @PeriodCount <= (SELECT COUNT(*) FROM #tblLoop) 
BEGIN
  EXEC(@Query)
  PRINT(@Query)
--SET @PeriodCount = @PeriodCount + 1
END




 GO 
CREATE PROC [dbo].[usp_Report_CustomerPeriodicalSale] 
	@CompanyIds varchar(20), 
	@LocationIds varchar(200), 
	@PBLIds varchar(100),
	@ProductIds varchar(MAX), 
	@MainAreaIds varchar(MAX),  
	@SubAreaIds varchar(MAX),  
	@CustomerIds varchar(MAX),
	@SaleTypeIds varchar(100),   
	@SaleCriteria int, 
	@FromDate datetime, 
	@ToDate datetime,   	   
	@IsCash bit,
	@IsCredit bit,
	@CustStatus int
AS 
--DECLARE @PBLIds varchar(100),
--@ProductIds nvarchar(MAX),
--        @LocationIds varchar(100),@MainAreaIds NVARCHAR(MAX), @SubAreaIds NVARCHAR(MAX),
--        @CustomerIds varchar(100),
--        @SaleCriteria int,
--        @SaleTypeIds varchar(100),
--        @IsCash bit,
--        @IsCredit bit,
--        @FromDate datetime,
--        @ToDate datetime,@CustStatus int  
--SET @PBLIds =''
--SET @LocationIds = ''
--SET @CustomerIds =''
--SET @MainAreaIds  = '' 
--set @SubAreaIds=''
--SET @SaleCriteria =1
--SET @SaleTypeIds = ''--'1,2,3,4,5'
--SET @IsCash = 1
--SET @IsCredit =1
--SET @FromDate = '2014-04-01 00:00:00'
--SET @ToDate = '2014-06-17 00:00:00'
--SET @CustStatus =0
--SET @ProductIds = ''
/*
Sale Criteria 
0-Gross Sale --Only Value
1-Net Sale -- Value-SLN
2-SLN--Only SLN
*/

SELECT 
    [tbl].LocationId,  
	l.ShortName AS [Location Name], 
	l.SequenceId AS [Loc Seq],
	[tbl].IsCash, 
	[tbl].CustomerId,
	c.[Customer Name],
	c.[Main Area],
	c.[Sub Area],
	[tbl].[Date],
	sum([Amount]) AS [Amount]
	INTO #TEMP
FROM 
(
	SELECT 
	SO.LocationId AS LocationId,  
	so.IsCash,
	so.CustomerId,
	so.PrincipalBusinessLineId, 
	so.ProductId,
	RIGHT(CONVERT(char(11),so.SalePassDate,13),8) AS [Date],
	so.SalePassDate AS TransactionDate,
	so.TP* so.SoldQuantity AS [Amount]
	FROM uv_Sales_SaleOrder so
		INNER JOIN   DBO.Split(@LocationIds, ',' ) Loc ON   ( Loc.Data = so.LocationId OR @LocationIds = '' )
		INNER JOIN   DBO.Split(@PBLIds, ',' ) PBL ON   ( PBL.Data = so.PrincipalBusinessLineId OR @PBLIds = '' )
		INNER JOIN 	 DBO.Split(@ProductIds, ',' ) Product ON   ( Product.Data = so.ProductId OR @ProductIds= '' )
		INNER JOIN   DBO.Split(@CustomerIds, ',' ) Cus ON   ( Cus.Data = so.CustomerId OR @CustomerIds = '' )
		INNER JOIN   DBO.Split(@SaleTypeIds, ',' ) SaleType ON   ( SaleType.Data = so.SaleTypeId OR @SaleTypeIds = '' )
	WHERE  
		DATEDIFF(DAY, so.SalePassDate,  @FromDate ) <= 0 
		AND  DATEDIFF(DAY,  so.SalePassDate,  @ToDate ) >= 0 	
		AND so.IsRollbacked = 0
		AND ((@IsCash=1 AND so.IsCash=1)  OR (@IsCredit=1 AND so.IsCash=0))
		AND @SaleCriteria <> 2 /*--to show Only SLN--*/
		
		
	/*------ SLN PRODUCT ------*/
	UNION ALL 

	SELECT 
		S.LocationId AS LocationId, 
		S.IsCash,
		s.CustomerId,
		S.PrincipalBusinessLineId,
		s.ProductId, 
		RIGHT(CONVERT(char(11),s.TransactionDate,13),8) AS [Date],
		s.TransactionDate, 
		CASE WHEN s.IsFree=0 THEN (PC.TP * CASE WHEN @SaleCriteria=1 THEN  -1 * s.Quantity ELSE s.Quantity END)	ELSE 0 END  AS [Amount]
	FROM uv_Sales_SLN s
		INNER JOIN   PriceCatalog pc ON   pc.PriceCatalogId = s.PriceId
		INNER JOIN   DBO.Split(@LocationIds, ',' ) Loc ON   ( Loc.Data = S.LocationId OR @LocationIds = '' )
		INNER JOIN   DBO.Split(@PBLIds, ',' ) PBL ON   ( PBL.Data = S.PrincipalBusinessLineId OR @PBLIds = '' )
		INNER JOIN 	 DBO.Split(@ProductIds, ',' ) Product ON   ( Product.Data = S.ProductId OR @ProductIds= '' )
		INNER JOIN   DBO.Split(@CustomerIds, ',' ) Cus ON   ( Cus.Data = S.CustomerId OR @CustomerIds = '' )
		
	WHERE  
		DATEDIFF(DAY, S.TransactionDate,  @FromDate ) <= 0 
		AND  DATEDIFF(DAY, S.TransactionDate,  @ToDate ) >= 0
		AND s.IsFree = 0
		AND  s.IsRollbacked = 0
		AND @SaleCriteria <> 0
		
			
)AS [tbl]
INNER JOIN Location l ON   l.LocationId = [tbl].LocationId
INNER JOIN uv_CustomerSalesArea c ON c.LocationId=[tbl].LocationId AND c.CustomerId=[tbl].CustomerId
INNER JOIN   DBO.Split(@MainAreaIds, ',' ) MainArea ON ( MainArea.Data = c.MainAreaId OR @MainAreaIds = '' )
INNER JOIN   DBO.Split(@SubAreaIds, ',' ) SubArea ON ( SubArea.Data = c.SubAreaId OR @SubAreaIds = '' )
WHERE 
 
		(
			   @CustStatus = 0
		   OR  (
				   @CustStatus = 1
			  AND  (
					   DATEDIFF(day, c.[Cus Effective Date],GETDATE())>= 0
					AND  DATEDIFF(day,GETDATE(), isnull( c.[CSA EndDate],GETDATE()+1))> 0
				   )
			   )
		   OR  (
				   @CustStatus = 2
				   AND  DATEDIFF(day,c.[CSA EndDate],ISNULL(GETDATE(), GETDATE()+1))>0               
			   )
		)	

GROUP BY	
    [tbl].LocationId,  
	l.ShortName , 
	l.SequenceId ,
	[tbl].IsCash, 
	[tbl].CustomerId,
	c.[Customer Name],
	c.[Main Area],
	c.[Sub Area],
	[tbl].[Date]

DECLARE @QUERY VARCHAR(8000),@pvtSumIsNullAmount VARCHAR(MAX),@pvtNonZeroAmountDate VARCHAR(MAX)
		
		SET @pvtNonZeroAmountDate = 
		( 
			SELECT  '[' + A.[Date] + '] , '
			FROM
			(
				SELECT DISTINCT t.[Date]
				FROM 
				#TEMP T
			) A
			ORDER BY Year(A.[Date]), Month(A.[Date])
			FOR XML PATH('' ) 
		)                            
		SET @pvtNonZeroAmountDate = LEFT( @pvtNonZeroAmountDate, LEN(@pvtNonZeroAmountDate )-1 )                          
	
		SET @pvtSumIsNullAmount = 
		( 
			SELECT  'ISNULL(SUM([' + A.[Date] + ']), 0) AS ['+A.[Date] +'],'
			FROM
			(
				SELECT DISTINCT t.[Date]
				FROM #TEMP T
			) A
			ORDER BY Year(A.[Date]), Month(A.[Date])
			FOR XML PATH('' ) 
		)                            
		SET @pvtSumIsNullAmount = LEFT( @pvtSumIsNullAmount, LEN(@pvtSumIsNullAmount )-1 )
		
		SET @QUERY = 
			'
			
				SELECT [Loc Seq],[Location Name],[Main Area],[Sub Area],CustomerId,[Customer Name], '+@pvtSumIsNullAmount+' FROM
				(
					SELECT t.[Loc Seq],t.[Location Name],t.[Main Area],t.[Sub Area],t.CustomerId,t.[Customer Name],  T.[Date], isnull(Amount,0) as [Amount] 
					FROM #TEMP T 
				)ST
				PIVOT
				(SUM(Amount) FOR [Date] IN ('+@pvtNonZeroAmountDate+')) AS PVT	
				GROUP BY [Loc Seq],[Location Name],[Main Area],[Sub Area],CustomerId,[Customer Name]
				Order BY [Loc Seq],[Main Area],[Sub Area],[Customer Name]						
			'
			EXEC (@QUERY)
			PRINT (@QUERY)										
DROP TABLE  #TEMP

 GO 
/*
 AUTHOR: SIDRA ASIF
 DATED : 14 January
 PURPOSE :  Update New Product Sequence 
*/

CREATE  PROC [dbo].[usp_Update_ProductSequence]
( @tvpTable utt_ProductSequence_TableType READONLY ,@UpdatedBy int, @EditStartTime DATETIME )
 AS 
BEGIN
	IF DATEDIFF(DAY, @EditStartTime, '1900-01-01') <> 0
	AND DATEDIFF(SECOND, ISNULL(( SELECT MAX(ISNULL(T.UpdateDate,@EditStartTime)) FROM Product AS T INNER JOIN @tvpTable AS TVP ON (T.ProductId=TVP.ProductId) ), @EditStartTime), @EditStartTime) < 0	
	--IF DATEDIFF(SECOND, ISNULL(( SELECT MAX(T.UpdateDate) FROM Product AS T INNER JOIN  @tvpTable AS TVP ON   (T.ProductId = TVP.ProductId )), @EditStartTime), @EditStartTime) < 0
	BEGIN 
		RAISERROR('Error On Update! The record cannot be updated because it has been modified by some other user after it was opened for editing by this user.', 16, 1)
	END
	
    
		UPDATE T
		SET    T.ProductSequence = TVP.ProductSequence,
			   T.UpdateDate = GETDATE(),
			   T.UpdatedBy = @UpdatedBy,
			   T.CommunicationId = NULL,
			   T.ToSend = 1
		FROM   Product AS T
		INNER JOIN   @tvpTable AS TVP
		  ON   (T.ProductId = TVP.ProductId )
		
		SELECT @@ROWCOUNT
    
END

 GO 
DECLARE @CompanyIds varchar(1000),@PBLIds  varchar(1000),@LocationIds  varchar(1000),@SelectAll int,@FromDate datetime, @ToDate datetime
SET @CompanyIds='1' 
SET @PBLIds='28'
SET @LocationIds='14' 
SET @SelectAll=2
SET @FromDate='2013-11-23 00:00:00'
SET @ToDate='2013-11-26 00:00:00'

DECLARE @pvtTotalSaleColumns VARCHAR(MAX),
        @pvtTotalSaleNonZeroColumns VARCHAR(MAX),
        @pvtTotalCreditColumns VARCHAR(MAX),
        @pvtTotalCreditNonZeroColumns VARCHAR(MAX),
        @pvtTotalPercColumns VARCHAR(MAX),
        @pvtTotalPercNonZeroColumns VARCHAR(MAX),
        @pvtMAXColumns VARCHAR(MAX)
        
SELECT
a.LocationId,l.ShortName AS [Location Name],a.PrincipalBusinessLineId,upbla.Name AS [Principal Business Line],
upbla.Name + '!Total Sale' AS [Principal Business Line Total Sale],
upbla.Name + '!Total Credit Sale' AS [Principal Business Line Total Credit Sale],
upbla.Name + '!Total Percentage' AS [Principal Business Line Total Percentage],

--sum(A.[Total Sale]) AS [Total Sale],
--sum(A.[Credit Total Net]) AS [Total Credit Net],
--CASE WHEN isnull(sum(A.[Total Sale]),sum(a.[Credit Total Net])) = 0 THEN 0 ELSE
--Sum(A.[Credit Total Net]) / isnull(sum(A.[Total Sale]),sum(a.[Credit Total Net])) END  AS [Total Percentage]
--INTO #TEMP  
FROM 
(
	SELECT udes.LocationId, udes.Date, udes.CompanyId,up.PrincipalBusinessLineId,udes.
       isnull((udes.GrossValue - udes.SLNCash-udes.SLNCredit),0)*udes.TP AS [Total Sale],
       isnull((udes.BookedLocalCredit+udes.BookedOSCredit - udes.SLNCredit),0)*udes.TP  AS [Credit Total Net]       
	FROM uv_DayEndSale udes
	INNER JOIN uv_Product up ON up.ProductId = udes.ProductId 

	UNION ALL

	SELECT s.LocationId, s.TransactionDate AS [Date],s.CompanyId, s.PrincipalBusinessLineId,
			s.[Total Net] AS [Total Sale],s.[Credit Total Net]
	FROM UV_SLN S	
) A 
	INNER JOIN DBO.Split(@CompanyIds, ',') Company ON   (Company.Data = A.CompanyId OR @CompanyIds = '')  
	INNER JOIN DBO.Split(@LocationIds, ',') LOC ON   (LOC.Data = A.LocationId OR @LocationIds = '')  
	INNER JOIN DBO.Split(@PBLIds, ',') PBL  ON   (PBL.Data = A.PrincipalBusinessLineId OR @PBLIds = '')  
	INNER JOIN uv_PrincipalBusinessLine_All upbla ON upbla.PrincipalBusinessLineId =A.PrincipalBusinessLineId
	INNER JOIN Location l ON l.LocationId=a.LocationId
WHERE
(
	@SelectAll=0 OR
	(
		@SelectAll=2 
		AND (DATEDIFF(DAY, A.Date,  @FromDate) <= 0   AND DATEDIFF(DAY,A.Date,  @ToDate) >= 0)
	)	
)
	
GROUP BY
A.CompanyId,a.LocationId,l.ShortName, A.PrincipalBusinessLineId,upbla.Name--,A.Date

HAVING sum(a.[Total Sale])>0

--SELECT * FROM #TEMP
-----------------------------------Total Sale-------------------------------------
SET @pvtTotalSaleColumns =( SELECT DISTINCT '0 [' +  [Principal Business Line Total Sale] + '], ' FROM   #TEMP FOR XML PATH(''), root('MyString'), type).value('/MyString[1]','varchar(max)')                            
SET @pvtTotalSaleColumns = LEFT(@pvtTotalSaleColumns, LEN(@pvtTotalSaleColumns )-1)

SET @pvtTotalSaleNonZeroColumns =( SELECT DISTINCT '[' +  [Principal Business Line Total Sale] + '], ' FROM   #TEMP FOR XML PATH(''), ro--CREATE PROCEDURE usp_Report_MonthlyManagementReport @CompanyIds INT, @LocationIds VARCHAR(250),@PBLIds VARCHAR(250),@SelectAll INT,@FromDate DATETIME,@ToDate DATETIME

DECLARE @CompanyIds INT, @LocationIds VARCHAR(250),@PBLIds VARCHAR(250),@SelectAll INT,@FromDate DATETIME,@ToDate DATETIME
SET @CompanyIds = 1
SET @LocationIds = '14'
SET @PBLIds = '28'
SET @SelectAll = 2
SET @FromDate = '2014-04-01 00:00:00.000'
SET @ToDate = '2014-04-19 00:00:00.000'

SELECT
l.SequenceId,
a.[LocationId],
l.[Name] AS [Location],
upbla.PBLSequenceId,
a.PrincipalBusinessLineId,
upbla.[Principal ShortName] AS [PBL],
a.[Gross Sale Cash],
a.[Gross Sale Cr],
--a.[Gross UDL Discount Cash],
--a.[Gross PBL Discount Cash],
--a.[Gross UDL Discount Cr],
--a.[Gross PBL Discount Cr],
a.[SLN Cash],
a.[SLN Cr], 
a.[SLN UDL Discount Cash], 
a.[SLN PBL Discount Cash],
a.[SLN UDL Discount Cr],
a.[SLN PBL Discount Cr],
a.[Gross Sale Cash] - 0/*a.[UDL Discount Cash] - a.[PBL Discount Cash]*/ AS [Cash Sale],
a.[Gross Sale Cr] - 0/*a.[UDL Discount Credit] - a.[PBL Discount Credit]*/ AS [Credit Sale],
a.[SLN Cash] - a.[SLN UDL Discount Cash] - a.[SLN PBL Discount Cash] AS [Cash Sales Return],
a.[SLN Cr] - a.[SLN UDL Discount Cr] - a.[SLN PBL Discount Cr] AS [Credit Sales Return],
((a.[Gross Sale Cash] - 0/*a.[UDL Discount Cash] - a.[PBL Discount Cash]*/ ) + (a.[Gross Sale Cr] - 0/*a.[UDL Discount Cr] - a.[PBL Discount Cr]*/ ) -
(a.[SLN Cash] - a.[SLN UDL Discount Cash] - a.[SLN PBL Discount Cash]) - (a.[SLN Cr] - a.[SLN UDL Discount Cr] - a.[SLN PBL Discount Cr])) 
AS [Net Sale],
--a.[Gross UDL Discount Cash] + a.[Gross UDL Discount Cr] - a.[SLN UDL Discount Cash] - a.[SLN UDL Discount Cr] AS [UDL Discount],
--a.[Gross PBL Discount Cash] + a.[Gross PBL Discount Cr] - a.[SLN PBL Discount Cash] - a.[SLN PBL Discount Cr] AS [PBL Discount],
a.[Gross Sale Cash] + a.[Gross Sale Cr] - a.[SLN Cash] - a.[SLN Cr] AS [DSP Net Sale]
FROM

(
	SELECT
		usso.LocationId,
		usso.PrincipalBusinessLineId,
		usso.IsCash,
		case when usso.IsCash = 1 then SUM(usso.soldquantity*usso.tp) else 0 end AS [Gross Sale Cash],
		case when usso.IsCash = 1 then 0 else SUM(usso.soldquantity*usso.tp) end AS [Gross Sale Cr],
		--(case when usso.IsCash = 1 then (usso.udldiscount) else 0 end) AS [Gross UDL Discount Cash],
		--(case when usso.IsCash = 1 then (usso.pbldiscount) else 0 end) AS [Gross PBL Discount Cash],
		--(case when usso.IsCash = 1 then 0 else (usso.udldiscount) end) AS [Gross UDL Discount Cr],
		--(case when usso.IsCash = 1 then 0 else (usso.pbldiscount) end) AS [Gross PBL Discount Cr]  
		0 AS [SLN Cash],
		0 AS [SLN Cr], 
		0 AS [SLN UDL Discount Cash], 
		0 AS [SLN PBL Discount Cash],
		0 AS [SLN UDL Discount Cr],
		0 AS [SLN PBL Discount Cr] 
	FROM uv_Sales_SaleOrder usso
	INNER JOIN   DBO.Split(@PBLIds, ',') PBL ON  (PBL.Data = usso.PrincipalBusinessLineId OR @PBLIds = '')
	INNER JOIN   DBO.Split(@LocationIds, ',') Location ON  (Location.Data = usso.LocationId OR @LocationIds = '')
	
	WHERE usso.CompanyId = @CompanyIds
	AND (@SelectAll = 0 
		OR ( @SelectAll = 1 AND DATEDIFF(DAY,usso.SalePassDate,@FromDate)=0) 
		OR ( @SelectAll = 2 AND DATEDIFF(DAY,usso.SalePassDate,@FromDate)<=0 AND DATEDIFF(DAY,usso.SalePassDate,@ToDate)>=0))
	
	GROUP BY usso.IsCash,usso.PrincipalBusinessLineId,usso.LocationId
 
UNION ALL

	SELECT 
		sln.LocationId,
		sln.PrincipalBusinessLineId,
		sln.IsCash,
		0 AS [Gross Sale Cash],
		0 AS  [Gross Sale Cr],
		--0 AS [Gross UDL Discount Cash],
		--0 AS [Gross PBL Discount Cash],
		--0 AS [Gross UDL Discount Cr],
		--0 AS [Gross PBL Discount Cr],  
		(case when sln.IsCash = 1 then SUM(sln.Quantity * pc.TP) else 0 end) AS [SLN Cash],
		(case when sln.IsCash = 1 then 0 else SUM(sln.Quantity * pc.TP) end) AS [SLN Cr], 
		(case when sln.IsCash = 1 then SUM(sln.DiscountUDLPart) else 0 end) AS [SLN UDL Discount Cash], 
		(case when sln.IsCash = 1 then SUM(sln.DiscountPrincipalPart) else 0 end) AS [SLN PBL Discount Cash],
		(case when sln.IsCash = 1 then 0 else SUM(sln.DiscountUDLPart) end) AS [SLN UDL Discount Cr],
		(case when sln.IsCash = 1 then 0 else SUM(sln.DiscountPrincipalPart) end) AS [SLN PBL Discount Cr] 
	FROM uv_Sales_SLN sln
	INNER JOIN PriceCatalog pc ON pc.PriceCatalogId = sln.PriceId
	INNER JOIN   DBO.Split(@PBLIds, ',') PBL ON  (PBL.Data = sln.PrincipalBusinessLineId OR @PBLIds = '')
    INNER JOIN   DBO.Split(@LocationIds, ',') Location ON  (Location.Data = sln.LocationId OR @LocationIds = '')
	
	WHERE sln.CompanyId = @CompanyIds
	AND (@SelectAll = 0 
		OR ( @SelectAll = 1 AND DATEDIFF(DAY,sln.TransactionDate,@FromDate)=0) 
		OR ( @SelectAll = 2 AND DATEDIFF(DAY,sln.TransactionDate,@FromDate)<=0 AND DATEDIFF(DAY,sln.TransactionDate,@ToDate)>=0))
	
	GROUP BY sln.IsCash,sln.PrincipalBusinessLineId,sln.LocationId

) a
INNER JOIN Location l ON A.LocationId = l.LocationId
INNER JOIN uv_PrincipalBusinessLine_All upbla ON a.PrincipalBusinessLineId = upbla.PrincipalBusinessLineId

 GO 
SELECT ccl.LocationId,
		ccl.CustomerId,
		ccl.PrincipalBusinessLineId,
		pbl.[Name],
		ccl.CreditDays,
		ccl.CreditLimit
		
 FROM CustomerCreditLimit ccl 
INNER JOIN uv_PrincipalBusinessLine_all pbl ON ccl.PrincipalBusinessLineId = pbl.PrincipalBusinessLineId
WHERE ccl.LocationId = 14 AND ccl.CustomerId = 288 

 GO 
CREATE PROCEDURE usp_Report_CustomerWiseSales @LocationId VARCHAR(200),@PBLId VARCHAR(200),
@FromDate DATETIME,@ToDate DATETIME,
@TPValue DECIMAL,@Discount DECIMAL AS
 
--DECLARE @LocationId VARCHAR(200),@PBLId VARCHAR(200),
--@FromDate DATETIME,@ToDate DATETIME,
--@TPValue DECIMAL,@Discount DECIMAL 

SET @LocationId = '14'
SET @PBLId = '28,3'
SET @FromDate = '01/12/2012'
SET @ToDate = '01/3/2014'
SET @TPValue = 1000.00
SET @Discount = 5.00

SELECT l.SequenceId,ucws.LocationId,l.[Name] AS [Location Name],
	   upbla.PBLSequenceId,ucws.PrincipalBusinessLineId,upbla.[NAME] AS [PBL],
	   ucws.CustomerId,
	   ucws.CustomerName,
	   --ucws.TransactionDate,	   
	   SUM(ucws.SaleValue - ucws.SaleReturnValue) AS [SALES VALUE],
	   SUM(ucws.SaleValue - ucws.SaleReturnValue)*(@Discount/100) AS [DISCOUNT],
	   SUM(
	   		(ucws.SaleValue - ucws.SaleReturnValue)
	   		-
	   		(
	   			(ucws.SaleValue - ucws.SaleReturnValue)*(@Discount/100)
	   		)
	   )AS [AFTER Discount]
FROM 
dbo.uv_CustomerWiseSale ucws
INNER JOIN uv_PrincipalBusinessLine_All upbla ON ucws.PrincipalBusinessLineId = upbla.PrincipalBusinessLineId
INNER JOIN dbo.Location l ON ucws.LocationId = l.LocationId
INNER JOIN Dbo.[Split](@LocationId,',')LOC ON LOC.[Data] = ucws.LocationId OR (@LocationId = '')
INNER JOIN dbo.[Split](@PBLId,',')PBL ON PBL.[Data] =  ucws.PrincipalBusinessLineId OR (@PBLId = '')

WHERE (DATEDIFF(DAY,ucws.TransactionDate,  @FromDate) <= 0 
AND  DATEDIFF(DAY,ucws.TransactionDate,  @ToDate) >= 0)
--and ucws.CustomerId = 6156
GROUP BY l.SequenceId,ucws.LocationId,l.[Name],
	   upbla.PBLSequenceId,ucws.PrincipalBusinessLineId,upbla.[NAME],
	   ucws.CustomerId,
	   ucws.CustomerName
	   --ucws.TransactionDate	   
HAVING Sum(ucws.SaleValue - ucws.SaleReturnValue) >= @TPValue


 GO 
SELECT * FROM Employees e

BEGIN trans 
CREATE TABLE SAMPLE_PAYROLL(
	EMPLOYEEID   INT              NOT NULL,
   ENAME VARCHAR (20)     NOT NULL,
   HOURLYWAGE MONEY NOT NULL,
   WORKINGHOUR INT NOT NULL,
   --GROSSPAY MONEY NOT NULL,
   --FEDERALALLOW INT NOT NULL,
   --StateTax MONEY NOT NULL,
   --FederalIncomeTax MONEY NOT NULL,
   --SocialSecurity MONEY NOT NULL,
   --Medicare MONEY NOT NULL,
   --TotalTaxWithheld MONEY NOT NULL,
   --InsuranceDeduction MONEY NOT NULL,
   NetPay MONEY NOT NULL
);
SELECT * FROM targeted
INSERT INTO SAMPLE_PAYROLL
(
	EMPLOYEEID,
	ENAME,
	HOURLYWAGE,
	WORKINGHOUR,
	NetPay
)
SELECT * FROM targeted
COMMIT trans
 GO 
select left(right(convert(varchar(20),getdate(),06),6),3)+'-'+right(convert(varchar(20),getdate(),06),2), DATEADD(dd, DATEDIFF(dd, 0, getdate()), 0),convert(varchar(20),getdate(),06)
 GO 
CREATE PROCEDURE usp_Report_GrossSaleAndMargin @CompanyId INT,@LocationIds NVARCHAR(250),@PBLIds NVARCHAR(500),@ProductIds NVARCHAR(1000),@SelectAll INT,@FromDate DATETIME,@ToDate DATETIME,@SalesCriteria INT as
--DECLARE @CompanyId INT,@LocationIds NVARCHAR(250),@PBLIds NVARCHAR(500),@ProductIds NVARCHAR(1000),@SelectAll INT,@FromDate DATETIME,@ToDate DATETIME,@SalesCriteria INT 
--SET @CompanyId = '1'
--SET @LocationIds = '11'
--SET @PBLIds = '37'
--SET @ProductIds = '896'
--SET @FromDate = '2014-04-01'
--SET @ToDate = '2014-04-04'
--SET @SalesCriteria = 1
--SET @SelectAll = 2
/*0-Gross Sale
* 1-Net Sale
* 2-SLN
* */
SELECT l.SequenceId,
		A.LocationId,
		l.ShortName,
		up.PBLSequenceId,
		A.PrincipalBusinessLineId,
		up.ShortName,
		up.ProductSequence,
		A.ProductId,
		up.[Name] AS ProductName,
		SUM(A.Quantity) AS Quantity,
		A.PP,
		SUM(A.Quantity) * A.PP AS [PPValue],
		--a.InputTaxAmount,
		A.TP, 
		SUM(A.Quantity) * A.TP AS [TPValue],
		--a.[OUTPUT TAX],
		A.TP-A.PP AS [Margin],
		(SUM(A.Quantity)* A.TP) - (SUM(A.Quantity) * A.PP) AS [MarginValue],
		((SUM(A.Quantity) * A.TP)-(SUM(A.Quantity)* A.PP)) / (SUM(A.Quantity) * A.PP) * 100 AS  [MarginPercentage]
FROM (
			SELECT
				ussl.LocationId,
				ussl.PrincipalBusinessLineId,
				ussl.ProductId,
				CASE WHEN @SalesCriteria = 0 THEN 0--SUM(ussl.Quantity) 
				     When @SalesCriteria = 1 THEN -SUM(ussl.Quantity)
				     When @SalesCriteria  = 2 THEN SUM(ussl.Quantity) END 
				 AS [Quantity],
				ussl.TransactionDate AS [Date],
				pc.PP,
				ussl.InputTaxAmount,
				pc.TP,
				ussl.OutputTaxAmount AS [OUTPUT TAX]
		    FROM uv_Sales_SLN ussl
		    INNER JOIN PriceCatalog pc ON ussl.PriceId = pc.PriceCatalogId
		    INNER JOIN   DBO.Split(@ProductIds, ',') Product ON  (Product.Data = ussl.ProductId OR @ProductIds = '')
			INNER JOIN   DBO.Split(@PBLIds, ',') PBL ON  (PBL.Data = ussl.PrincipalBusinessLineId OR @PBLIds = '')
			INNER JOIN   DBO.Split(@LocationIds, ',') Location ON  (Location.Data = ussl.LocationId OR @LocationIds = '')
			WHERE (  @SelectAll = 0	  
					OR  (@SelectAll = 1 AND ( DATEDIFF(DAY,ussl.TransactionDate,  @FromDate) = 0 ))
				    OR  (@SelectAll = 2 AND ( DATEDIFF(DAY, ussl.TransactionDate,  @FromDate) <= 0 AND DATEDIFF(day, ussl.TransactionDate, @ToDate) >= 0 ))   
			) and ussl.IsRollbacked = 0
		    GROUP BY 
				ussl.LocationId,
				ussl.PrincipalBusinessLineId,
				ussl.ProductId,
				ussl.TransactionDate,
				pc.PP,
				ussl.InputTaxAmount,
				pc.TP,
				ussl.OutputTaxAmount  
				
				UNION ALL
				
			SELECT
				usso.LocationId,
				usso.PrincipalBusinessLineId,
				usso.ProductId,
				Case When @SalesCriteria  = 0 then SUM(usso.SoldQuantity) 
				     When @SalesCriteria  = 1 then SUM(usso.SoldQuantity)
				     When @SalesCriteria  = 2 then 0 END 
				AS [Quantity],
				usso.SalePassDate AS [Date],
				pc.PP,
				0 InputTaxAmount ,
				pc.TP,
				usso.TotalOutputTax AS [OUTPUT TAX]
			FROM uv_Sales_SaleOrder usso
			INNER JOIN PriceCatalog pc ON usso.PriceId = pc.PriceCatalogId
			INNER JOIN   DBO.Split(@ProductIds, ',') Product ON  (Product.Data = usso.ProductId OR @ProductIds = '')
			INNER JOIN   DBO.Split(@PBLIds, ',') PBL ON  (PBL.Data = usso.PrincipalBusinessLineId OR @PBLIds = '')
			INNER JOIN   DBO.Split(@LocationIds, ',') Location ON  (Location.Data = usso.LocationId OR @LocationIds = '')
			WHERE 
			(  @SelectAll = 0	  
			 OR  (@SelectAll = 1 AND ( DATEDIFF(DAY, usso.SalePassDate,  @FromDate) = 0 ))
			 OR  (@SelectAll = 2 AND ( DATEDIFF(DAY, usso.SalePassDate,  @FromDate) <= 0 AND DATEDIFF(day, usso.SalePassDate, @ToDate) >= 0 ))   
			) AND usso.IsRollbacked = 0
		    GROUP BY 
				usso.LocationId,
				usso.PrincipalBusinessLineId,
				usso.ProductId,
				usso.SalePassDate,
				pc.PP,
				
				pc.TP,
				usso.TotalOutputTax
)A

--INNER JOIN PriceCatalog pc ON A.PriceId = pc.PriceCatalogId
INNER JOIN Location l ON A.LocationId = l.LocationId
INNER JOIN uv_Product up ON A.ProductId = up.ProductId
--INNER JOIN   DBO.Split(@ProductIds, ',') Product ON  (Product.Data = A.ProductId OR @LocationIds = '')
--INNER JOIN   DBO.Split(@PBLIds, ',') PBL ON  (PBL.Data = A.PrincipalBusinessLineId OR @PBLIds = '')
--INNER JOIN   DBO.Split(@LocationIds, ',') Location ON  (Location.Data = A.LocationId OR @LocationIds = '')


GROUP BY 
		l.SequenceId,  
		A.LocationId,
		l.ShortName,
		up.PBLSequenceId,
		A.PrincipalBusinessLineId,
		up.ShortName,
		up.ProductSequence,
		A.ProductId,
		up.[Name] ,
		A.PP,A.TP
		
HAVING  SUM(A.Quantity)<>0
 GO 
DECLARE @CompanyId INT,@LocationIds NVARCHAR(250),@PBLIds NVARCHAR(500),@ProductIds NVARCHAR(1000),@SelectAll INT,@FromDate DATETIME,@ToDate DATETIME,@SalesCriteria INT 
SET @CompanyId = '1'
SET @LocationIds = '11'
SET @PBLIds = '3'
SET @ProductIds = '172'
SET @FromDate = '2014-04-04'
SET @ToDate = '2014-04-15'
SET @SalesCriteria = 2
SET @SelectAll = 1
/*0-Gross Sale
* 1-Net Sale
* 2-SLN
* */	  

	----------------------------SALE---------------------------
	SELECT
	usso.LocationId,
	l.ShortName AS [Location Name],
	--up.PBLSequenceId,
	usso.PrincipalBusinessLineId,
	up.PBLShortName,
	--up.ProductSequence,
	--usso.SaleOrderId, 
	usso.ProductId,
	up.[Name] AS [Product Name],
	CASE WHEN @SalesCriteria=0 THEN sum(usso.SoldQuantity)
		 WHEN @SalesCriteria=1 THEN sum(usso.SoldQuantity) - SUM(ussln.[SLNQuantity])
		 WHEN @SalesCriteria=2 THEN -SUM(ussln.[SLNQuantity])
	END 
	AS [Sale Qty],	
	pc.PP,
	CASE WHEN @SalesCriteria=0 THEN sum(usso.SoldQuantity * pc.PP)
		 WHEN @SalesCriteria=1 THEN sum(usso.SoldQuantity * pc.PP)- SUM(ussln.[SLNQuantity] * pc.PP)
		 WHEN @SalesCriteria=2 THEN -SUM(ussln.[SLNQuantity] * pc.PP)
	END 
	AS [PPValue],	
	pc.TP,
	CASE WHEN @SalesCriteria=0 THEN sum(usso.SoldQuantity * pc.TP)
		 WHEN @SalesCriteria=1 THEN sum(usso.SoldQuantity * pc.TP) - SUM(ussln.[SLNQuantity] * pc.TP)
		 WHEN @SalesCriteria=2 THEN -sum(ussln.[SLNQuantity] * pc.TP)
	END 
	AS [TPValue]
	INTO TEMPSale
FROM uv_Sales_SaleOrder usso
--INNER JOIN SaleOrderTax sot ON usso.LocationId = sot.LocationId AND usso.SaleOrderId = sot.SaleOrderId
INNER JOIN uv_Product up ON usso.ProductId = up.ProductId 
INNER JOIN PriceCatalog pc ON usso.PriceId = pc.PriceCatalogId
INNER JOIN   DBO.Split(@LocationIds, ',') Location ON  (Location.Data = usso.LocationId OR @LocationIds = '')
INNER JOIN   DBO.Split(@PBLIds, ',') PBL ON  (PBL.Data = usso.PrincipalBusinessLineId OR @PBLIds = '')
INNER JOIN   DBO.Split(@ProductIds, ',') Product ON  (Product.Data = usso.ProductId OR @LocationIds = '')
INNER JOIN Location l ON usso.LocationId = l.LocationId

	WHERE (  @SelectAll = 0	  
		   OR  (@SelectAll = 1 AND ( DATEDIFF(DAY, usso.SalePassDate,  @FromDate) = 0 ))
		   OR  (@SelectAll = 2 AND ( DATEDIFF(DAY, usso.SalePassDate,  @FromDate) <= 0 AND DATEDIFF(day, usso.SalePassDate, @ToDate) >= 0 ))   
		  )  
		  AND usso.SalePassDate IS NOT NULL
		  AND usso.IsRollbacked  = 0

	GROUP BY 
	l.ShortName,
	l.SequenceId,
	usso.LocationId,
	up.PBLSequenceId,
	usso.PrincipalBusinessLineId, 
	up.PBLShortName,
	--usso.SaleOrderId,
	up.ProductSequence,
	usso.ProductId,
	up.[Name],
	pc.PP,
	pc.TP
	
ORDER BY 
	l.SequenceId,
	up.PBLSequenceId,
	up.ProductSequence  



/*
	SELECT SUM(Quantity) FROM uv_Sales_SLN usso  WHERE usso.LocationId = 11 AND usso.ProductId = 172 
	SELECT sum(SOLDQUANTITY) FROM uv_Sales_SaleOrder usso  WHERE usso.LocationId = 11 AND usso.ProductId = 172 AND usso.SalePassDate BETWEEN '2014-04-04' AND '2014-04-05'
*/	
	
SELECT
	usso.LocationId,
	l.ShortName AS [Location Name],
	--up.PBLSequenceId,
	usso.PrincipalBusinessLineId,
	up.PBLShortName,
	--up.ProductSequence,
	--usso.SaleOrderId, 
	usso.ProductId,
	up.[Name] AS [Product Name],
	CASE WHEN @SalesCriteria=0 THEN sum(usso.SoldQuantity)
		 WHEN @SalesCriteria=1 THEN sum(usso.SoldQuantity) - SUM(ussln.[SLNQuantity])
		 WHEN @SalesCriteria=2 THEN -SUM(ussln.[SLNQuantity])
	END 
	AS [Sale Qty],	
	pc.PP,
	CASE WHEN @SalesCriteria=0 THEN sum(usso.SoldQuantity * pc.PP)
		 WHEN @SalesCriteria=1 THEN sum(usso.SoldQuantity * pc.PP)- SUM(ussln.[SLNQuantity] * pc.PP)
		 WHEN @SalesCriteria=2 THEN -SUM(ussln.[SLNQuantity] * pc.PP)
	END 
	AS [PPValue],	
	pc.TP,
	CASE WHEN @SalesCriteria=0 THEN sum(usso.SoldQuantity * pc.TP)
		 WHEN @SalesCriteria=1 THEN sum(usso.SoldQuantity * pc.TP) - SUM(ussln.[SLNQuantity] * pc.TP)
		 WHEN @SalesCriteria=2 THEN -sum(ussln.[SLNQuantity] * pc.TP)
	END 
	AS [TPValue]
FROM uv_Sales_SLN ussl
GROUP BY 
				ussl.LocationId,
				ussl.PrincipalBusinessLineId,
				ussl.ProductId


	

 GO 
SELECT ptp.PrincipalBusinessLineId,up.PBLShortName ,pt.Name AS PrincipalTeam,
 ptp2.ProductId , up.[Name] AS ProductName
 INTO #Temp
 FROM PrincipalTeam pt 
INNER JOIN PrincipalTeamPBL ptp ON pt.PrincipalTeamId = ptp.PrincipalTeamId
INNER JOIN uv_Product up ON ptp.PrincipalBusinessLineId = up.PrincipalBusinessLineId
INNER JOIN PrincipalTeamProduct ptp2 ON pt.PrincipalTeamId = ptp2.PrincipalTeamId AND up.ProductId = ptp2.ProductId 

 GO 
ALTER PROC [dbo].[usp_Report_GenericDataSetSales] 
	@LocationIds varchar(200), 
	@CompanyIds varchar(20),  
	@PBLIds varchar(100),   
	@SaleTypeIds varchar(100),   
	@MainAreaIds varchar(MAX),  
	@SubAreaIds varchar(MAX),  
	@CustomerIds varchar(MAX),  
	@ProductIds varchar(MAX),  	
	@BatchNo varchar(50), 
	@SelectAll int,
	@FromDate datetime, 
	@ToDate datetime,   	   
	@IsCash bit,
	@IsCredit bit,
	@CustStatus int ,
	@MAreaStatus INT,
	@SAreaStatus INT,
	@BookerStatus INT,
	@SupplierStatus INT,
    @IsinvoiceDate BIT,
    @PBLWise BIT
AS 

--DECLARE 
--	@LocationIds varchar(1000), 
--	@CompanyIds varchar(1000),  
--	@PBLIds varchar(1000),   
--	@SaleTypeIds varchar(1000),   
--	@MainAreaIds varchar(1000),  
--	@SubAreaIds varchar(1000),  
--	@CustomerIds varchar(1000),  
--	@ProductIds varchar(1000),   
--	@BatchNo varchar(10),  
--	@SelectAll int, 
--	@FromDate datetime, 
--	@ToDate datetime,   		      
--    @IsCash bit,
--	@IsCredit bit,
--	@MAreaStatus INT,
--	@SAreaStatus INT,
--	@BookerStatus INT,
--	@SupplierStatus INT,
--	@CustStatus INT,
--	@IsinvoiceDate  BIT ,
--  @PBLWise BIT 
--SET @LocationIds = '11'--'11,14'--'11,18,23,28,30,35,37,42,44'  
--SET @CompanyIds= '1'
--SET @PBLIds = '3'--3,4,'--'7,3,5,28,40,4,33,37,38,20,35,41,43,44,45,47,48,49,50,55,57,58,59,60,61,62'
--SET @SaleTypeIds = ''--'1,2,3,4,5'
--SET @MainAreaIds = ''--'24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43'
--SET @SubAreaIds = ''--'149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238'
--SET @ProductIds = '' --'2545'
--SET @BatchNo = ''
--SET @CustomerIds= ''--'2780,2781'
--SET @SelectAll=2
--SET @FromDate = '2014-05-01'  
--SET @ToDate = '2014-05-31' 
--SET @IsCash= 1
--SET @IsCredit= 1
--SET @CustStatus = 0
--SET @IsinvoiceDate = 0
--SET @MAreaStatus = 0
--SET @SAreaStatus = 0
--SET @BookerStatus = 0
--SET @SupplierStatus = 0
--SET @PBLWise = 0
--SELECT * 
--INTO #CUSTOMER 
--FROM
--(
--	SELECT so.LocationId,
--		   SO.SaleOrderId,
--		   so.TransactionDate,
--		   SO.SalePassDate,
--		   so.SaleTypeId,
--		   SO.BookerId,
--		   SO.SupplierId,
--		   so.IsCash,
--		   csa.Customerid,
--		   csa.[Customer Name],
--		   csa.[Address],
--		   sa.MainAreaId,
--		   csa.SubAreaId,
--		   csa.[Sub Area]
--	FROM SALEORDER SO 
--	INNER JOIN uv_CustomerSalesArea csa ON SO.LocationId = CSA.LocationId 
--	 AND SO.CustomerId = CSA.CUSTOMERID 
--	INNER JOIN SubArea sa ON sa.SubAreaId = csa.SubAreaId
--	INNER JOIN   DBO.Split(@CompanyIds, ',' ) Company ON ( Company.Data = so.CompanyId OR @CompanyIds = '' )
--	INNER JOIN   DBO.Split(@CustomerIds, ',' ) Customer ON ( Customer.Data = so.CustomerId OR @CustomerIds = '' )
--	INNER JOIN DBO.Split(@LocationIds, ',' ) Loc ON ( Loc.Data = csa.LocationId OR @LocationIds = '')
--	INNER JOIN DBO.Split(@MainAreaIds, ',' ) MainArea ON ( MainArea.Data = csa.MainAreaId OR @MainAreaIds = '')
--	INNER JOIN DBO.Split(@SubAreaIds, ',' )  SubArea  ON ( SubArea.Data = csa.SubAreaId   OR @SubAreaIds = '' )


--	WHERE SO.IsRollbacked = 0 AND  so.CustomerToBeOpenedSubAreaId IS NULL AND 
--	(
--		@MAreaStatus = 0
--		OR (
--			   @MAreaStatus = 1
--			   AND (
--					   DATEDIFF(DAY, csa.[Main Area EffectiveDate], GETDATE()) >= 0
--					   AND DATEDIFF(DAY, GETDATE(), ISNULL(csa.[Main Area EndDate], GETDATE() + 1)) > 0
--				   )
--		   )
--		OR (
--			   @MAreaStatus = 2
--			   AND DATEDIFF(DAY, csa.[Main Area EndDate], ISNULL(GETDATE(), GETDATE() + 1)) > 0
--		   )
--	)	
--		AND 
--	(
--		@SAreaStatus = 0
--		OR (
--			   @SAreaStatus = 1
--			   AND (
--					   DATEDIFF(DAY, sa.EffectiveDate, GETDATE()) >= 0
--					   AND DATEDIFF(DAY, GETDATE(), ISNULL(sa.EndDate, GETDATE() + 1)) > 0
--				   )
--		   )
--		OR (
--			   @SAreaStatus = 2
--			   AND DATEDIFF(DAY, sa.EndDate, ISNULL(GETDATE(), GETDATE() + 1)) > 0
--		   )
--	)
--		AND 
--	(
--		@CustStatus = 0
--		OR (
--			   @CustStatus = 1
--			   AND (
--					   DATEDIFF(DAY, csa.[Cus Effective Date], GETDATE()) >= 0
--					   AND DATEDIFF(DAY, GETDATE(), ISNULL(csa.[Cus End Date], GETDATE() + 1)) > 0
--				   )
--		   )
--		OR (
--			   @CustStatus = 2
--			   AND DATEDIFF(DAY, csa.[Cus End Date], ISNULL(GETDATE(), GETDATE() + 1)) > 0
--		   )
--	)

--	UNION ALL

--	SELECT so.LocationId,
--		   SO.SaleOrderId,
--		   so.TransactionDate,
--		   SO.SalePassDate,
--		   so.SaleTypeId,
--		   SO.BookerId,
--		   SO.SupplierId,
--		   so.IsCash,
--		   csa.Customerid,
--		   SO.CustomerToBeOpenedName [Customer Name],
--		   so.CustomerToBeOpenedAddress [Address],
--		   sa.MainAreaId,
--		   sa.SubAreaId,
--		   sa.[Name] [Sub Area]
--	FROM SaleOrder so 
--	INNER JOIN  Customer csa ON so.LocationId = csa.LocationId 
--	 AND so.CustomerId = csa.CustomerId
--	INNER JOIN SubArea sa ON sa.SubAreaId = so.CustomerToBeOpenedSubAreaId
--	INNER JOIN MainArea ma ON ma.MainAreaId = sa.MainAreaId
--	INNER JOIN location l ON csa.LocationId = l.LocationId
--	INNER JOIN DBO.Split(@LocationIds, ',' ) Loc ON ( Loc.Data = csa.LocationId OR @LocationIds = '')
--	INNER JOIN DBO.Split(@MainAreaIds, ',' ) MainArea ON ( MainArea.Data = sa.MainAreaId OR @MainAreaIds = '')
--	INNER JOIN DBO.Split(@SubAreaIds, ',' )  SubArea  ON ( SubArea.Data = sa.SubAreaId   OR @SubAreaIds = '' )

--	WHERE SO.IsRollbacked = 0   
--	AND so.CustomerToBeOpenedSubAreaId IS NOT NULL 
--	AND 
--	(
--		@MAreaStatus = 0
--		OR (
--			   @MAreaStatus = 1
--			   AND (
--					   DATEDIFF(DAY, ma.EffectiveDate, GETDATE()) >= 0
--					   AND DATEDIFF(DAY, GETDATE(), ISNULL(ma.EndDate, GETDATE() + 1)) > 0
--				   )
--		   )
--		OR (
--			   @MAreaStatus = 2
--			   AND DATEDIFF(DAY, ma.EndDate, ISNULL(GETDATE(), GETDATE() + 1)) > 0
--		   )
--	)	
--		AND 
--	(
--		@SAreaStatus = 0
--		OR (
--			   @SAreaStatus = 1
--			   AND (
--					   DATEDIFF(DAY, sa.EffectiveDate, GETDATE()) >= 0
--					   AND DATEDIFF(DAY, GETDATE(), ISNULL(sa.EndDate, GETDATE() + 1)) > 0
--				   )
--		   )
--		OR (
--			   @SAreaStatus = 2
--			   AND DATEDIFF(DAY, sa.EndDate, ISNULL(GETDATE(), GETDATE() + 1)) > 0
--		   )
--	)
--		AND 
--	(
--		@CustStatus = 0
--		OR (
--			   @CustStatus = 1
--			   AND (
--					   DATEDIFF(DAY, csa.EffectiveDate, GETDATE()) >= 0
--					   AND DATEDIFF(DAY, GETDATE(), ISNULL(csa.EndDate, GETDATE() + 1))
--						   > 0
--				   )
--		   )
--		OR (
--			   @CustStatus = 2
--			   AND DATEDIFF(DAY, csa.EndDate, ISNULL(GETDATE(), GETDATE() + 1)) > 0
--		   )
--	)
--)C


SELECT 	
	l.ShortName AS [LOCATION NAME], 	
	A.SaleOrderId AS [SO NO],
	a.[SO DATE] ,
	convert(VARCHAR(10),A.[SALE DATE],103) AS [SALE DATE],
	right(convert(varchar(20),[SALE DATE],06), len(convert(varchar(20),[SALE DATE],06)) -3)AS [PERIOD],            
	A.CustomerId AS [CODE],
	csa.[Customer Name] AS [CUSTOMER NAME],
	csa.Address AS [ADDRESS],
	csa.[Main Area] AS [MAIN AREA],
	csa.[Sub Area] AS [SUB AREA],
	a.[SALE NATURE] AS [SALE NATURE],
	a.SaleTypeId,
	A.[SALE TYPE],	
	us.Name AS [BOOKER],	
	US1.Name AS [SUPPLIER],
	up.PBLShortName AS [PBL],
	Case when @PBLWise = 0 then  pl.[Description] ELSE '' END AS [PRODUCT LINE],
	Case when @PBLWise = 0 then A.ProductId ELSE '' END AS [PROD ID], 	
	Case when @PBLWise = 0 then UP.Name ELSE '' END AS [PRODUCT NAME], 		
	Case when @PBLWise = 0 then A.BatchNumber ELSE '' END AS [BATCH NO],
	Case when @PBLWise = 0 then B.ExpiryDate ELSE '1900-01-01' END AS [BATCH EXPIRY],
	Case when @PBLWise = 0 then isnull(A.[ORDER Quantity],0) ELSE 0 END AS [ORDER QUANTITY],
	Case when @PBLWise = 0 then isnull(A.[Invoice Quantity],0) ELSE 0 END AS [INVOICE QUANTITY],
	Case when @PBLWise = 0 then A.TP ELSE 0 END AS [TP],  
	-- pl.[Description] [PRODUCT LINE],
	--A.ProductId [PROD ID], 	
	--UP.Name AS [PRODUCT NAME], 		
	--A.BatchNumber AS [BATCH NO],
	--B.ExpiryDate AS [BATCH EXPIRY],
	--isnull(A.[ORDER Quantity],0) AS [ORDER QUANTITY],
	--isnull(A.[Invoice Quantity],0) AS [INVOICE QUANTITY],
	--A.TP AS [TP], 
	CONVERT(DECIMAL(18, 4),CASE WHEN ST.IsFree = 1 THEN 0 ELSE a.[TP Value] END) [TP VALUE],
	A.[Discount Value], 
	A.[Tax Value]
	INTO #temp
FROM 
(
	SELECT 
		so.LocationId, 
		CONVERT(VARCHAR(10),SO.SaleOrderId) AS SaleOrderId,
		SO.TransactionDate AS [SO DATE],
		SO.SalePassDate AS [SALE DATE],
		SO.SaleTypeId, 	
		st1.Name AS [SALE TYPE],			
--		C.MainAreaId,
--		C.SubAreaId,	
--		C.[Sub Area] AS [Sub Area],	
		SO.BookerId, 
		SO.SupplierId,
		SO.CustomerId,
--		C.[Customer Name] AS [Customer],
--		C.Address AS [Address],
		sop.PrincipalBusinessLineId, 
		sop.ProductId, 
		sop.StockTypeId, 
		sop.BatchNumber, 
		sop.TP,
		CASE WHEN SO.IsCash=1 THEN 'CASH' ELSE 'CREDIT' END AS [SALE NATURE], 
		sop.OrderQuantity  AS [ORDER Quantity],
		sop.SoldQuantity AS [Invoice Quantity],			
		ISNULL(sop.SoldQuantity * sop.TP,0)  [TP Value],
		sop.TotalOutputTaxGST + sop.TotalOutputTaxOther AS [Tax],
		(sop.SoldQuantity * sop.TP) + (sop.TotalOutputTaxGST + sop.TotalOutputTaxOther) [Amount],
		CASE WHEN ((sop.SoldQuantity * sop.TP) = 0) THEN 0 ELSE ISNULL(sop.Discount,0)/*/(sop.SoldQuantity * sop.TP) END * 100 */ END AS [Discount Value],
		CASE WHEN ((sop.SoldQuantity * sop.TP) = 0) THEN 0 ELSE (isnull(sop.TotalOutputTaxGST,0) + isnull(sop.TotalOutputTaxOther,0)) /*/ (sop.SoldQuantity * sop.TP)   END * 100 */ END [Tax Value],
		SO.SaleOrderId AS [SO]
	FROM SaleOrder SO INNER JOIN SaleOrderProduct sop ON   sop.LocationId = SO.LocationId 
		 AND   sop.SaleOrderId = SO.SaleOrderId 				
		INNER JOIN SaleType st1 ON st1.SaleTypeId = SO.SaleTypeId 
		INNER JOIN   DBO.Split(@CompanyIds, ',' ) Company ON ( Company.Data = SO.CompanyId OR @CompanyIds = '' )	
		INNER JOIN   DBO.Split(@LocationIds, ',' ) Loc ON  ( Loc.Data = SO.LocationId OR @LocationIds = '' )
		INNER JOIN   DBO.Split(@CustomerIds, ',' ) Customer ON ( Customer.Data = SO.CustomerId OR @CustomerIds = '' )						
		INNER JOIN   DBO.Split(@PBLIds, ',' ) PBL ON (PBL.Data = sop.PrincipalBusinessLineId OR @PBLIds = '' )
		INNER JOIN   DBO.Split(@ProductIds, ',' ) Product ON ( Product.Data = sop.ProductId OR @ProductIds = '' )			 
		INNER JOIN   DBO.Split(@SaleTypeIds, ',' ) SaleTypes ON ( SaleTypes.Data = so.SaleTypeId OR @SaleTypeIds = '' )			 
	
	WHERE  SO.IsRollbacked = 0
		AND sop.EndDate IS NULL 
		AND (@SelectAll = 0 OR (@SelectAll = 1 AND ( DATEDIFF(DAY,CASE WHEN @IsinvoiceDate = 1 THEN SO.TransactionDate ELSE SO.SalePassDate END ,  @FromDate) = 0))
        OR (@SelectAll = 2 AND ( DATEDIFF(DAY,CASE WHEN @IsinvoiceDate = 1 THEN SO.TransactionDate ELSE SO.SalePassDate END ,  @FromDate) <= 0
              AND  DATEDIFF(DAY,CASE WHEN @IsinvoiceDate = 1 THEN SO.TransactionDate ELSE SO.SalePassDate END ,  @ToDate) >= 0)))
		                                              	
		AND((@IsCash=1 AND SO.IsCash=1)  OR (@IsCredit=1 AND SO.IsCash=0)) 
		AND (@BatchNo = '' OR SOP.BatchNumber = @BatchNo)		


		
	UNION ALL
	
	SELECT 
		S.LocationId, 
		'SLN-'+ CONVERT(VARCHAR(10),s.SLNId) AS SaleOrderId,
		s.TransactionDate AS [SO DATE],
		S.TransactionDate AS [SALE DATE],
		NULL AS SaleTypeId, 
		'' [SALE TYPE],			
--		sa.MainAreaId, 
--		SA.SubAreaId,
--		sa.Name AS [Sub Area],
		s.UDLSalesForceId AS [BookerId], 
		s.UDLSalesForceId AS SupplierId,
		s.CustomerId,
--		csa.[Customer Name] AS [Customer],
--		csa.Address AS [Address],
		s.PrincipalBusinessLineId, 
		s2.ProductId, 
		s2.StockTypeId, 
		s2.BatchNumber, 
		pc.TP, 
		CASE WHEN s.IsCash=1 THEN 'CASH' ELSE 'CREDIT' END  AS [SALE NATURE],
		-1*s2.Quantity AS [ORDER Quantity],
		-1*s2.Quantity AS [Invoice Quantity],		
		-1*s2.Quantity * pc.TP  [TP Value],
		-1*S2.OutputTaxAmount AS [Tax],
		-1*(S2.Quantity * pc.TP) + S2.OutputTaxAmount [Amount],		
		CASE WHEN (s2.Quantity * pc.TP) = 0 THEN 0 ELSE (s.DiscountUDLPart + s.DiscountPrincipalPart)/*/(s.TotalTP) END  * 100 */ END AS [Discount],
		CASE WHEN (s2.Quantity * pc.TP) = 0 THEN 0 ELSE (S2.OutputTaxAmount/*/(s2.Quantity * pc.TP)) END * 100 */ ) END AS [Tax],		
		9999999 AS [SO]
	FROM SLN s
		INNER JOIN SLNProduct s2 ON s2.LocationId = s.LocationId AND s2.SLNId = s.SLNId   
--		INNER JOIN uv_CustomerSalesArea csa ON csa.CustomerId=S.CustomerId AND csa.LocationId=S.LocationId
--		INNER JOIN SubArea sa ON sa.SubAreaId=csa.SubAreaId
		INNER JOIN PriceCatalog pc ON  pc.PriceCatalogId=s2.PriceId
		INNER JOIN   DBO.Split(@CompanyIds, ',' ) Company ON ( Company.Data = s.CompanyId OR @CompanyIds = '' )	
		INNER JOIN   DBO.Split(@LocationIds, ',' ) Loc ON  ( Loc.Data = s.LocationId OR @LocationIds = '' )
		INNER JOIN   DBO.Split(@CustomerIds, ',' ) Customer ON ( Customer.Data = s.CustomerId OR @CustomerIds = '' )						
		INNER JOIN   DBO.Split(@PBLIds, ',' ) PBL ON (PBL.Data = s.PrincipalBusinessLineId OR @PBLIds = '' )			 
		INNER JOIN   DBO.Split(@ProductIds, ',' ) Product ON ( Product.Data = s2.ProductId OR @ProductIds = '' )			
--		INNER JOIN   DBO.Split(@MainAreaIds, ',' ) MainArea ON ( MainArea.Data = sa.MainAreaId OR @MainAreaIds = '' )
--		INNER JOIN   DBO.Split(@SubAreaIds, ',' ) SubArea ON ( SubArea.Data = sa.SubAreaId OR @SubAreaIds = '' )
	WHERE s2.Quantity > 0 AND
		(
           @SelectAll = 0
       OR  (
               @SelectAll = 1
          AND  (   
                   DATEDIFF(DAY,s.TransactionDate,  @FromDate) = 0
               )
           )
       OR  (
               @SelectAll = 2
          AND  (
                   DATEDIFF(DAY,s.TransactionDate,  @FromDate) <= 0
              AND  DATEDIFF(DAY,s.TransactionDate,  @ToDate) >= 0
               )
           )
		)	
	
		AND((@IsCash=1 AND s.IsCash=1)  OR (@IsCredit=1 AND s.IsCash=0)) 
		AND (@BatchNo = '' OR s2.BatchNumber = @BatchNo )
		AND s2.IsFree=0
		AND S.IsRollbacked = 0	
)
 AS A 
INNER JOIN  Batch b ON ( b.BatchNumber = A.BatchNumber AND   b.ProductId = A.ProductId )
INNER JOIN  uv_Product up ON  up.ProductId = A.ProductId
INNER JOIN ProductLine pl ON up.ProductLineId = pl.ProductLineId
INNER JOIN  Location l ON  l.LocationId = A.LocationId
INNER JOIN  StockType st ON  st.StockTypeId = A.StockTypeId
INNER JOIN uv_CustomerSalesArea csa ON csa.LocationId=A.LocationId AND csa.CustomerId=A.CustomerId
INNER JOIN   DBO.Split(@MainAreaIds, ',' ) MainArea ON ( MainArea.Data = csa.MainAreaId OR @MainAreaIds = '' )
INNER JOIN   DBO.Split(@SubAreaIds, ',' ) SubArea ON ( SubArea.Data = csa.SubAreaId OR @SubAreaIds = '' )

--TO INCLUDE SPOT AND SHOP SALE 
LEFT JOIN  UDLSalesForce us ON US.UDLSalesForceId = a.BookerId AND ( @BookerStatus = 0 OR ( @BookerStatus = 1 AND ( DATEDIFF(day, us.EffectiveDate,GETDATE())>= 0 AND DATEDIFF(day,GETDATE(), isnull( us.EndDate,GETDATE()+1))> 0))
	OR ( @BookerStatus = 2 AND  DATEDIFF(day,us.EndDate,ISNULL(GETDATE(), GETDATE()+1))>0 ))
LEFT JOIN  UDLSalesForce us1 ON US1.UDLSalesForceId = a.SupplierId AND ( @SupplierStatus = 0 OR ( @SupplierStatus = 1 AND ( DATEDIFF(day, us1.EffectiveDate,GETDATE())>= 0 AND DATEDIFF(day,GETDATE(), isnull( us1.EndDate,GETDATE()+1))> 0))
	OR ( @SupplierStatus = 2 AND  DATEDIFF(day,us1.EndDate,ISNULL(GETDATE(), GETDATE()+1))>0 ))
WHERE
		( @CustStatus = 0 OR ( @CustStatus = 1 AND ( DATEDIFF(day, csa.[Cus Effective Date],GETDATE())>= 0 AND DATEDIFF(day,GETDATE(), isnull( csa.[Cus End Date],GETDATE()+1))> 0))
	OR ( @CustStatus = 2 AND  DATEDIFF(day,csa.[Cus End Date],ISNULL(GETDATE(), GETDATE()+1))>0 ))
	AND  
	( @MAreaStatus = 0 OR ( @MAreaStatus = 1 AND ( DATEDIFF(day, csa.[Main Area EffectiveDate],GETDATE())>= 0 AND DATEDIFF(day,GETDATE(), isnull( csa.[Main Area EndDate],GETDATE()+1))> 0))
	OR ( @MAreaStatus = 2 AND  DATEDIFF(day,csa.[Main Area EndDate],ISNULL(GETDATE(), GETDATE()+1))>0 ))	
	AND  
	( @SAreaStatus = 0 OR ( @SAreaStatus = 1 AND ( DATEDIFF(day, csa.[Sub Area EffectiveDate],GETDATE())>= 0 AND DATEDIFF(day,GETDATE(), isnull( csa.EndDate,GETDATE()+1))> 0))
	OR ( @SAreaStatus = 2 AND  DATEDIFF(day,csa.EndDate,ISNULL(GETDATE(), GETDATE()+1))>0 ))

 	
ORDER  BY   
	L.SequenceId ,
	A.LocationId,
	[Location Name],
	a.[SO DATE],	
	A.CustomerId, 
	csa.[Customer Name],
	A.PrincipalBusinessLineId, 	 	
	A.ProductId
	
	
--DECLARE @PBLWise BIT 
--SET @PBLWise = 1
SELECT [LOCATION NAME], 	
	[SO NO],
	[SO DATE],
	[PERIOD],
	[SALE DATE],
	[CODE],
	[CUSTOMER NAME],
	[ADDRESS],
	[MAIN AREA],
	[SUB AREA],
	[SALE NATURE],
	SaleTypeId,
	[SALE TYPE],	
	[BOOKER],	
	[SUPPLIER],
	[PBL], 
	[PRODUCT LINE],
	[PROD ID], 	
	[PRODUCT NAME], 		
	[BATCH NO],
	[BATCH EXPIRY],
	[ORDER QUANTITY],
	[INVOICE QUANTITY],
	[TP],  
	SUM([TP VALUE]) AS [TP VALUE],
	SUM([Discount Value]) AS [Discount Value], 
	SUM([Tax Value]) AS [Tax Value]
FROM #Temp
GROUP BY 
[LOCATION NAME], 	
	[SO NO],
	[SO DATE] ,
	[PERIOD],
	[SALE DATE],
	[CODE],
	[CUSTOMER NAME],
	[ADDRESS],
	[MAIN AREA],
	[SUB AREA],
	[SALE NATURE],
	SaleTypeId,
	[SALE TYPE],	
	[BOOKER],	
	[SUPPLIER],
	[PBL], 
	[PRODUCT LINE],
	[PROD ID], 	
	[PRODUCT NAME], 		
	[BATCH NO],
	[BATCH EXPIRY],
	[ORDER QUANTITY],
	[INVOICE QUANTITY],
	[TP]
--DROP TABLE #Temp
 
 GO 
/************************************************************
 * Code formatted by SoftTree SQL Assistant � v4.6.12
 * Time: 5/19/2014 11:42:15 AM
 ************************************************************/

DECLARE @CompanyId      INT,
        @LocationIds    NVARCHAR(MAX),
        @PBLIds         NVARCHAR(MAX),
        @SelectAll      INT,
        @FromDate       DATETIME,
        @ToDate         DATETIME,
        @IsConsignment  BIT,
        @IsCommercial   BIT,
        @StockTypeIds   NVARCHAR(MAX)
 
SET @CompanyId = '1'
SET @LocationIds = '11'
SET @PBLIds = '28'
SET @StockTypeIds = ''
SET @SelectAll = '0'
SET @FromDate = ''
SET @ToDate = ''
SET @IsConsignment = ''
SET @IsCommercial = 1
  
SELECT ussl.LocationId,
       ussl.PrincipalBusinessLineId ,
       ussl.ProductId,
       -SUM(ussl.Quantity) [SoldQuantity],
       0 GRNQuantity
       --ussl.TransactionDate AS [Date]
FROM   uv_Sales_SLN ussl
       INNER JOIN PriceCatalog pc
            ON  ussl.PriceId = pc.PriceCatalogId
       INNER JOIN DBO.Split(@PBLIds, ',') PBL
            ON  (PBL.Data = ussl.PrincipalBusinessLineId OR @PBLIds = '')
       INNER JOIN DBO.Split(@LocationIds, ',') Location
            ON  (Location.Data = ussl.LocationId OR @LocationIds = '')
WHERE  @CompanyId = ussl.CompanyId
       AND (
               @SelectAll = 0
               OR (
                      @SelectAll = 1
                      AND (DATEDIFF(DAY, ussl.TransactionDate, @FromDate) = 0)
                  )
               OR (
                      @SelectAll = 2
                      AND (
                              DATEDIFF(DAY, ussl.TransactionDate, @FromDate) <=
                              0
                              AND DATEDIFF(DAY, ussl.TransactionDate, @ToDate) >
                                  = 0
                          )
                  )
           )
GROUP BY
       ussl.LocationId,
       ussl.PrincipalBusinessLineId,
       ussl.ProductId,
       ussl.TransactionDate


UNION ALL

SELECT usso.LocationId,
       usso.PrincipalBusinessLineId ,
       usso.ProductId,
       SUM(usso.SoldQuantity) [SoldQuantity],
       0 GRNQuantity
       --usso.SalePassDate AS [Date]
FROM   uv_Sales_SaleOrder usso
       INNER JOIN DBO.Split(@PBLIds, ',') PBL
            ON  (PBL.Data = usso.PrincipalBusinessLineId OR @PBLIds = '')
       INNER JOIN DBO.Split(@LocationIds, ',') Location
            ON  (Location.Data = usso.LocationId OR @LocationIds = '')
WHERE  @CompanyId = usso.CompanyId
       AND (
               @SelectAll = 0
               OR (
                      @SelectAll = 1
                      AND (DATEDIFF(DAY, usso.SalePassDate, @FromDate) = 0)
                  )
               OR (
                      @SelectAll = 2
                      AND (
                              DATEDIFF(DAY, usso.SalePassDate, @FromDate) <= 0
                              AND DATEDIFF(DAY, usso.SalePassDate, @ToDate) >= 0
                          )
                  )
           )
GROUP BY
       usso.LocationId,
       usso.PrincipalBusinessLineId,
       usso.ProductId,
       usso.SalePassDate

UNION ALL   
 
SELECT g.LocationId,
       G.PrincipalBusinessLineId,
       gp.GRNProductId AS ProductId,
       0 SoldQuantity,
       gp.QuantityReceived AS GRNQuantity--,g.TransactionDate
FROM   GRN g
       INNER JOIN DBO.Split(@LocationIds, ',') l
            ON  (l.Data = g.LocationId OR @LocationIds = '')
       INNER JOIN DBO.Split(@PBLIds, ',') pbl
            ON  (pbl.Data = g.PrincipalBusinessLineId OR @PBLIds = '')
       INNER JOIN GRNProduct gp
            ON  gp.GRNId = g.GRNId
            AND gp.LocationId = g.LocationId
WHERE  @CompanyId = g.CompanyId
       AND (
               @SelectAll = 0
               OR (
                      @SelectAll = 1
                      AND (DATEDIFF(DAY, g.TransactionDate, @FromDate) = 0)
                  )
               OR (
                      @SelectAll = 2
                      AND (
                              DATEDIFF(DAY, g.TransactionDate, @FromDate) <= 0
                              AND DATEDIFF(DAY, g.TransactionDate, @ToDate) >= 0
                          )
                  )
           )
       AND g.IsRollbacked = 0
			
			

 GO 
DECLARE @CompanyId INT, @LocationIds NVARCHAR(200), @PBLIds NVARCHAR(200), @SchemeBasedOn BIT, @SchemeIds NVARCHAR(MAX),  @FromDate DATETIME, @ToDate DATETIME,
@Sharing INT,@DateStatus INT 

SET @CompanyId = '1'
SET @LocationIds = '14'
SET @PBLIds = '40'

SET @SchemeBasedOn = ''
SET @SchemeIds = ''

/*0-All
* 1-Specific
* 2-Between*/
SET @DateStatus = '2'
SET @FromDate = '2013-11-23 00:00:00.000'
SET @ToDate = '2013-11-26 00:00:00.000'

SET @Sharing = ''

SELECT so.SaleOrderId,
	so.SalePassDate,
	so.CustomerId,
	ISNULL(so.CustomerToBeOpenedName , c.[Name]) AS CustomerName,
	sop.PrincipalBusinessLineId,sop.ProductId,sop.SoldQuantity,
	sos.SchemeId , s.[Description] AS [Scheme Description]

FROM 
dbo.SaleOrder so 
INNER JOIN dbo.SaleorderProduct sop ON so.LocationId = sop.LocationId AND so.SaleOrderId = sop.SaleOrderId
INNER JOIN dbo.SaleOrderScheme sos ON so.LocationId = sos.LocationId AND so.SaleOrderId = sos.SaleOrderId
INNER JOIN dbo.[Scheme] s ON sos.SchemeId = s.SchemeId
INNER JOIN dbo.Customer c ON so.LocationId = c.LocationId AND so.CustomerId = c.CustomerId
INNER JOIN DBO.[Split](@LocationIds,',')LOC ON LOC.[Data] = so.LocationId OR @LocationIds = ''
INNER JOIN DBO.[Split](@SchemeIds,',')SI ON SI.[Data] = sos.SchemeId OR @SchemeIds = ''

WHERE so.CompanyId = @CompanyId
AND sop.PrincipalBusinessLineId =@PBLIds
AND (@DateStatus = 0
     OR (@DateStatus = 1 AND so.SalePassDate = @FromDate)
     OR (@DateStatus = 2 AND so.salePassDate BETWEEN @FromDate AND @ToDate))
 GO 
CREATE PROC usp_Report_SalesPromotionDiscount @CompanyId INT, @PBLIds VARCHAR(100), @LocationIds VARCHAR(100), @FromDate DATETIME, @ToDate DATETIME, @SchemeGroupIds VARCHAR(1000), 
@ClaimGroupIds VARCHAR(1000), @SchemeIds VARCHAR(1000), @SharingBy INT, @IncludeReturns BIT, @FromBCGId INT, @ToBCGId INT, @FromBCGDate DATETIME, @ToBCGDate DATETIME, 
@SpecificBCGIds VARCHAR(100) AS

--DECLARE @CompanyId INT, @PBLIds VARCHAR(100), @LocationIds VARCHAR(100), @FromDate DATETIME, @ToDate DATETIME, @SharingBy INT, 
--@IncludeReturns BIT, @SchemeGroupIds VARCHAR(1000), @ClaimGroupIds VARCHAR(1000), @SchemeIds VARCHAR(1000), 
--@FromBCGId INT, @ToBCGId INT, @FromBCGDate DATETIME, @ToBCGDate DATETIME
--SET @CompanyId = 4
--SET @PBLIds = '1'--'1,2,3,10,17,19,20,22,23,24,25'--'27,28,21,22,23,26,29'--
--SET @LocationIds = '32'--'63,64,59,58,62,51,60,54,53,47,50,57'--'2,14,16,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54'
--SET @FromDate = '1900-01-01 00:00:00'--'2011-01-01'
--SET @ToDate = '2013-07-13 00:00:00'
--SET @SharingBy = 0 /*0.)ALL;1.)UDL;2.)PRINCIPAL*/
--SET @IncludeReturns = 1
--SET @SchemeGroupIds = ''--'6,8,11,16,17'
--SET @ClaimGroupIds = ''--'7,9,12,14,16,18'
--SET @SchemeIds = ''--'1,3,4,5,7,8,12,14,15,70,71,75,77,85,86,111,113,114,115,116,117,121,123,124,131,132,133'
--SET @FromBCGId = 142--0
--SET @ToBCGId = 142--999999
--SET @FromBCGDate = '1900-01-01 00:00:00'--'2012-12-08 00:00:00.000'
--SET @ToBCGDate = '2013-07-13 00:00:00'


SELECT so.LocationId,
       so.CustomerId,
       so.CustomerToBeOpenedName,
       so.CustomerToBeOpenedAddress,
       so.CustomerToBeOpenedSubAreaId,
       so.SaleOrderId,
       so.TransactionDate,
       DATEADD(DAY, DATEDIFF(DAY, 0, so.SalePassDate), 0) SalePassDate,
       so.SaleTypeId,
       so.IsCash,
	   s.SchemeGroupId,
	   s.ClaimGroupId,
	   s.SchemeId,
	   s.[Description] [SchemeDescription],
	   s.IsInvoiceBased,
	   bc.BranchClaimId [BCG Id], 
	   bc.TransactionDate [BCG Date],
	   s.PrincipalBusinessLineId,
	   s.AppliedProductId [ProductId],
	   s.AppliedStockTypeId [StockTypeId],
	   SUM(sos.AppliedOnTPValue) AppliedOnTPValue,
	   SUM
	   (
   		sos.Discount * 
		   (
   			(
   				CASE 
   				WHEN @SharingBy = 1 THEN s.UDLPercentage 
   				WHEN @SharingBy = 2 THEN (100 - s.UDLPercentage)
   				ELSE 100 
   				END
   			)/100
		   )
	   ) [Discount]
INTO #TempScheme
	   
FROM SaleOrder so
INNER JOIN SaleOrderScheme sos ON sos.LocationId = so.LocationId AND sos.SaleOrderId = so.SaleOrderId
INNER JOIN Scheme s ON s.SchemeId = sos.SchemeId
INNER JOIN dbo.[Split](@LocationIds, ',') fl ON fl.[Data] = so.LocationId
INNER JOIN dbo.[Split](@PBLIds, ',') fp ON fp.[Data] = s.PrincipalBusinessLineId
INNER JOIN dbo.[Split](@SchemeIds, ',') fs ON (fs.[Data] = s.SchemeId OR @SchemeIds = '')
INNER JOIN dbo.[Split](@SchemeGroupIds, ',') fsg ON (fsg.[Data] = s.SchemeGroupId OR @SchemeGroupIds = '')
INNER JOIN dbo.[Split](@ClaimGroupIds, ',') fsc ON (fsc.[Data] = s.ClaimGroupId OR @ClaimGroupIds = '')
LEFT JOIN BranchClaim bc ON bc.LocationId = sos.LocationId
 AND bc.BranchClaimId = sos.BranchClaimId
INNER JOIN dbo.[Split](@SpecificBCGIds, ',') fbn ON (fbn.[Data] = bc.BranchClaimId OR @SpecificBCGIds = '') 
WHERE so.CompanyId = @CompanyId
AND	(DATEDIFF(DAY, @FromDate, so.SalePassDate) >= 0)
AND (DATEDIFF(DAY, @ToDate, so.SalePassDate) <= 0)	
AND	ISNULL(bc.BranchClaimId, 0) >= @FromBCGId 
AND ISNULL(bc.BranchClaimId, 0) <= @ToBCGId	 
AND	(DATEDIFF(DAY, @FromBCGDate, ISNULL(bc.TransactionDate, '1900-01-01 00:00:00')) >= 0) 
AND (DATEDIFF(DAY, @ToBCGDate, ISNULL(bc.TransactionDate, '1900-01-01 00:00:00')) <= 0)	 
AND s.IsDiscountBased = 1
AND sos.EndDate IS NULL
AND 
(
	@SharingBy = 0
	OR
	(
		@SharingBy = 1 
		AND s.UDLPercentage > 0
	) 
	OR 
	(
		@SharingBy = 2
		AND (100 - s.UDLPercentage) > 0 
	)
)
GROUP BY so.LocationId, so.CustomerId, so.CustomerToBeOpenedName, so.CustomerToBeOpenedAddress, 
so.CustomerToBeOpenedSubAreaId, so.SaleOrderId, so.TransactionDate, DATEADD(DAY, DATEDIFF(DAY, 0, so.SalePassDate), 0), 
so.SaleTypeId, so.IsCash, s.SchemeGroupId, s.ClaimGroupId, s.SchemeId, s.[Description], s.IsInvoiceBased,
bc.BranchClaimId, bc.TransactionDate,
s.PrincipalBusinessLineId, s.AppliedProductId, s.AppliedStockTypeId
HAVING SUM
	   (
   		sos.Discount * 
		   (
   			(
   				CASE 
   				WHEN @SharingBy = 1 THEN s.UDLPercentage 
   				WHEN @SharingBy = 2 THEN (100 - s.UDLPercentage)
   				ELSE 100 
   				END
   			)/100
		   )
	   ) > 0




SELECT l.ShortName [Location],
c.CustomerId [Customer Code], 
ISNULL(a.CustomerToBeOpenedName, c.[Name]) [Customer Name],
ISNULL(a.CustomerToBeOpenedAddress, (c.Address1 + ' ' + c.Address2)) [Customer Address],
ma.[Name] [Customer Main Area],
sa.[Name] [Customer Sub Area],
a.SaleOrderId [Sale Order Id],
a.TransactionDate [Sale Order Date],
a.SalePassDate [Sale Pass Date],
slt.Code [Sale Type],
CASE WHEN a.IsCash = 1 THEN 'CASH' ELSE 'CREDIT' END [Sale Nature],

sg.SchemeGroupId [Scheme Group Id], 
sg.[Name] [Scheme Group Name], 
sg.ShortName [Scheme Group Short Name],
cg.ClaimGroupId [Claim Group Id], 
cg.[Name] [Claim Group Name], 
cg.ShortName [Claim Group Short Name],
a.SchemeId [Scheme Code], 
a.[SchemeDescription] [Scheme Description],
CASE WHEN a.IsInvoiceBased = 1 THEN 'YES' ELSE 'NO' END [Invoice Based],
a.SLNId [SLN Id], 
a.[SLNDate] [SLN Date],

a.[BCG Id],
a.[BCG Date],

pbl.[Name] [PBL],

a.ProductId [Product Code],
up.ShortName [Product Name], 
st.[Name] [Stock Type], 
a.Quantity, 
a.Value [Applied On Value],
a.Discount [Discount Amount],
(a.Discount / a.Value) * 100 [Discount %], 
a.Value - a.Discount [Net Value]

FROM
(
	--SELECT 0 [IsReturn],
	--       so.LocationId,
	--       so.CustomerId,
	--       so.CustomerToBeOpenedName,
	--       so.CustomerToBeOpenedAddress,
	--       so.CustomerToBeOpenedSubAreaId,
	--       so.SaleOrderId,
	--       so.TransactionDate,
	--       so.SalePassDate,
	--       so.SaleTypeId,
	--       so.IsCash,
	--       sc.SchemeGroupId,
	--       sc.ClaimGroupId,
	--       sc.SchemeId,
	--       sc.[SchemeDescription],
	--       NULL SLNId,
	--       NULL [SLNDate],
	--       sc.PrincipalBusinessLineId,
	--       so.ProductId,
	--       so.StockTypeId,
	--       so.Quantity,
	--       so.Value,
	--       so.Discount
	--FROM  #TempScheme so
	--INNER JOIN
	--(
		SELECT 0 [IsReturn],
		       sos.LocationId,
		       sos.CustomerId,
		       sos.CustomerToBeOpenedName,
		       sos.CustomerToBeOpenedAddress,
		       sos.CustomerToBeOpenedSubAreaId,
		       sos.SaleOrderId,
		       sos.TransactionDate,
		       sos.SalePassDate,
		       sos.SaleTypeId,
		       sos.IsCash,
		       sos.SchemeGroupId,
		       sos.ClaimGroupId,
		       sos.SchemeId,
		       sos.[SchemeDescription],
		       sos.IsInvoiceBased,
		       NULL SLNId,
		       NULL [SLNDate],
		       sos.[BCG Id],
		       sos.[BCG Date],
		       sos.PrincipalBusinessLineId,
		       NULL ProductId,
		       NULL StockTypeId,
		       NULL Quantity,
		       sos.AppliedOnTPValue VALUE,
		       sos.Discount
		FROM #TempScheme sos
		WHERE sos.IsInvoiceBased = 1

		UNION ALL
					   
		SELECT 0 [IsReturn],
		       sos.LocationId,
		       sos.CustomerId,
		       sos.CustomerToBeOpenedName,
		       sos.CustomerToBeOpenedAddress,
		       sos.CustomerToBeOpenedSubAreaId,
		       sos.SaleOrderId,
		       sos.TransactionDate,
		       sos.SalePassDate,
		       sos.SaleTypeId,
		       sos.IsCash,
		       sos.SchemeGroupId,
		       sos.ClaimGroupId,
		       sos.SchemeId,
		       sos.[SchemeDescription],
		       sos.IsInvoiceBased,
		       NULL SLNId,
		       NULL [SLNDate],
		       sos.[BCG Id],
		       sos.[BCG Date],
		       sos.PrincipalBusinessLineId,
		       sop.ProductId,
		       sop.StockTypeId,
		       sop.Quantity,
		       sop.Value,
		       sos.Discount
		--SUM(sop.Quantity) Quantity, SUM(sop.Value) Value, SUM(sos.Discount) Discount
		FROM 
		(
			SELECT sop1.LocationId, sop1.SaleOrderId, sop1.ProductId, sop1.StockTypeId, SUM(sop1.SoldQuantity) Quantity, SUM(sop1.SoldQuantity * sop1.TP) VALUE--, SUM(sop1.Discount) Discount
			FROM SaleOrderProduct sop1
			WHERE sop1.EndDate IS NULL
			GROUP BY sop1.LocationId, sop1.SaleOrderId, sop1.ProductId, sop1.StockTypeId
		)
		sop 
		INNER JOIN #TempScheme sos ON sos.LocationId = sop.LocationId
		 AND sos.SaleOrderId = sop.SaleOrderId
		 AND sos.ProductId = sop.ProductId
		 AND sos.StockTypeId = sop.StockTypeId
		WHERE sos.IsInvoiceBased = 0 

		UNION ALL

		SELECT 1 [IsReturn],
			   s.LocationId,
			   s.CustomerId,
			   NULL CustomerToBeOpenedName,
			   NULL CustomerToBeOpenedAddress,
			   NULL CustomerToBeOpenedSubAreaId,
			   s.SaleOrderId,
			   so.TransactionDate,
			   so.SalePassDate,
			   so.SaleTypeId,
			   s.IsCash,
			   NULL SchemeGroupId,
			   NULL ClaimGroupId,
			   NULL SchemeId,
			   NULL [SchemeDescription],
			   0 IsInvoiceBased,
			   s.SLNId,
			   s.TransactionDate [SLNDate],
			   bc.BranchClaimId [BCG Id],
		       bc.TransactionDate [BCG Date],
			   s.PrincipalBusinessLineId,
			   s2.ProductId,
			   s2.StockTypeId,
			   -SUM(s2.Quantity) Quantity,
			   -SUM(s2.Quantity * pc.TP) VALUE,
			   -
			   (
   				--SUM
				   (
					   CASE 
							WHEN @SharingBy = 1 THEN s.DiscountUDLPart
							WHEN @SharingBy = 2 THEN s.DiscountPrincipalPart
							ELSE (s.DiscountUDLPart + s.DiscountPrincipalPart)
					   END
				   )
				   /
				   (SELECT COUNT(*) FROM SLNProduct s3 WHERE s3.LocationId = s.LocationId AND s3.SLNId = s.SLNId AND s3.Quantity > 0 AND s3.IsFree = 0) 
			   ) [Discount]
		FROM SLN s
		INNER JOIN SLNProduct s2 ON s2.LocationId = s.LocationId 
		 AND s2.SLNId = s.SLNId
		INNER JOIN PriceCatalog pc ON pc.PriceCatalogId = s2.PriceId 
		INNER JOIN dbo.[Split](@LocationIds, ',') fl ON fl.[Data] = s.LocationId
		INNER JOIN dbo.[Split](@PBLIds, ',') fp ON fp.[Data] = s.PrincipalBusinessLineId
		LEFT JOIN SaleOrder so ON so.LocationId = s.LocationId
		 AND so.SaleOrderId = s.SaleOrderId
		LEFT JOIN
		(
			SELECT DISTINCT bc.LocationId, bc.BranchClaimId, bc.TransactionDate, bcbd.SLNId 
			FROM BranchClaimBonusDiscount bcbd
			INNER JOIN BranchClaim bc ON bc.LocationId = bcbd.LocationId AND bc.BranchClaimId = bcbd.BranchClaimId
			INNER JOIN dbo.[Split](@SpecificBCGIds, ',') fbn ON (fbn.[Data] = bc.BranchClaimId OR @SpecificBCGIds = '')
			WHERE ISNULL(bcbd.SLNId, 0) > 0
			AND bcbd.ClaimAmount != 0
			AND bc.IsRollbacked = 0	
		) bc ON bc.LocationId = S.LocationId
		 AND bc.SLNId = S.SLNId 
		WHERE s.CompanyId = @CompanyId
		AND	(DATEDIFF(DAY, @FromDate, s.ApprovalDate) >= 0)
		AND (DATEDIFF(DAY, @ToDate, s.ApprovalDate) <= 0)
		AND	ISNULL(bc.BranchClaimId, 0) >= @FromBCGId 
		AND ISNULL(bc.BranchClaimId, 0) <= @ToBCGId	 
		AND	(DATEDIFF(DAY, @FromBCGDate, ISNULL(bc.TransactionDate, '1900-01-01 00:00:00')) >= 0) 
		AND (DATEDIFF(DAY, @ToBCGDate, ISNULL(bc.TransactionDate, '1900-01-01 00:00:00')) <= 0)	 
		AND @IncludeReturns = 1
		AND s2.IsFree = 0
		AND 
			(
				(
					@SharingBy = 0
					AND (ISNULL(s.DiscountUDLPart, 0) > 0 OR ISNULL(s.DiscountPrincipalPart, 0) > 0)
				)
				OR
				(
					@SharingBy = 1 
					AND ISNULL(s.DiscountUDLPart, 0) > 0
				) 
				OR 
				(
					@SharingBy = 2
					AND ISNULL(s.DiscountPrincipalPart, 0) = 0 
				)
			)
		GROUP BY s.LocationId,
			   s.CustomerId,
			   s.SaleOrderId,
			   so.TransactionDate,
			   so.SalePassDate,
			   so.SaleTypeId,
			   s.IsCash,
			   s.SLNId,
			   s.TransactionDate,
			   bc.BranchClaimId,
		       bc.TransactionDate,
			   s.PrincipalBusinessLineId,
			   s2.ProductId,
			   s2.StockTypeId,
			   s.DiscountUDLPart,
			   s.DiscountPrincipalPart
		HAVING SUM(s2.Quantity) > 0
) A
INNER JOIN Location l ON l.LocationId = a.LocationId
INNER JOIN Customer c ON c.LocationId = a.LocationId
 AND c.CustomerId = a.CustomerId
INNER JOIN uv_CustomerSalesArea csa ON csa.LocationId = A.LocationId 
 AND csa.CustomerId = A.CustomerId 
INNER JOIN SubArea sa ON sa.SubAreaId = ISNULL(a.CustomerToBeOpenedSubAreaId, csa.SubAreaId)
INNER JOIN MainArea ma ON ma.MainAreaId = sa.MainAreaId 
INNER JOIN uv_PrincipalBusinessLine_All pbl ON pbl.PrincipalBusinessLineId = a.PrincipalBusinessLineId

LEFT JOIN uv_Product up ON up.ProductId = a.ProductId
LEFT JOIN StockType st ON st.StockTypeId = a.StockTypeId
  
LEFT JOIN SaleType slt ON slt.SaleTypeId = a.SaleTypeId
LEFT JOIN SchemeGroup sg ON sg.SchemeGroupId = a.SchemeGroupId
LEFT JOIN ClaimGroup cg ON cg.ClaimGroupId = a.ClaimGroupId

ORDER BY ISNULL(l.SequenceId, 9999 + L.LocationId), c.CustomerId, a.[IsReturn], a.SaleOrderId, a.SchemeId, a.SLNId

DROP TABLE #TempScheme

 GO 

--CREATE PROC usp_Report_PaidDCReport @LocationIds varchar(100),@SupplierIds varchar(100),@SaleTypeIds varchar(100),@FromDate datetime,
--@ToDate datetime,@DCSelectAll int,@DCRange varchar(1000), @FromDCID varchar(100), @ToDCID varchar(100)
--AS 

DECLARE  @LocationIds  varchar(1000),@SupplierIds  varchar(1000),@SaleTypeIds  varchar(1000),@FromDate datetime, @ToDate datetime,@DCSelectAll int,
@DCRange varchar(1000), @FromDCID varchar(100), @ToDCID varchar(100)

SET @LocationIds='14'
SET @SupplierIds=''
SET @SaleTypeIds=''
SET @FromDate='2012-07-20'
SET @ToDate='2014-01-20'
SET @DCSelectAll=0
SET @DCRange = '1'
SET @FromDCID = '1'
SET @ToDCID = '9999'

--SELECT    st.Code AS [Sale Type],
--		A.LocationId, 
--		l.ShortName AS [Location Name],
--		A.DeliveryChallanId AS [DC No], 
--		CONVERT(varchar(12),A.TransactionDate,103)  AS [DC Date],
--		CONVERT(varchar(12),A.ExpectedReturnDate,103) AS [ExpectedReturnDate], 
--		A.[Payment Id],-- AS [Payment Id], 
--		CONVERT(varchar(12),A.[Payment Date],103) AS [Payment Date], 
--		A.SupplierId,
--		us.Name AS [Supplier Name],		
--		sop.PrincipalBusinessLineId,
--		up.PBLShortName AS [PBL Name],
--		sop.ProductId,
--		up.Name AS [Product Name],
--		sop.StockTypeId,st2.Name AS [Stock Type],
--		sum(sop.SoldQuantity) AS SoldQuantity,
--		sum(sop.TP*sop.SoldQuantity) AS [TP Value],
--		sum(sop.Discount) AS [Discount],
--		sum(sop.TotalOutputTaxGST+sop.TotalOutputTaxOther) AS [Tax],
--		sum(A.TotalNet) TotalNet,
--		sum((sop.TP*sop.SoldQuantity)-sop.Discount +(sop.TotalOutputTaxGST+sop.TotalOutputTaxOther)) AS [Total-SOP]
SELECT *		
FROM    
(
	
	SELECT dc.LocationId,
		dc.DeliveryChallanId,
	    dc.TransactionDate,
		dc.ExpectedReturnDate, 
		CSP.TransactionDate AS [Payment Date],
		csp.CashSalePaymentId AS [Payment Id], 
		csp.IsApproved,
		csp.IsRollbacked, 
		dc.SupplierId,
		DC.TotalNet
	FROM DeliveryChallan dc 
	INNER JOIN CashSalePayment csp ON csp.LocationId = dc.LocationId AND csp.DeliveryChallanId = dc.DeliveryChallanId 
	--INNER JOIN Location l ON l.LocationId = dc.LocationId
	INNER JOIN DBO.Split(@LocationIds, ',') LOC ON   (LOC.Data = dc.LocationId OR @LocationIds = '')
	INNER JOIN DBO.Split(@SaleTypeIds, ',') SaleType ON   (SaleType.Data = dc.SaleTypeId OR @SaleTypeIds = '')
	INNER JOIN DBO.Split(@SupplierIds, ',') UDLSupplier ON (UDLSupplier.Data = dc.SupplierId OR @SupplierIds = '')
	WHERE   csp.IsRollbacked = 0
	--AND csp.IsApproved=1
	AND 
	  (
		@DCSelectAll = 0
		OR (@DCSelectAll = 2 AND ((@FromDCID = '0' OR  DC.DeliveryChallanId >= @FromDCID) AND  (@ToDCID = '0' OR  DC.DeliveryChallanId <= @ToDCID)))
		OR (@DCSelectAll = 1 AND  DC.DeliveryChallanId IN (SELECT S.DATA FROM   DBO.Split(@DCRange, ',') S))
	  ) 
	AND (@FromDate='' OR  DATEDIFF(DAY, csp.TransactionDate,  @FromDate) <= 0)
	AND (@ToDate='' OR  DATEDIFF(DAY, csp.TransactionDate,  @ToDate) >= 0)

	UNION ALL 

	SELECT dc.LocationId,
			dc.DeliveryChallanId,
			DC.TransactionDate,
			DC.ExpectedReturnDate,
			CSP.TransactionDate  AS [Payment Date],
			csp.CashSalePaymentId AS [Payment Id], 
			csp.IsApproved,
			csp.IsRollbacked, 
			dc.SupplierId,
			dc.TotalNet
	FROM DeliveryChallan dc 
	INNER JOIN CashSalePaymentShopSale cspss ON cspss.LocationId = dc.LocationId AND cspss.DeliveryChallanId = dc.DeliveryChallanId
	INNER JOIN CashSalePayment csp ON csp.LocationId = cspss.LocationId AND csp.CashSalePaymentId  = cspss.CashSalePaymentId
	--INNER JOIN Location l ON l.LocationId = dc.LocationId
	INNER JOIN DBO.Split(@LocationIds, ',') LOC ON   (LOC.Data = dc.LocationId OR @LocationIds = '')
	INNER JOIN DBO.Split(@SaleTypeIds, ',') SaleType ON   (SaleType.Data = dc.SaleTypeId OR @SaleTypeIds = '')
	WHERE   csp.IsRollbacked = 0
	--AND csp.IsApproved=1
	AND 
	  (
		@DCSelectAll = 0
		OR (@DCSelectAll = 2 AND ((@FromDCID = '0' OR  DC.DeliveryChallanId >= @FromDCID) AND  (@ToDCID = '0' OR  DC.DeliveryChallanId <= @ToDCID)))
		OR (@DCSelectAll = 1 AND  DC.DeliveryChallanId IN (SELECT S.DATA FROM   DBO.Split(@DCRange, ',') S))
	  ) 
	AND (@FromDate='' OR  DATEDIFF(DAY, csp.TransactionDate,  @FromDate) <= 0)
	AND (@ToDate='' OR  DATEDIFF(DAY, csp.TransactionDate,  @ToDate) >= 0)
) A
		INNER JOIN   SaleOrder so ON   so.LocationId = a.LocationId 
		AND   so.DeliveryChallanId = a.DeliveryChallanId
		INNER JOIN   SaleOrderProduct sop ON   sop.LocationId = so.LocationId 
		AND   sop.SaleOrderId = so.SaleOrderId
		
		INNER JOIN SaleType st ON st.SaleTypeId = so.SaleTypeId
		INNER JOIN uv_Product up ON up.ProductId = sop.ProductId
		INNER JOIN StockType st2 ON st2.StockTypeId = sop.StockTypeId
		--INNER JOIN Location l ON l.LocationId = A.LocationId	
		LEFT  JOIN UDLSalesForce us ON us.LocationId = a.LocationId 
		AND us.UDLSalesForceId = a.SupplierId	
		WHERE sop.EndDate IS NULL
		
--GROUP BY
--		a.LocationId,  l.ShortName,l.SequenceId,
--		a.DeliveryChallanId,
--		a.TransactionDate,
--		a.ExpectedReturnDate, 
--		a.[Payment Id], 
--		a.IsApproved,
--		a.IsRollbacked,
--		A.[Payment Date], 
--		a.SupplierId,
--		sop.PrincipalBusinessLineId,
--		up.PBLShortName,
--		sop.ProductId,
--		up.Name,
--		sop.StockTypeId,st2.Name,
--		us.Name,
--		st.Code
		
--		ORDER BY l.SequenceId
 GO 
SELECT s.SICId
	,s.PrincipalBusinessLineId
	,sp.SICProductId
	,sp.Quantity
  FROM SIC s inner join SICProduct sp on s.LocationId = sp.LocationId AND s.SICId = sp.SICId
  INNER JOIN SICType sict ON s.SICTypeId= sict.SICTypeId
  INNER JOIN StockType st ON st.StockTypeId = s.ToStockTypeId
  INNER JOIN uv_product up ON up.ProductId = sp.ProductId
  INNER JOIN batch b ON b.ProductId = sp.ProductId AND b.BatchNumber = sp.BatchNumber
--INNER JOIN PriceCatalog pc ON pc.PriceCatalogId = sp.PriceId
--INNER JOIN Location l ON l.LocationId = s.LocationId
  WHERE s.locationid = 14 AND s.PrincipalBusinessLineId = 3
  SELECT * FROM SICProduct s WHERE s.SICId = 18
  SELECT * FROM sic WHERE LocationId = 14 AND PrincipalBusinessLineId = 3 AND IsRollbacked = 0
 GO 
--SELECT so.LocationId,so.SaleorderId,so.TotalNet AS SOAmount,SUM((sop.SoldQuantity * sop.TP)+(sop.TP/(sop.WHTRate*100))) AS SOProductAmount
--FROM Saleorder so 
--INNER JOIN SaleOrderProduct sop 
--	ON so.locationId = sop.LocationId
--	AND so.SaleOrderId = sop.SaleOrderId
--INNER JOIN PriceCatalog pc 
--	ON pc.PriceCatalogId = sop.PriceId
--WHERE   so.IsRollbacked = 0 
--		AND sop.SoldQuantity > 0
--		AND so.SalePassDate IS NOT NULL 
--		AND sop.EndDate IS  NULL
--		AND sop.WHTRate > 0 
--GROUP BY so.LocationId,so.SaleOrderId,so.TotalNet,sop.TP,sop.WHTRate
--HAVING  sum(so.TotalNet) <> SUM((sop.SoldQuantity * sop.TP)+ (sop.TP/(sop.WHTRate*100)))

SELECT * FROM (
SELECT sln.LocationId,sln.SLNId,sln.TransactionDate,sln.TotalNet as SLNAmount,SUM(sln.Quantity * pc.TP) AS SLNProductAmount,(sln.TotalNet+sln.DiscountUDLPart+sln.DiscountPrincipalPart) - SUM((sln.Quantity * pc.TP)+sln.OutputTaxAmount)  AS AmountDiff
FROM uv_sales_SLN sln 
INNER JOIN PriceCatalog pc 
	ON pc.PriceCatalogId = sln.PriceId
WHERE   sln.IsRollbacked = 0 
		AND sln.Quantity > 0 
		--AND locationId = 36 AND SLNID = 6
GROUP BY sln.LocationId,sln.SLNId,sln.TransactionDate,sln.TotalNet,sln.DiscountUDLPart,sln.DiscountPrincipalPart
)
a
WHERE a.AmountDiff>1
ORDER BY a.LocationId,a.SLNId

SELECT * FROM uv_Sales_SLN uss WHERE locationId = 12 AND SLNID = 18 
 GO 
/************************************************************
 * Code formatted by SoftTree SQL Assistant � v4.6.12
 * Time: 6/18/2014 11:06:23 AM
 ************************************************************/

DECLARE @FromDate     DATETIME,
        @ToDate       DATETIME,
        @IsCash       BIT,
        @IsCredit     BIT,
        @LocationIds  NVARCHAR(MAX),
        @PBLIds       NVARCHAR(MAX),
        @CustomerIds  NVARCHAR(MAX),
        @MainAreaIds  nvarchar(MAX),
        @SubAreaIds   NVARCHAR(MAX),
        @Product      NVARCHAR(MAX),
        @CompanyId    INT,
        @SaleTpyeIds  VARCHAR(50)

SET @FromDate = '2014-06-01'
SET @ToDate = '2014-06-17'
SET @IsCash = 1
SET @IsCredit = 1

SELECT l.ShortName,
       l.Name,
       l.SequenceId,
       sln.CustomerId,
       ucsa.[Customer Name],
       ucsa.[Sub Area],
       ucsa.[Main Area],
       sln.ProductId,
       up.Name AS ProductName,
       sln.PrincipalBusinessLineId,
       sln.PriceId,
       sln.Quantity,
       pc.TP,
       sln.Quantity * pc.TP AS [TP VALUE],
       sln.SLNId,
       sln.CompanyId
FROM   uv_Sales_SLN AS sln
       INNER JOIN Location AS l
            ON  sln.LocationId = l.LocationId
       INNER JOIN uv_CustomerSalesArea AS ucsa
            ON  sln.CustomerId = ucsa.CustomerId
       INNER JOIN uv_Product AS up
            ON  sln.ProductId = up.ProductId
            AND sln.PrincipalBusinessLineId = up.PrincipalBusinessLineId
       INNER JOIN PriceCatalog AS pc
            ON  sln.PriceId = pc.PriceCatalogId
WHERE  (sln.IsCash = 1 AND @IsCash = 1) OR (sln.IsCash = 0 AND @IsCredit = 1)
       AND (sln.IsRollbacked = 0)
       AND DATEDIFF(d, sln.TransactionDate, @FromDate) >= 0
       AND DATEDIFF(d, sln.TransactionDate, @ToDate) <= 0 
ORDER BY l.SequenceId,ucsa.MainAreaId,ucsa.SubAreaId,ucsa.CustomerId

 GO 
SELECT * FROM saleorder so 
WHERE locationid = 11 
	AND customerid = 8170
	AND saleorderid = 7
----------------------------
SELECT * FROM customer
WHERE customerid = 8170
	AND locationid = 11
----------------------------
SELECT * 
FROM saleorder so
WHERE so.LocationId = 11
	AND so.CustomerId = 6678
----------------------------
SELECT * 
FROM Creditcollection cc
WHERE cc.locationid = 11 
	AND	cc.CreditCollectionId = 6
 GO 
SELECT * FROM Resource
SELECT * FROM resource r WHERE r.resourceid = 685
SELECT * FROM resource r WHERE r.ParentId = 542 ORDER BY r.SortOrderNo

SELECT * FROM Privilege p

--UPDATE resource 
--SET [Type] = 'REPORTS', [Name] = 'Gross Sale and Gross &Margin'
--WHERE ResourceId = 685
 GO 
INSERT INTO [DBSV2_Live].[dbo].[Resource]
           ([FormFileName]
           ,[Name]
           ,[Code]
           ,[ParentId]
           ,[Type]
           ,[Depth]
           ,[SortOrderNo]
           ,[ShowInMenu]
           ,[ShortcutKey]
           ,[SeperatorInMenu]
           ,[IsStockReleatedScreen]
           ,[IsCustomerReleatedScreen]
           ,[IsConsignment]
           ,[IsCommercial]
           ,[IsUsageLoggingRequired]
           ,[ModuleId]
           ,[Parameter]
           ,[AllowDuringDayCycleOnly]
           ,[OnLoadBehaviorId]
           ,[OnSaveBehaviorId]
           ,[AllowProductOnes]
           ,[InsertDate]
           ,[InsertedBy]
           ,[UpdateDate]
           ,[UpdatedBy]
           ,[ToSend]
           ,[CommunicationId])
     VALUES(
           'frmGrossSaleAndGrossMargin'
           ,'Gross Sale and Gross Margin'
           ,'R174-'
           ,542
           ,'REPORT'
           ,3
           ,13
           ,1
           ,NULL
           ,0
           ,0
           ,0
           ,1
           ,1
           ,0
           ,6
           ,NULL
           ,0
           ,2
           ,2
           ,0
           ,'2013-05-18 14:17:33.697'
           ,1
           ,NULL
           ,0
           ,1
           ,NULL)
GO



 GO 
SELECT SUM(sop.SoldQuantity),sum(so.TotalOutputTax)
FROM saleorder so 
  INNER JOIN SaleOrderProduct sop  on so.locationid= sop.LocationId AND so.saleorderid = sop.SaleOrderId
  --INNER JOIN SaleOrderTax sot ON so.LocationId = sot.LocationId AND so.SaleOrderId = sot.SaleOrderId
  --INNER JOIN ProductTax pt ON sot.ProductTaxId =pt.ProductTaxId AND sop.ProductId = pt.ProductId 
  --INNER JOIN Tax t ON pt.TaxId = t.TaxId
WHERE so.LocationId = 11 AND sop.ProductId = 993 AND so.SalePassDate BETWEEN '2014-04-01 00:00:00.000' AND '2014-04-15 23:59:00.000'

SELECT slnp.productId,SUM(slnp.Quantity),SUM(slnp.InputTaxAmount),SUM(slnp.OutputTaxAmount)
FROM SLN sln 
  INNER JOIN SLNProduct slnp  on sln.locationid= slnp.LocationId AND sln.SLNID= slnp.SLNID
  --INNER JOIN SaleOrderTax sot ON sln.LocationId = sot.LocationId AND sln.SaleOrderId = slnp.SaleOrderId
  --INNER JOIN ProductTax pt ON sot.ProductTaxId =pt.ProductTaxId AND sop.ProductId = pt.ProductId 
  --INNER JOIN Tax t ON pt.TaxId = t.TaxId
WHERE sln.IsRollbacked = 0 and sln.TransactionDate BETWEEN '2014-04-01 00:00:00.000' AND '2014-04-15 23:59:00.000'
GROUP BY slnp.ProductId
HAVING SUM(slnp.InputTaxAmount)> 0 Or SUM(slnp.OutputTaxAmount)>0 

SELECT up.PrincipalBusinessLineId FROM uv_Product up WHERE up.ProductId IN (1523
,1977
,1978
,2161
,2465
,2520
,2526
,2527
,2532
,2545
,2546
,2549
,2555
,2556
,2561
,2566
,2577
,2578
,2698
,2701)




SELECT * FROM uv_Product up WHERE up.ProductId = 2545

 GO 
SELECT * FROM INFORMATION_SCHEMA.TABLES t
WHERE t.table_NAME LIKE '%inter%Branch%'
ORDER BY t.TABLE_NAME

SELECT * FROM InterBranchCollection 
SELECT * FROM InterBranchCollectionSaleOrder


SELECT * FROM SnDInterBranchCollection sdbc
 GO 
SELECT * FROM saleorder so WHERE so.LocationId = 14 AND so.SaleTypeId = (SELECT st.saletypeId FROM SaleType st WHERE st.Code = 'SPL')
SELECT * FROM SaleOrderProduct sop WHERE sop.LocationId = 14 AND sop.SaleOrderId = 2156

SELECT * FROM saleorder so --WHERE so.LocationId = 14 AND so.SaleTypeId = (SELECT st.saletypeId FROM SaleType st WHERE st.Code = 'SPL')) 
inner join saleorderscheme sos ON so.locationid = sos.locationid AND  so.saleorderid = sos.saleorderId
INNER JOIN SCHEME s ON sos.schemeId = s.SchemeId 
WHERE sos.locationid = 14 and s.IsDiscountBased = 0 AND s.IsInvoiceBased = 0 AND s.IsMBI=0 

SELECT * FROM schemeDetail sd WHERE sd.appliedQuantity <5 AND sd.appliedQuantity >0

SELECT * FROM saleorder so inner join saleorderscheme sos 
on so.locationid= sos.locationid and sos.saleorderid = so.saleorderid
INNER JOIN SCHEME s ON sos.schemeId = s.schemeId   
WHERE so.locationid = 14 AND so.deliverychallanId =251--IN (88,158,251,255)

SELECT * FROM SaleOrderProduct sop WHERE sop.LocationId = 14 AND sop.SaleOrderId = 251
 GO 
DECLARE @FromDate DATETIME, @ToDate DATETIME
SET @FromDate = '2009-12-26 00:00:00.000'--'2013-11-01 00:00:00'
SET @ToDate = '2011-01-01 23:59:59.000'

--/*NO CRITERIA*/
--SELECT * FROM SaleOrder so
--INNER JOIN SaleOrderProduct sop ON sop.LocationId = so.LocationId
--AND sop.SaleOrderId = so.SaleOrderId

--/*DATEDIFF*/
--SELECT * FROM SaleOrder so
--INNER JOIN SaleOrderProduct sop ON sop.LocationId = so.LocationId
--AND sop.SaleOrderId = so.SaleOrderId
--WHERE DATEDIFF(DAY, so.SalePassDate,  @FromDate) <= 0
--AND  DATEDIFF(DAY, so.SalePassDate,  @ToDate) >= 0

/*BETWEEN*/
SELECT * FROM SaleOrder so
INNER JOIN SaleOrderProduct sop ON sop.LocationId = so.LocationId
AND sop.SaleOrderId = so.SaleOrderId
WHERE so.SalePassDate BETWEEN @FromDate AND @ToDate



CHECKPOINT; 
GO 
DBCC DROPCLEANBUFFERS; 
GO
DBCC FREEPROCCACHE
GO

 GO 
--usp_Report_SNDOpeningBalance

--exec usp_Report_SNDOpeningBalance 5,58,29
CREATE PROC dbo.usp_Report_SNDOpeningBalance @CompanyId int, @LocationId int,@SNDID int
AS

Declare		@PreviousSNDID		numeric(5,0),
			@PreviousSndToDate	datetime,
			@OB_DD				numeric(15,2)
	
SELECT @PreviousSNDID = MAX(sndid),
		@PreviousSndToDate = ISNULL(MAX(s.ToDate), (SELECT MIN(sd.ToDate) FROM SnD sd WHERE sd.CompanyId = @CompanyId  
AND sd.LocationId = @LocationId AND sd.RollbackDate IS NULL))
FROM snd s WHERE s.CompanyId = @CompanyId  
AND s.LocationId=@LocationId AND s.SnDId < @SNDID AND s.RollbackDate IS NULL


--Create temp table
CREATE TABLE #TempSNDOpeningBalance (CompanyID numeric(9,0),LocationID numeric(9,0),SNDID numeric(9,0),
								Cash numeric(15,2),Cheque numeric(15,2),Vault numeric(15,2),DD_PO numeric(15,2),TC numeric(15,2),OtherDocument numeric(15,2)
								,BalanceDeposited numeric(15,2),BankBalance numeric(15,2),TotalBankBalance numeric(15,2),
								ReturnDocument numeric(15,2),BankCharges numeric(15,2),Shortage numeric(15,2),DirectlyRemitted numeric(15,2),
								Customer_ADJ numeric(15,2), OS_ADV_ADJ numeric(15,2), SLN_ADJ numeric(15,2), CN_ADJ numeric(15,2),
								WHT_ADJ numeric(15,2), IBC_ADJ numeric(15,2), ROUNDOFF numeric(15,2))


--Working for opening balance
--===========================
--Cash and Vault
INSERT INTO #TempSNDOpeningBalance (CompanyID,LocationID,SNDID,Cash,Vault)
(
SELECT	@CompanyId,@LocationId,@SNDID,
		OpeningBalanceSafe,OpeningBalanceVault 
FROM	SnD s inner JOIN SnDCashDetail scd ON s.LocationId = scd.LocationId AND s.SnDId = scd.SnDId
WHERE	s.CompanyId=@CompanyId AND s.LocationId=@LocationId AND s.SnDId=@SNDID AND s.RollbackDate IS NULL
)


--CHEQUE,DD_PO,TC,OTHER
INSERT INTO #TempSNDOpeningBalance (CompanyID,LocationID,SNDID,CHEQUE,DD_PO,TC,OtherDocument)
(
SELECT	@CompanyId,@LocationId,@SNDID,
		ISNULL(sum((CASE WHEN pm.typecode='CHQ' AND sdm.Type='D' THEN sdm.Amount ELSE 0 END)),0) AS CHEQUE,
		ISNULL(sum((CASE WHEN pm.typecode IN ('DD','PO') AND sdm.Type='D' THEN sdm.Amount ELSE 0 END)),0) AS DD,
		ISNULL(sum((CASE WHEN pm.typecode IN ('TC') AND sdm.Type='D' THEN sdm.Amount ELSE 0 END)),0) AS TC,
		ISNULL(sum((CASE WHEN pm.typecode NOT IN ('TC','CHQ','DD','PO','TC') AND sdm.Type='D' THEN sdm.Amount ELSE 0 END)),0) AS OTHER

FROM snd s
		INNER JOIN SnDBankDocMovement sdm ON sdm.LocationId = s.LocationId AND sdm.SnDId = s.SnDId
		INNER JOIN PaymentTransaction pt ON pt.LocationId = sdm.LocationId AND pt.PaymentTransactionId = sdm.PaymentTransactionId
		INNER JOIN PaymentMode pm ON pm.PaymentModeId=pt.PaymentModeId
WHERE	s.CompanyId=@CompanyId and	s.LocationId=@LocationId AND s.SnDId < @SNDID AND (sdm.DepositedSnDId >=@SNDID OR sdm.DepositedSnDId IS null) 
		AND s.RollbackDate IS null
)

--DD_PO,TC,OTHER (Other Doc Remit to HO)
INSERT INTO #TempSNDOpeningBalance (CompanyID,LocationID,SNDID,DD_PO,TC,OtherDocument)
(
SELECT @CompanyId,@LocationId,@SNDID,
		ISNULL(sum((CASE WHEN pm.typecode IN ('DD','PO') THEN v.AdjustedAmount ELSE 0 END)),0) AS DD,
		ISNULL(sum((CASE WHEN pm.typecode IN ('TC') THEN v.AdjustedAmount ELSE 0 END)),0) AS TC,
		ISNULL(sum((CASE WHEN pm.typecode NOT IN ('TC','DD','PO') THEN v.AdjustedAmount ELSE 0 END)),0) AS OTHER 
FROM snd s
		INNER JOIN uv_SNDPaymentTransaction v ON v.CompanyId=s.CompanyId AND  v.LocationId = s.LocationId AND v.SnDId = s.SnDId 
INNER JOIN PaymentTransaction pt ON pt.CompanyId = v.CompanyId AND pt.LocationId = v.LocationId AND pt.PaymentTransactionId = v.PaymentTransactionId
INNER JOIN PaymentMode pm ON pm.PaymentModeId = pt.PaymentModeId
WHERE  s.CompanyId=@CompanyId and	s.LocationId=@LocationId AND s.SnDId < @SNDID AND pm.IsToBeRemitted=1 AND s.RollbackDate IS null
AND Not exists (SELECT PaymentTransactionId FROM SnDRemittanceOtherDoc sdod  INNER JOIN SnD sdo ON sdo.LocationId = sdod.LocationId AND sdo.SnDId = sdod.SnDId
                WHERE  sdod.LocationId=v.LocationId and v.PaymentTransactionId=sdod.PaymentTransactionId   AND sdod.SnDId < @SNDID  AND sdo.RollbackDate IS null)
)

--CASH DD OB
INSERT INTO #TempSNDOpeningBalance (CompanyID,LocationID,SNDID,DD_PO)
(
SELECT	@CompanyId,@LocationId,@SNDID,
		ISNULL(sum(sdd.Amount),0)
FROM snd s
		INNER JOIN SnDCashDD sdd ON sdd.LocationId = s.LocationId AND sdd.SnDId = s.SnDId
WHERE	s.CompanyId=@CompanyId and	s.LocationId=@LocationId AND s.SnDId < @SNDID  AND s.RollbackDate IS null
)
--BANK DD OB
INSERT INTO #TempSNDOpeningBalance (CompanyID,LocationID,SNDID,DD_PO)
(
SELECT	@CompanyId,@LocationId,@SNDID,
		ISNULL(sum(sdd.Amount),0)
FROM snd s
		INNER JOIN SnDBankDD sdd ON sdd.LocationId = s.LocationId AND sdd.SnDId = s.SnDId
WHERE	s.CompanyId=@CompanyId and	s.LocationId=@LocationId AND s.SnDId < @SNDID  AND s.RollbackDate IS null
)
--CASH DD & BANK DD Remittance OB
INSERT INTO #TempSNDOpeningBalance (CompanyID,LocationID,SNDID,DD_PO)
(
SELECT	@CompanyId,@LocationId,@SNDID,
		(ISNULL(sum(sr.TotalCashDD),0)*-1 ) + (ISNULL(sum(sr.TotalbankDD),0)*-1 )
FROM snd s
		INNER JOIN SnDRemittance sr ON sr.LocationId = s.LocationId AND sr.SnDId = s.SnDId
WHERE	s.CompanyId=@CompanyId and	s.LocationId=@LocationId AND s.SnDId < @SNDID  AND s.RollbackDate IS null
)





--BalanceDeposited, BankBalance
--INSERT INTO #TempSNDOpeningBalance (CompanyID,LocationID,SNDID,BalanceDeposited,BankBalance)
--(
--SELECT	@CompanyId,@LocationId,@SNDID,	
--		isnull(sum(isnull(BalanceDeposited,0)),0) ,isnull(sum(isnull(BankBalance,0)),0)
--FROM	#TempBankBalance 
--WHERE	OB = 1
--)


--RETURN CHQ, BANK CHARGES
INSERT INTO #TempSNDOpeningBalance (CompanyID,LocationID,SNDID,ReturnDocument,BankCharges)
(
SELECT	@CompanyId,@LocationId,@SNDID,	
		sdb.BalanceReturned,sdb.TotalBankCharges
FROM	snd s inner JOIN SnDBankDetail sdb ON sdb.LocationId = s.LocationId AND sdb.SnDId = s.SnDId 
WHERE	s.CompanyId=@CompanyId and sdb.LocationId=@LocationId AND s.SnDId = @PreviousSNDID AND s.RollbackDate IS null
)

--Shortage OB from O/B Shortage

--Shortage OB from cash sale payment
INSERT INTO #TempSNDOpeningBalance (CompanyID,LocationID,SNDID,Shortage)
(
SELECT	@CompanyId,@LocationId,@SNDID,	
		SHORTAGE=ISNULL(sum(ISNULL(csp.Shortage,0)),0)
FROM	CashSalePayment csp 
		INNER JOIN SnDCashSalePayment sdsp ON sdsp.LocationId=csp.LocationId AND sdsp.CashSalePaymentId=csp.CashSalePaymentId
		INNER JOIN snd s ON s.LocationId = sdsp.LocationId AND s.SnDId = sdsp.SnDId
WHERE	s.CompanyId=@CompanyId  AND s.LocationId=@LocationId AND s.SnDId < @SNDID AND s.RollbackDate IS NULL AND csp.Shortage>0


--Shortage OB from credit collection

UNION all
SELECT	@CompanyId,@LocationId,@SNDID,	
		SHORTAGE=ISNULL(sum(ISNULL(cc.Shortage,0)),0)
FROM	CreditCollection cc 
		INNER JOIN SnDCreditCollection scc ON scc.LocationId=cc.LocationId AND scc.CreditCollectionId=cc.CreditCollectionId
		INNER JOIN snd s ON s.LocationId = scc.LocationId AND s.SnDId = scc.SnDId
WHERE	s.CompanyId=@CompanyId  AND s.LocationId=@LocationId AND s.SnDId < @SNDID AND s.RollbackDate IS NULL AND cc.Shortage>0
--Shortage OB from cash reduction
UNION all
SELECT	@CompanyId,@LocationId,@SNDID,	
		SHORTAGE=ISNULL(sum(ISNULL(cr.ReductionAmount,0)),0) 
FROM	SnDCashReduction cr
		INNER JOIN snd s ON s.LocationId = cr.LocationId AND s.SnDId = cr.SnDId
WHERE	s.CompanyId=@CompanyId  AND s.LocationId=@LocationId AND s.SnDId < @SNDID AND s.RollbackDate IS NULL 
--		SND Refrence table missing with opening balance shortage

UNION all
		SELECT  @CompanyId,@LocationId,@SNDID,
				SHORTAGE=ISNULL(sum(ISNULL(obs.Shortageamount,0)),0) FROM obSMShortage obs
		WHERE   obs.LocationId = @LocationId AND obs.CompanyId =@CompanyId 
--Shortage OB from Adjustment
UNION all
SELECT	@CompanyId,@LocationId,@SNDID,	
		SHORTAGE=ISNULL(sum(ISNULL(sc.CollectedAmount,0)),0) * -1 
FROM	SnDShortageCollection sc
		INNER JOIN snd s ON s.LocationId = sc.LocationId AND s.SnDId = sc.SnDId
WHERE	s.CompanyId=@CompanyId  AND s.LocationId=@LocationId AND s.SnDId < @SNDID AND s.RollbackDate IS NULL
)

-- Adjustment SLN, CN, WHT, Advance, OS Advance, IBC
-----------------------------------------------------------------------------------------------
INSERT INTO #TempSNDOpeningBalance (CompanyID,LocationID,SNDID,Customer_ADJ,OS_ADV_ADJ,SLN_ADJ,CN_ADJ,WHT_ADJ,IBC_ADJ)
(

SELECT	@CompanyId,@LocationId,@SNDID,
		ISNULL(sum(sd.CustomerAdvanceAdjusted),0) * -1,
		ISNULL(sum(sd.OutstationAdvanceAdjusted),0) *-1,
		ISNULL(sum(sd.SLNAdjusted),0),
		ISNULL(sum(sd.CustomerCNAdjusted),0),
		ISNULL(sum(sd.WHTDeducted ),0),
		ISNULL(sum(sd.InterBranchCollectionAdjusted ),0) * -1
FROM snd s 
		INNER JOIN SnDCollection sd ON sd.LocationId = s.LocationId AND sd.SnDId = s.SnDId
WHERE	s.CompanyId=@CompanyId  AND s.LocationId=@LocationId AND s.SnDId < @SNDID    AND s.RollbackDate IS null		
GROUP BY s.CompanyId,s.LocationId,s.SnDId

--SELECT	@CompanyId,@LocationId,@SNDID,	
--		ISNULL(sum(ISNULL(csp.CustomerAdvanceAdjusted,0)),0)  * -1 
--		,ISNULL(sum(ISNULL(csp.OSAdvanceAdjusted,0)),0) * -1
--		,ISNULL(sum(ISNULL(csp.SLNAdjusted,0)),0)
--		,ISNULL(sum(ISNULL(csp.CreditNoteAdjusted,0)),0)
--		,ISNULL(sum(ISNULL(csp.WHTAdjusted,0)),0)
--		,0 --IBC
--FROM	CashSalePayment csp 
--		INNER JOIN SnDCashSalePayment sdsp ON sdsp.LocationId=csp.LocationId AND sdsp.CashSalePaymentId=csp.CashSalePaymentId
--		INNER JOIN snd s ON s.LocationId = sdsp.LocationId AND s.SnDId = sdsp.SnDId
--WHERE	s.CompanyId=@CompanyId  AND s.LocationId=@LocationId AND s.SnDId < @SNDID    AND s.RollbackDate IS null
--		AND s.RollbackDate IS null
--GROUP BY s.CompanyId,s.LocationId,s.SnDId
--UNION all

--SELECT	@CompanyId,@LocationId,@SNDID,	
--		sum(ISNULL(cc.CustomerAdvanceAdjusted,0))  * -1
--		,sum(ISNULL(cc.OSAdvanceAdjusted,0))  * -1
--		,sum(ISNULL(cc.SLNAdjusted,0))
--		,sum(ISNULL(cc.CreditNoteAdjusted,0))
--		,sum(ISNULL(cc.WHTAdjusted,0))
--		,sum(ISNULL(cc.InterBranchCollectionAmount,0)) * -1
--FROM	CreditCollection cc 
--		INNER JOIN SnDCreditCollection scc ON scc.LocationId=cc.LocationId AND scc.CreditCollectionId=cc.CreditCollectionId
--		INNER JOIN snd s ON s.LocationId = scc.LocationId AND s.SnDId = scc.SnDId
--WHERE	s.CompanyId=@CompanyId  AND s.LocationId=@LocationId AND s.SnDId < @SNDID  AND s.RollbackDate IS null
--GROUP BY s.CompanyId,s.LocationId,s.SnDId

UNION ALL

SELECT	@CompanyId,@LocationId,@SNDID,	
		sum(ISNULL(da.TotalAdvance,0))  * -1
		,0 --OSAdvanceAdjusted
		,sum(ISNULL(da.TotalSLN,0))
		,sum(ISNULL(da.TotalCreditNote,0))
		,0 --WHTAdjusted
		,0 --InterBranchCollectionAmount
FROM DirectAdjustment da
WHERE da.CompanyId=@CompanyId and da.LocationId=@LocationId AND da.TransactionDate <@PreviousSndToDate AND da.ApprovalDate IS NOT null

UNION ALL
SELECT	@CompanyId,@LocationId,@SNDID,	
		0 -- AdvanceAdjusted
		,0 --OSAdvanceAdjusted
		,0 --SLN Adjusted
		,0 --CN Adjusted
		,sum(ISNULL(ow.Amount,0))   --WHTAdjusted
		,0 --InterBranchCollectionAmount
FROM obWHT ow
WHERE ow.CompanyId=@CompanyId  AND ow.LocationId=@LocationId 


--======================================
--Credit Entry -- Customer CN Adjustment
--======================================

UNION ALL
--Credit Entry -- CN Adjustment
SELECT	@CompanyId,@LocationId,@SNDID,	
		0 -- AdvanceAdjusted
		,0 --OSAdvanceAdjusted
		,0 -- SLN Adjusted
		,sum(ISNULL(cn.amount,0)) * -1
		,0 --WHTAdjusted
		,0 --InterBranchCollectionAmount
FROM CustomerCreditNote cn
WHERE cn.CompanyId=@CompanyId and cn.LocationId=@LocationId AND cn.BranchApprovalDate <@PreviousSndToDate AND cn.BranchApprovalDate IS NOT NULL

--Credit Entry -- SLN Adjustment
UNION all
SELECT	@CompanyId,@LocationId,@SNDID,	
		 0 -- AdvanceAdjusted
		,0 --OSAdvanceAdjusted
		,sum(ISNULL(s.TotalNet,0)) * -1 
		,0 --CN Adjusted
		,0 --WHTAdjusted
		,0 --InterBranchCollectionAmount
FROM SLN s
WHERE s.CompanyId=@CompanyId and s.LocationId=@LocationId AND s.ApprovalDate <@PreviousSndToDate  AND s.RollbackDate IS NULL
UNION ALL

--Credit Entry -- Customer ADV Adjustment
SELECT	@CompanyId,@LocationId,@SNDID,	
		sum(ISNULL(ca.Amount,0)) -- AdvanceAdjusted
		,0 --OSAdvanceAdjusted
		,0 --SLN Adjusted
		,0 --CN Adjusted
		,0 --WHTAdjusted
		,0 --InterBranchCollectionAmount
FROM CustomerAdvance ca
INNER JOIN SnDCustomerAdvance sd ON sd.LocationId = ca.LocationId AND sd.CustomerAdvanceId = ca.CustomerAdvanceId
INNER JOIN snd s ON s.LocationId = sd.LocationId AND s.SnDId = sd.SnDId
WHERE	s.CompanyId=@CompanyId  AND s.LocationId=@LocationId AND s.SnDId < @SNDID AND  s.RollbackDate IS null

UNION ALL

--Credit Entry -- OS ADV Adjustment
SELECT	@CompanyId,@LocationId,@SNDID,	
		0 -- AdvanceAdjusted
		,sum(ISNULL(oa.Amount,0)) --OSAdvanceAdjusted
		,0 --SLN Adjusted
		,0 --CN Adjusted
		,0 --WHTAdjusted
		,0 --InterBranchCollectionAmount
FROM OutstationAdvance oa
INNER JOIN SnDOutstationAdvance sd ON sd.LocationId = oa.LocationId AND sd.OutstationAdvanceId = oa.OutstationAdvanceId
INNER JOIN snd s ON s.LocationId = sd.LocationId AND s.SnDId = sd.SnDId
WHERE	s.CompanyId=@CompanyId  AND s.LocationId=@LocationId AND s.SnDId < @SNDID AND s.ApprovalDate IS NOT NULL  AND s.RollbackDate IS null

UNION ALL
--Credit Entry -- WHT Adjustment

SELECT	@CompanyId,@LocationId,@SNDID,	
		0 -- AdvanceAdjusted
		,0 --OSAdvanceAdjusted
		,0 --SLN Adjusted
		,0 --CN Adjusted
		,sum(ISNULL(ws.adjustedAmount,0))   * -1   --WHTAdjusted
		,0 --InterBranchCollectionAmount
FROM WHTChallan w
INNER JOIN WHTChallanSaleOrder ws ON ws.LocationId = w.LocationId AND ws.WHTChallanId = w.WHTChallanId
INNER JOIN CashSalePayment csp ON csp.LocationId = ws.LocationId AND csp.CashSalePaymentId = ws.CashSalePaymentId
INNER JOIN SnDCashSalePayment scsp ON scsp.LocationId = csp.LocationId AND scsp.CashSalePaymentId = csp.CashSalePaymentId
INNER JOIN snd s ON s.LocationId = scsp.LocationId AND s.SnDId = scsp.SnDId
WHERE s.CompanyId=@CompanyId AND s.LocationId=@LocationId AND s.SnDId<@SNDID AND ws.CashSalePaymentId IS NOT NULL  AND s.RollbackDate IS null

UNION ALL

SELECT	@CompanyId,@LocationId,@SNDID,	
		0 -- AdvanceAdjusted
		,0 --OSAdvanceAdjusted
		,0 --SLN Adjusted
		,0 --CN Adjusted
		,sum(ISNULL(ws.adjustedAmount,0))   * -1   --WHTAdjusted
		,0 --InterBranchCollectionAmount
FROM WHTChallan w
INNER JOIN WHTChallanSaleOrder ws ON ws.LocationId = w.LocationId AND ws.WHTChallanId = w.WHTChallanId
INNER JOIN CreditCollection cc ON cc.LocationId = ws.LocationId AND cc.CreditCollectionId = ws.CreditCollectionId
INNER JOIN SnDCreditCollection scc ON scc.LocationId = cc.LocationId AND scc.CreditCollectionId = cc.CreditCollectionId
INNER JOIN snd s ON s.LocationId = scc.LocationId AND s.SnDId = scc.SnDId
WHERE s.CompanyId=@CompanyId AND s.LocationId=@LocationId AND s.SnDId<@SNDID AND ws.CreditCollectionId IS NOT NULL  AND s.RollbackDate IS null

UNION all
SELECT	@CompanyId,@LocationId,@SNDID,	
		0 -- AdvanceAdjusted
		,0 --OSAdvanceAdjusted
		,0 --SLN Adjusted
		,0 --CN Adjusted
		,sum(ISNULL(wr.AdjustedAmount,0))   * -1   --WHTAdjusted
		,0 --InterBranchCollectionAmount
FROM WHTReversal wr 
INNER JOIN SnDWHTReversal sd ON sd.LocationId = wr.LocationId AND sd.WHTReversalId = wr.WHTReversalId
INNER JOIN snd s ON s.LocationId = sd.LocationId AND s.SnDId = sd.SnDId
WHERE s.CompanyId=@CompanyId AND s.LocationId=@LocationId AND s.SnDId<@SNDID  AND s.RollbackDate IS null




UNION all

SELECT	@CompanyId,@LocationId,@SNDID,	
		0 -- AdvanceAdjusted
		,0 --OSAdvanceAdjusted
		,0 --SLN Adjusted
		,0 --CN Adjusted
		,0 --WHTAdjusted
		,sum(ISNULL(ibc.TotalAmount,0))  --InterBranchCollectionAmount
FROM InterBranchCollection ibc
INNER JOIN SnDInterBranchCollection sibc ON sibc.LocationId = ibc.LocationId AND sibc.InterBranchCollectionId = ibc.InterBranchCollectionId
INNER JOIN snd s ON s.LocationId = sibc.LocationId AND s.SnDId = sibc.SnDId AND s.CompanyId=ibc.CompanyId
WHERE s.CompanyId=@CompanyId AND s.LocationId=@LocationId AND s.SnDId<@SNDID AND s.RollbackDate IS NULL

)

SELECT CompanyID,LocationID,SNDID
		,ISNULL(SUM(ISNULL(Cash,0)),0) AS Cash
		,ISNULL(SUM(ISNULL(Cheque,0)),0) AS Cheque
		,ISNULL(SUM(ISNULL(Vault,0)),0) AS Vault
		,ISNULL(SUM(ISNULL(DD_PO,0)),0) AS DD_PO
		,ISNULL(SUM(ISNULL(TC,0)),0) AS TC
		,ISNULL(SUM(ISNULL(OtherDocument,0)),0) AS OtherDocument
		,ISNULL(SUM(ISNULL(BalanceDeposited,0)),0) AS BalanceDeposited
		,ISNULL(SUM(ISNULL(BankBalance,0)),0) AS BankBalance
		,ISNULL(SUM(ISNULL(TotalBankBalance,0)),0) AS TotalBankBalance
		,ISNULL(SUM(ISNULL(ReturnDocument,0)),0) AS ReturnDocument
		,ISNULL(SUM(ISNULL(BankCharges,0)),0) AS BankCharges
		,ISNULL(SUM(ISNULL(Shortage,0)),0) AS Shortage
		,ISNULL(SUM(ISNULL(DirectlyRemitted,0)),0) AS DirectlyRemitted
		,ISNULL(SUM(ISNULL(Customer_ADJ,0)),0) AS Customer_ADJ
		,ISNULL(SUM(ISNULL(OS_ADV_ADJ,0)),0) AS OS_ADV_ADJ
		,ISNULL(SUM(ISNULL(SLN_ADJ,0)),0) AS SLN_ADJ
		,ISNULL(SUM(ISNULL(CN_ADJ,0)),0) AS CN_ADJ
		,ISNULL(SUM(ISNULL(WHT_ADJ,0)),0) AS WHT_ADJ
		,ISNULL(SUM(ISNULL(IBC_ADJ,0)),0) AS IBC_ADJ
		,ISNULL(SUM(ISNULL(ROUNDOFF,0)),0) AS ROUNDOFF
--INTO #SNDOpeningBalance	
FROM #TempSNDOpeningBalance
GROUP BY CompanyID,LocationID,SNDID

--DELETE FROM #TempSNDOpeningBalance

--INSERT INTO #TempSNDOpeningBalance
--SELECT * FROM #SNDOpeningBalance

--DROP TABLE #SNDOpeningBalance
--SELECT * FROM #TempSNDOpeningBalance
DROP TABLE #TempSNDOpeningBalance

 GO 

CREATE PROCEDURE usp_Report_MonthlyManagementReport @CompanyIds INT, @LocationIds VARCHAR(250),@PBLIds VARCHAR(250),@SelectAll INT,@FromDate DATETIME,@ToDate DATETIME
AS
--DECLARE @CompanyIds INT, @LocationIds VARCHAR(250),@PBLIds VARCHAR(250),@SelectAll INT,@FromDate DATETIME,@ToDate DATETIME
--SET @CompanyIds = 1
--SET @LocationIds = ''
--SET @PBLIds = ''
--SET @SelectAll = 2
--SET @FromDate = '2014-04-01 00:00:00.000'
--SET @ToDate = '2014-04-06 00:00:00.000'


SELECT usso.LocationId, usso.SaleOrderId, usso.PrincipalBusinessLineId, usso.IsCash, SUM(usso.soldquantity*usso.tp) [TotalTP]
INTO #TempSO
FROM uv_Sales_SaleOrder usso
INNER JOIN   DBO.Split(@PBLIds, ',') PBL ON  (PBL.Data = usso.PrincipalBusinessLineId OR @PBLIds = '')
INNER JOIN   DBO.Split(@LocationIds, ',') Location ON  (Location.Data = usso.LocationId OR @LocationIds = '')
WHERE usso.CompanyId = @CompanyIds
AND 
(
	@SelectAll = 0 
	OR ( @SelectAll = 1 AND DATEDIFF(DAY,usso.SalePassDate,@FromDate)=0) 
	OR ( @SelectAll = 2 AND DATEDIFF(DAY,usso.SalePassDate,@FromDate)<=0 AND DATEDIFF(DAY,usso.SalePassDate,@ToDate)>=0)
)
GROUP BY usso.LocationId, usso.SaleOrderId, usso.PrincipalBusinessLineId, usso.IsCash	

SELECT
l.SequenceId,
a.[LocationId],
l.ShortName AS [LOCATION],
upbla.PBLSequenceId,
a.PrincipalBusinessLineId,
upbla.[Name] AS [PBL],
--SUM(a.[GROSS SALE CASH]) AS [GROSS SALE CASH],
--SUM(a.[GROSS SALE CR]) AS [GROSS SALE CR],
--SUM(a.[GROSS UDL DISCOUNT CASH]) AS [GROSS UDL DISCOUNT CASH],
--SUM(a.[GROSS PBL DISCOUNT CASH]) AS [GROSS PBL DISCOUNT CASH],
--SUM(a.[GROSS UDL DISCOUNT CR]) AS [GROSS UDL DISCOUNT CR],
--SUM(a.[GROSS PBL DISCOUNT CR]) AS [GROSS PBL DISCOUNT CR],
--SUM(a.[SLN CASH]) AS [SLN CASH],
--SUM(a.[SLN CR]) AS [SLN CR], 
--SUM(a.[SLN UDL DISCOUNT CASH]) AS [SLN UDL DISCOUNT CASH], 
--SUM(a.[SLN PBL DISCOUNT CASH]) AS [SLN PBL DISCOUNT CASH],
--SUM(a.[SLN UDL DISCOUNT CR]) AS [SLN UDL DISCOUNT CR],
--SUM(a.[SLN PBL DISCOUNT CR]) AS [SLN PBL DISCOUNT CR]
(SUM(a.[GROSS SALE CASH]) -SUM(a.[GROSS UDL DISCOUNT CASH]) - SUM(a.[GROSS PBL DISCOUNT CASH])) AS [CASH SALE],
(SUM(a.[GROSS SALE CR]) - SUM(a.[GROSS UDL DISCOUNT CR]) - SUM(a.[GROSS PBL DISCOUNT CR])) AS [CREDIT SALE],
(SUM(a.[SLN CASH]) - SUM(a.[SLN UDL DISCOUNT CASH]) - SUM(a.[SLN PBL DISCOUNT CASH])) AS [CASH S.RTN],
(SUM(a.[SLN CR]) - SUM(a.[SLN UDL DISCOUNT CR]) - SUM(a.[SLN PBL DISCOUNT CR])) AS [CREDIT S.RTN],
((SUM(a.[GROSS SALE CASH]) - SUM(a.[GROSS UDL DISCOUNT CASH]) - SUM(a.[GROSS PBL DISCOUNT CASH])) + (SUM(a.[GROSS SALE CR]) - SUM(a.[GROSS UDL DISCOUNT CR]) - SUM(a.[GROSS PBL DISCOUNT CR])) -
(SUM(a.[SLN CASH]) - SUM(a.[SLN UDL DISCOUNT CASH]) - SUM(a.[SLN PBL DISCOUNT CASH])) - (SUM(a.[SLN CR]) - SUM(a.[SLN UDL DISCOUNT CR]) - SUM(a.[SLN PBL DISCOUNT CR]))) 
AS [NET SALE],
SUM((a.[GROSS UDL DISCOUNT CASH])) + SUM(a.[GROSS UDL DISCOUNT CR]) - SUM(a.[SLN UDL DISCOUNT CASH]) - SUM(a.[SLN UDL DISCOUNT CR]) AS [UDL DISCOUNT],
SUM(a.[GROSS PBL DISCOUNT CASH]) + SUM(a.[GROSS PBL DISCOUNT CR]) - SUM(a.[SLN PBL DISCOUNT CASH]) - SUM(a.[SLN PBL DISCOUNT CR]) AS [PBL DISCOUNT],
SUM(a.[GROSS SALE CASH]) + SUM(a.[GROSS SALE CR]) - SUM(a.[SLN CASH]) - SUM(a.[SLN CR]) AS [DSP NET SALE]
FROM

(
      SELECT
            usso.LocationId,
            usso.PrincipalBusinessLineId,
            usso.IsCash,
            CASE 
                 WHEN usso.IsCash = 1 THEN usso.TotalTP
                 ELSE 0
            END AS [Gross Sale Cash],
            CASE 
                 WHEN usso.IsCash = 1 THEN 0
                 ELSE usso.TotalTP
            END AS [Gross Sale Cr],
            (
                CASE 
                     WHEN usso.IsCash = 1 THEN ISNULL(disc.[UDL Discount],0)
                     ELSE 0
                END
            ) AS [Gross UDL Discount Cash],
			(
				CASE 
					 WHEN usso.IsCash = 1 THEN ISNULL(disc.[PBL Discount],0)
					 ELSE 0
				END
			) AS [Gross PBL Discount Cash],
			(
				CASE 
					 WHEN usso.IsCash = 1 THEN 0
					 ELSE ISNULL(disc.[UDL Discount],0)
				END
			) AS [Gross UDL Discount Cr],
			(
				CASE 
					 WHEN usso.IsCash = 1 THEN 0
					 ELSE ISNULL(disc.[PBL Discount],0)
				END
			) AS [Gross PBL Discount Cr], 
            0 AS [SLN Cash],
            0 AS [SLN Cr], 
            0 AS [SLN UDL Discount Cash], 
            0 AS [SLN PBL Discount Cash],
            0 AS [SLN UDL Discount Cr],
            0 AS [SLN PBL Discount Cr] 
      FROM 
      (
		SELECT usso.LocationId, usso.PrincipalBusinessLineId, usso.IsCash, SUM([TotalTP]) [TotalTP]
		FROM #TempSO usso
		GROUP BY usso.LocationId, usso.PrincipalBusinessLineId, usso.IsCash
      ) usso
      LEFT JOIN 
      (
		SELECT usso.LocationId,
		s.PrincipalBusinessLineId,
		usso.IsCash,
		ISNULL(SUM(sos.Discount * ((100 - s.UDLPercentage) / 100)), 0) [PBL Discount],
		ISNULL(SUM(sos.Discount * (s.UDLPercentage / 100)), 0) [UDL Discount]

		FROM
		(
			SELECT DISTINCT usso.LocationId, usso.SaleOrderId, usso.IsCash
			FROM #TempSO usso
		) usso
		INNER JOIN SaleOrderScheme sos ON sos.LocationId = usso.LocationId
		AND sos.SaleOrderId = usso.SaleOrderId
		INNER JOIN [Scheme] s ON s.SchemeId = sos.SchemeId 
		WHERE sos.EndDate IS NULL
		AND s.IsDiscountBased = 1
		GROUP BY usso.LocationId, s.PrincipalBusinessLineId, usso.IsCash
      ) disc ON disc.LocationId = usso.LocationId
       AND disc.PrincipalBusinessLineId = usso.PrincipalBusinessLineId
       AND disc.IsCash = usso.IsCash
      
      

UNION ALL

      SELECT 
            sln.LocationId,
            sln.PrincipalBusinessLineId,
            sln.IsCash,
            0 AS [Gross Sale Cash],
            0 AS  [Gross Sale Cr],
            0 AS [Gross UDL Discount Cash],
            0 AS [Gross PBL Discount Cash],
            0 AS [Gross UDL Discount Cr],
            0 AS [Gross PBL Discount Cr],  
            (case when sln.IsCash = 1 then SUM(sln.TotalTP) else 0 end) AS [SLN Cash],
            (case when sln.IsCash = 1 then 0 else SUM(sln.TotalTP) end) AS [SLN Cr], 
            (case when sln.IsCash = 1 then SUM(sln.DiscountUDLPart) else 0 end) AS [SLN UDL Discount Cash], 
            (case when sln.IsCash = 1 then SUM(sln.DiscountPrincipalPart) else 0 end) AS [SLN PBL Discount Cash],
            (case when sln.IsCash = 1 then 0 else SUM(sln.DiscountUDLPart) end) AS [SLN UDL Discount Cr],
            (case when sln.IsCash = 1 then 0 else SUM(sln.DiscountPrincipalPart) end) AS [SLN PBL Discount Cr] 
      FROM 
      (
      	SELECT sln.LocationId, sln.SLNId, sln.PrincipalBusinessLineId, sln.IsCash, isnull(sln.DiscountUDLPart,0) AS DiscountUDLPart, 
      	isnull(sln.DiscountPrincipalPart,0) AS DiscountPrincipalPart, SUM(sln.Quantity * pc.TP) TotalTP
      	FROM uv_Sales_SLN sln
		INNER JOIN PriceCatalog pc ON pc.PriceCatalogId = sln.PriceId
		INNER JOIN   DBO.Split(@PBLIds, ',') PBL ON  (PBL.Data = sln.PrincipalBusinessLineId OR @PBLIds = '')
		INNER JOIN   DBO.Split(@LocationIds, ',') Location ON  (Location.Data = sln.LocationId OR @LocationIds = '')

		WHERE sln.CompanyId = @CompanyIds
		AND (@SelectAll = 0 
			OR ( @SelectAll = 1 AND DATEDIFF(DAY,sln.TransactionDate,@FromDate)=0) 
			OR ( @SelectAll = 2 AND DATEDIFF(DAY,sln.TransactionDate,@FromDate)<=0 AND DATEDIFF(DAY,sln.TransactionDate,@ToDate)>=0))
      	GROUP BY sln.LocationId, sln.SLNId, sln.PrincipalBusinessLineId, sln.IsCash, sln.DiscountUDLPart, 
      	sln.DiscountPrincipalPart			
      ) sln
      GROUP BY sln.IsCash,sln.PrincipalBusinessLineId,sln.LocationId

) a
INNER JOIN Location l ON A.LocationId = l.LocationId
INNER JOIN uv_PrincipalBusinessLine_All upbla ON a.PrincipalBusinessLineId = upbla.PrincipalBusinessLineId
GROUP BY l.SequenceId,
	a.[LocationId],
	l.ShortName,
	upbla.PBLSequenceId,
	a.PrincipalBusinessLineId,
	upbla.[Name] 

ORDER BY l.SequenceId, upbla.PBLSequenceId

DROP TABLE #TempSO
 GO 
DECLARE @CompanyIds varchar(100),
	@PBLIds varchar(100), @LocationIds varchar(100),@ProductIds VARCHAR(500),
	@IsCash bit,
	@IsCredit bit,
	@IsTP bit,
	@SaleCriteria int,
	@SelectAll int,
	@FromDate datetime,
	@ToDate datetime      
 
SET @CompanyIds = '1'
SET @PBLIds = '3'
SET @LocationIds ='11'
SET @ProductIds = '172'

SET @SaleCriteria = 2
SET @SelectAll=2
SET @FromDate = '2014/04/04'
SET @ToDate = '2014/04/15'
SET @IsTP = 1


/*
Sale Criteria 
0-Gross Sale --Only Value
1-Net Sale -- Value-SLN
2-SLN--Only SLN
*/

SELECT 
	[A].CompanyId,
	l.SequenceId AS [LocSeq],	
	l.ShortName AS [Location Name],
	UPBLA.PBLSequenceId,
	upbla.PrincipalBusinessLineId,
	upbla.Name AS [PBL Name],	
	up.ProductSequence ,
	up.ProductId,
	up.Name AS [Product Name],
	--MAX(l.MaxDate) AS [Date],
	CASE WHEN @SaleCriteria=0 THEN sum(A.GrossQuantity)
		 WHEN @SaleCriteria=1 THEN sum(A.GrossQuantity)-SUM(A.SLN)
		 WHEN @SaleCriteria=2 THEN sum(A.SLN)
	END 
	AS [Sale Qty],	
	(CASE WHEN @SaleCriteria=0 THEN sum(A.GrossQuantity * A.Price)
		 WHEN @SaleCriteria=1 THEN sum(A.GrossQuantity * A.Price)-SUM(A.SLN*A.Price)
		 WHEN @SaleCriteria=2 THEN sum(A.SLN * A.Price)
	END 
	)
	AS [Sale Amount]	
FROM   uv_Product up
LEFT OUTER  JOIN   
( 
		SELECT 
		des.CompanyId, 	
		des.LocationId, 			
		des.ProductId,
		CASE WHEN @ISTP=1 THEN (pc.TP) ELSE (PC.PP) END Price,
		SUM
		(
			 isnull(des.BookedLocalCash,0) + isnull(des.BookedOSCash,0) + isnull(des.Shop,0)+ isnull(des.SpotLocal,0)+ isnull(des.SpotOS,0) 
			+ isnull(des.BookedLocalCredit,0)+isnull(des.BookedOSCredit,0) 
		) AS [GrossQuantity], 					
		SUM(isnull((des.SLNCash),0)  + isnull((des.SLNCredit),0) ) AS [SLN]					
		FROM uv_DayEndSale des				
		INNER JOIN PriceCatalog pc ON pc.PriceCatalogId=des.PriceId	
		INNER JOIN   DBO.Split(@CompanyIds, ',') Company ON  (Company.Data = des.companyId OR @CompanyIds = '')
		INNER JOIN   DBO.Split(@LocationIds, ',') Location ON  (Location.Data = des.LocationId OR @LocationIds = '')		
		WHERE		
		 (
			   @SelectAll = 0
			   OR  (
					   @SelectAll = 1
				  AND  (
						   DATEDIFF(DAY,des.[Date],  @FromDate) >= 0
					   )
				   )
			   OR  (
					   @SelectAll = 2
				  AND  (
						   DATEDIFF(DAY,des.[Date],  @FromDate) <= 0
					  AND  DATEDIFF(DAY,des.[Date],  @ToDate) >= 0
					   )
				   )
			 
		 )
		GROUP BY des.CompanyId, 	
		des.LocationId, 			
		des.ProductId,
		CASE WHEN @ISTP=1 THEN (pc.TP) ELSE (PC.PP) END
) AS [A] ON [A].ProductId = up.ProductId
INNER JOIN   DBO.Split(@PBLIds, ',') PBL ON  (PBL.Data = up.PrincipalBusinessLineId OR @PBLIds = '')
INNER JOIN   DBO.Split(@ProductIds, ',') P ON  (P.Data = up.ProductId OR @ProductIds = '')
INNER JOIN uv_PrincipalBusinessLine_All upbla ON upbla.PrincipalBusinessLineId=up.PrincipalBusinessLineId
INNER JOIN (
				SELECT l1.SequenceId,l1.LocationId, l1.ShortName, max (des2.Date) AS MaxDate
				FROM Location l1
				INNER JOIN uv_DayEndSale des2 ON des2.LocationId = l1.LocationId
				WHERE DATEDIFF(DAY, des2.[Date],  @ToDate) >= 0
				GROUP BY l1.SequenceId,l1.LocationId, l1.ShortName
			)l 
ON l.LocationId = [A].LocationId
		
WHERE [A].LocationId IS NOT NULL

GROUP BY
	[A].CompanyId,
	l.SequenceId,	
	l.ShortName,
	UPBLA.PBLSequenceId,
	upbla.PrincipalBusinessLineId,
	upbla.Name,	
	up.ProductSequence ,
	up.ProductId,
	up.Name
	
ORDER BY 
l.SequenceId,
UPBLA.PBLSequenceId,
up.ProductSequence


 GO 
usp_report_DSP
dbo.fn_MonthEnd_Get_ClosingDSP
fn_MonthEnd_Get_DSPByDateRange
 GO 
DECLARE @COMPANYID INT = 1
		,@LOCATIONID INT = 11
		,@SNDID INT = 5
		
--SELECT	@CompanyId,@LocationId,@SNDID,
--		ISNULL(sum(sd.CustomerAdvanceAdjusted),0) * -1,
--		ISNULL(sum(sd.OutstationAdvanceAdjusted),0) *-1,
--		ISNULL(sum(sd.SLNAdjusted),0),
--		ISNULL(sum(sd.CustomerCNAdjusted),0),
--		ISNULL(sum(sd.WHTDeducted ),0),
--		ISNULL(sum(sd.InterBranchCollectionAdjusted ),0) * -1
--FROM snd s 
--		INNER JOIN SnDCollection sd ON sd.LocationId = s.LocationId AND sd.SnDId = s.SnDId
--WHERE	s.CompanyId=@CompanyId  AND s.LocationId=@LocationId AND s.SnDId < @SNDID    AND s.RollbackDate IS null		
--GROUP BY s.CompanyId,s.LocationId,s.SnDId

--SELECT	@CompanyId,@LocationId,@SNDID,	
--		sum(ISNULL(cc.CustomerAdvanceAdjusted,0))  * -1
--		,sum(ISNULL(cc.OSAdvanceAdjusted,0))  * -1
--		,sum(ISNULL(cc.SLNAdjusted,0))
--		,sum(ISNULL(cc.CreditNoteAdjusted,0))
--		,sum(ISNULL(cc.WHTAdjusted,0))
--		,sum(ISNULL(cc.InterBranchCollectionAmount,0)) * -1
--FROM	CreditCollection cc 
--		INNER JOIN SnDCreditCollection scc ON scc.LocationId=cc.LocationId AND scc.CreditCollectionId=cc.CreditCollectionId
--		INNER JOIN snd s ON s.LocationId = scc.LocationId AND s.SnDId = scc.SnDId
--WHERE	s.CompanyId=@CompanyId  AND s.LocationId=@LocationId AND s.SnDId < @SNDID  AND s.RollbackDate IS null
--GROUP BY s.CompanyId,s.LocationId,s.SnDId

SELECT	@CompanyId,@LocationId,@SNDID,	
		 0 --AdvanceAdjusted
		,0 --OSAdvanceAdjusted
		,0 --SLN Adjusted
		,0 --CN Adjusted
		,0 --WHTAdjusted
		,sum(ISNULL(ibc.TotalAmount,0))  --InterBranchCollectionAmount
FROM InterBranchCollection ibc
INNER JOIN SnDInterBranchCollection sibc ON sibc.LocationId = ibc.LocationId AND sibc.InterBranchCollectionId = ibc.InterBranchCollectionId
INNER JOIN snd s ON s.LocationId = sibc.LocationId AND s.SnDId = sibc.SnDId AND s.CompanyId=ibc.CompanyId
WHERE s.CompanyId=@CompanyId AND s.LocationId=@LocationId AND s.SnDId<@SNDID AND s.RollbackDate IS NULL





--SELECT SNDID 
--FROM SnD 
--WHERE SND.LOCATIONID = 11 AND SND.SNDNUMBER = 2

 GO 
SELECT * FROM sndInterBranchCollection sibc
SELECT * FROM InterBranchCollection ibc



SELECT * FROM INFORMATION_SCHEMA.columns 
WHERE column_name LIKE '%open%bal%'--'%inter%Branch%coll%'
	OR TABLE_NAME LIKE '%open%bal%'--'%inter%Branch%coll%'


--SELECT * FROM CreditCollectionInterBranch
SELECT * FROM sndcollection


SELECT * FROM sndremittance
 GO 
SELECT DISTINCT usso.SalePassDate,Count(usso.CustomerId)
  FROM uv_Sales_SaleOrder usso WHERE usso.LocationId = 11 AND usso.BookerId = 1 AND usso.PrincipalBusinessLineId = 3  AND DATEDIFF(DAY, usso.SalePassDate ,  '04/06/2014') <= 0 AND datediff (day,usso.SalePassDate , '04/06/2014') >= 0

GROUP BY usso.SalePassDate
  
  
 GO 



--EXEC usp_Report_SND 5,64,45
--CREATED BY : RIZWAN AHMED KHAN
--DATE       : 16 FEB, 2013
--PURPOSE    : GENERATE SND MAIN REPORT.

--CREATE PROC [dbo].usp_Report_SND @CompanyId int, @LocationId int,@SNDID int AS

DECLARE @CompanyId INT = 1, @LocationId INT = 11,@SNDID INT = 4 

SET @CompanyId = 1--@CompanyId
SET @LocationId = 11--@LocationId
SET @SNDID = 7--@SNDID
--Declaration for Adjustment
--drop table #TempCollectionReceipt

DECLARE
	@Cash					numeric(15,2),
	@Vault					numeric(15,2),
	@Cheque					numeric(15,2),
	@DD_PO					numeric(15,2),
	@TC 					numeric(15,2),
	@RS 					numeric(15,2),
	@DS_HO					numeric(15,2),
	@OtherDocument			numeric(15,2),
	@BalanceDeposited		numeric(15,2),
	@BankBalance			numeric(15,2),
	@TransferBankDOC		numeric(15,2),
	@RertunDocument			numeric(15,2),
	@BankChanrges			numeric(15,2),
	@Customer_ADJ			numeric(15,2),
	@OS_ADV_ADJ				numeric(15,2),
	@SLN_ADJ				numeric(15,2),
	@CN_ADJ					numeric(15,2),
	@WHT_ADJ				numeric(15,2),
	@IBC_ADJ				numeric(15,2),
	@SHORTAGE				numeric(15,2),
	@ROUNDOFF				numeric(15,2),
	@DS_BR					numeric(15,2),
	@ShortageCollection		numeric(15,2),
	@FromDate				datetime,
	@ToDate					datetime,
	
	--Remittance related variable
	@Remittance_OB						numeric(15,2),
	@Remittance_CollAccChqDishonoured	numeric(15,2),
	@Remittance_CollAccChqRedeposited	numeric(15,2),
	@Remittance_CashInHandDepInHOAcc	numeric(15,2),
	@Remittance_HOC						numeric(15,2),
	@Remittance_TC						numeric(15,2),
	@Remittance_DD_PO					numeric(15,2),
	@Remittance_CASH_DD					numeric(15,2),
	@Remittance_BANK_DD					numeric(15,2),
	@Remittance_OtherDocument			numeric(15,2),
	@Remittance_CollAccChqDepInHOAcc	numeric(15,2),
	@Remittance_TTFromCollAcc			numeric(15,2),
	@Remittance_DirectRemToHODS			numeric(15,2),
	@Remittance_DirectRemToHORS			numeric(15,2),
	@Remittance_TOTALREMITTEDTODAY		numeric(15,2),
	@Remittance_CF						numeric(15,2)
	

SELECT	@FromDate=s.FromDate, 
		@ToDate=s.ToDate 
FROM	SnD s
WHERE	s.CompanyId=@CompanyId and s.LocationId=@LocationID AND s.SnDId=@SNDID



SELECT c.Name AS CompanyName,l.ShortName AS LocationName,s.SnDNumber,s.FromDate,s.ToDate 
FROM snd s 
INNER JOIN Company c ON c.CompanyId = s.CompanyId
INNER JOIN Location l ON s.LocationId=l.LocationId
WHERE	s.CompanyId=@CompanyId and s.LocationId=@LocationID AND s.SnDId=@SNDID


--Create table for SND Reconciliation data
CREATE TABLE #SnDReconciliation (GroupID numeric(5,0),GroupDescription Varchar(50),SortID numeric(5,0),SourceReceipt Varchar(100),CompanyID numeric(9,0),LocationID numeric(9,0),SNDID numeric(9,0),
								Cash numeric(15,2),Cheque numeric(15,2),Vault numeric(15,2),DD_PO numeric(15,2),TC numeric(15,2),OtherDocument numeric(15,2)
								,BalanceDeposited numeric(15,2),BankBalance numeric(15,2),TotalBankBalance numeric(15,2),
								ReturnDocument numeric(15,2),BankCharges numeric(15,2),Shortage numeric(15,2),DirectlyRemitted numeric(15,2),
								Customer_ADJ numeric(15,2), OS_ADV_ADJ numeric(15,2), SLN_ADJ numeric(15,2), CN_ADJ numeric(15,2),
								WHT_ADJ numeric(15,2), IBC_ADJ numeric(15,2), ROUNDOFF numeric(15,2), TOTALREMITTABEBALANCE numeric(15,2))

--Create table for SND Remittance data
CREATE TABLE #SnDRemittance    (SortID numeric(5,0),SourceReceipt Varchar(100),CompanyID numeric(9,0),LocationID numeric(9,0),SNDID numeric(9,0),
								TotalAmount numeric(15,2))


----------------------------------------------------------------------------------------------------------------------------------------
-- BEGIN - SND COLLECTION
----------------------------------------------------------------------------------------------------------------------------------------

CREATE TABLE #TempSnDCollection (CompanyID numeric(9,0),LocationID numeric(9,0),SNDID numeric(9,0),SnDNumber numeric(9,0),SortID numeric(5,0),SourceReceipt Varchar(100),
								Cash numeric(15,2),Cheque numeric(15,2),DD_PO numeric(15,2),TC numeric(15,2)
								,RS numeric(15,2),DS_HO numeric(15,2),DS_BR numeric(15,2),OtherDocument  numeric(15,2),
								Customer_ADJ numeric(15,2), OS_ADV_ADJ numeric(15,2), SLN_ADJ numeric(15,2), CN_ADJ numeric(15,2),
								WHT_ADJ numeric(15,2), IBC_ADJ numeric(15,2),Shortage numeric(15,2), ROUNDOFF numeric(15,2), SUBTOTAL numeric(15,2), ALREADYINREMITTABLE numeric(15,2), ADDEDTOREMITTABLE numeric(15,2))

INSERT INTO #TempSnDCollection
exec usp_Report_SNDCollection @CompanyId,@LocationId,@SnDId
SELECT * FROM #TempSnDCollection

----------------------------------------------------------------------------------------------------------------------------------------
-- END - SND COLLECTION
----------------------------------------------------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------------------------------------------------
-- BEGIN - SND BANK BALANCE
----------------------------------------------------------------------------------------------------------------------------------------

CREATE TABLE #TempBankBalance (BankAccountID int, ShortName VarChar(75), OB int, BalanceDeposited numeric(15,4),BankBalance numeric(15,4))
INSERT INTO #TempBankBalance
exec usp_Report_SND_BankBalance @CompanyId,@LocationId,@SnDId

SELECT BankAccountID,ShortName,isnull(sum(isnull(BalanceDeposited,0)) ,0) AS BalanceDeposited
								,isnull(sum(isnull(BankBalance,0)) ,0) AS BankBalance
FROM #TempBankBalance
GROUP BY BankAccountID,ShortName
---------------------------------------------------------------------------------------------------------------------------------------
-- END - SND BANK BALANCE
----------------------------------------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------------------------------------
-- BEGIN - SND RECONCILLIATION OPENING BALANCE
----------------------------------------------------------------------------------------------------------------------------------------

CREATE TABLE #TempSnDOpeningBalance (CompanyID numeric(9,0),LocationID numeric(9,0),SNDID numeric(9,0),
								Cash numeric(15,2),Cheque numeric(15,2),Vault numeric(15,2),DD_PO numeric(15,2),TC numeric(15,2),OtherDocument numeric(15,2)
								,BalanceDeposited numeric(15,2),BankBalance numeric(15,2),TotalBankBalance numeric(15,2),
								ReturnDocument numeric(15,2),BankCharges numeric(15,2),Shortage numeric(15,2),DirectlyRemitted numeric(15,2),
								Customer_ADJ numeric(15,2), OS_ADV_ADJ numeric(15,2), SLN_ADJ numeric(15,2), CN_ADJ numeric(15,2),
								WHT_ADJ numeric(15,2), IBC_ADJ numeric(15,2), ROUNDOFF numeric(15,2))
INSERT INTO #TempSnDOpeningBalance
exec usp_Report_SNDOpeningBalance @CompanyId,@LocationId,@SnDId

-- Bank Balance Updates

UPDATE #TempSnDOpeningBalance SET BalanceDeposited =	(SELECT isnull(sum(isnull(BalanceDeposited,0)),0) FROM #TempBankBalance WHERE OB=1)
UPDATE #TempSnDOpeningBalance SET BankBalance =			(SELECT isnull(sum(isnull(BankBalance,0)),0) FROM #TempBankBalance WHERE OB=1)

--Reconciliation OPENING BALANCE
----------------------------------------------------------------------------------------------------------------------------------------
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,Cash,Cheque,Vault,DD_PO,TC,OtherDocument
								,BalanceDeposited,BankBalance,TotalBankBalance,ReturnDocument,BankCharges,Shortage,DirectlyRemitted,Customer_ADJ
								,OS_ADV_ADJ,SLN_ADJ,CN_ADJ,WHT_ADJ,IBC_ADJ,ROUNDOFF)	
SELECT		1 AS  GroupID, 'OPENING BALANCE' AS  GroupDescription,1 AS SortID,'OPENING BALANCE' AS SourceReceipt,
			CompanyID,LocationID,SNDID,Cash,Cheque,Vault,DD_PO,TC,OtherDocument,BalanceDeposited,BankBalance,TotalBankBalance = 0--BalanceDeposited + BankBalance
			,ReturnDocument,BankCharges,Shortage,DirectlyRemitted,Customer_ADJ,OS_ADV_ADJ,SLN_ADJ,CN_ADJ,WHT_ADJ,IBC_ADJ,ROUNDOFF
FROM #TempSnDOpeningBalance tsdb
----------------------------------------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------------------------------------
-- END - SND RECONCILLIATION OPENING BALANCE
----------------------------------------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------------------------------------
-- BEGIN - SND RECONCILLIATION 
----------------------------------------------------------------------------------------------------------------------------------------

---GET RECONCILIATION DATA
----------------------------------------------------------------------------------------------------------------------------------------
SELECT	 @CASH			=	ISNULL(sum(isnull(Cash,0)),0)
		,@CHEQUE		=	ISNULL(sum(isnull(Cheque,0)),0)
		,@DD_PO			=	ISNULL(sum(isnull(DD_PO,0)),0)
		,@TC			=	ISNULL(sum(isnull(TC,0)),0)
		,@OtherDocument	=	ISNULL(sum(isnull(OtherDocument,0)),0)
		,@Shortage		=	ISNULL(sum(isnull(Shortage,0)),0) --+ ISNULL(sum(isnull(ROUNDOFF,0)),0)
		,@RS			=	ISNULL(sum(isnull(RS,0)),0)
		,@DS_HO			=	ISNULL(sum(isnull(DS_HO,0)),0)
		,@DS_BR			=	ISNULL(sum(isnull(DS_BR,0)),0)
		,@Remittance_DirectRemToHODS	=	ISNULL(sum(isnull(DS_HO,0)),0)
		,@Remittance_DirectRemToHORS	=	ISNULL(sum(isnull(RS,0)),0)
FROM	#TempSnDCollection tsd

--GET REMITTANCE DATA
SELECT	@Remittance_OB						= sr.OpeningBalance
		,@Remittance_TTFromCollAcc			= sr.TotalCollectionAccountRemittance
		,@Remittance_DD_PO					= sr.TotalBankDD + sr.TotalCashDD
		,@Remittance_CASH_DD				= sr.TotalCashDD
		,@Remittance_BANK_DD				= sr.TotalBankDD 
		,@Remittance_CollAccChqDishonoured	= sr.TotalCollectionAccountReturned
		,@Remittance_CollAccChqRedeposited	= sr.TotalCollectionAccountRedeposited 

FROM	snd s 
		INNER JOIN SnDRemittance sr ON sr.LocationId = s.LocationId AND sr.SnDId = s.SnDId
WHERE	s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL


--GET OTHER REMITTANCE DATA
SELECT	 @Remittance_DD_PO			= @Remittance_DD_PO + isnull(sum(isnull(DD_PO,0)),0)
		,@Remittance_TC				= isnull(sum(isnull(TC,0)),0)
		,@Remittance_OtherDocument	= isnull(sum(isnull(OtherDocument,0)),0)
		
from	(
		SELECT	DD_PO = (CASE WHEN pm.TypeCode IN ('DD','PO') THEN isnull(sum(isnull(PT.Amount,0)),0) ELSE 0 END)
				,TC = (CASE WHEN pm.TypeCode='TC' THEN isnull(sum(isnull(PT.Amount,0)),0) ELSE 0 END)
				,OtherDocument = (CASE WHEN pm.TypeCode NOT IN ('DD','PO','TC','RS') THEN isnull(sum(isnull(PT.Amount,0)),0) ELSE 0 END)
				
		FROM snd s 
		INNER JOIN SnDRemittanceOtherDoc ROD ON s.LocationId=ROD.LocationId AND s.SnDId=ROD.SnDId
		INNER JOIN PaymentTransaction pt ON pt.LocationId = ROD.LocationId AND pt.PaymentTransactionId = ROD.PaymentTransactionId
		INNER JOIN PaymentMode pm ON pt.PaymentModeId=pm.PaymentModeId
		WHERE s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL
		GROUP BY pm.TypeCode
		) tmp



----------------------------------------------------------------------------------------------------------------------------------------
--ADDITION-1: RECEIVED TODAY / DIRECT REMITTED
----------------------------------------------------------------------------------------------------------------------------------------

--ADD: RECEIVED TODAY / DIRECT REMITTED
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID
			,Cash,Cheque,DD_PO,TC,OtherDocument,DirectlyRemitted,BankBalance)
(
SELECT	2 AS  GroupID, 'ADDITION' AS  GroupDescription,1 AS SortID,'ADD: RECEIVED TODAY / DIRECT REMITTED' AS SourceReceipt,@CompanyID,@LocationID,@SNDID
		,@CASH,@CHEQUE,@DD_PO,@TC,@OtherDocument,@RS+@DS_HO,@DS_BR
)		



----------------------------------------------------------------------------------------------------------------------------------------
--ADDITION-2: DEPOSITED IN BANK
----------------------------------------------------------------------------------------------------------------------------------------
--		CASH Deposit in Collection A/C

SELECT	@Cash = sum(cash)
		,@Vault = sum(Vault)
FROM
(
SELECT	Cash=(CASE WHEN scd.VaultCompanyId IS NULL then isnull(sum(isnull(DepositAmount ,0)),0) ELSE 0 END),
		Vault=(CASE WHEN scd.VaultCompanyId IS not NULL then isnull(sum(isnull(DepositAmount ,0)),0) ELSE 0 END)
		
FROM	SnD s 
		LEFT Outer JOIN SnDCashDepositBank scd ON s.LocationId = scd.LocationId AND s.SnDId = scd.SnDId
		LEFT Outer JOIN PaymentTransaction pt ON scd.LocationId=pt.LocationId AND scd.PaymentTransactionId=pt.PaymentTransactionId  
		LEFT Outer JOIN BankAccount ba ON  pt.SystemBankAccountId=ba.BankAccountId 
WHERE	s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL AND ba.AccountType='BR'
GROUP BY s.CompanyId,s.LocationId,s.SnDId,scd.VaultCompanyId
) tmp
--ADD: CASH DEPOSITED IN BANK
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,BankBalance)
(
SELECT	2 AS  GroupID, 'ADDITION' AS  GroupDescription,2 AS SortID,'ADD: DEPOSITED IN BANK' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@Cash+@Vault
)
--LESS: DEPOSITED IN COLLECTION A/C
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,Cash,Vault)
(
SELECT	3 AS  GroupID, 'DEDUCTION' AS  GroupDescription,1 AS SortID,'LESS: DEPOSITED IN COLLECTION A/C' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@Cash,@Vault
)





--		DOC Deposit in bank but not credited



SELECT	@Cheque=isnull(sum(isnull(Cheque,0)),0)
		,@DD_PO=isnull(sum(isnull(DD_PO,0)),0)
		,@TC=isnull(sum(isnull(TC,0)),0)
		,@OtherDocument=isnull(sum(isnull(OtherDocument,0)),0)
		,@TransferBankDOC=isnull(sum(isnull(TransferBankDOC,0)),0)
from	(
		SELECT	Cheque = (CASE WHEN sbd.Type='D' AND pm.TypeCode='CHQ' THEN isnull(sum(isnull(sbd.Amount,0)),0) ELSE 0 END)
				,DD_PO = (CASE WHEN sbd.Type='D' AND pm.TypeCode IN ('DD','PO') THEN isnull(sum(isnull(sbd.Amount,0)),0) ELSE 0 END)
				,TC = (CASE WHEN sbd.Type='D' AND pm.TypeCode='TC' THEN isnull(sum(isnull(sbd.Amount,0)),0) ELSE 0 END)
				,OtherDocument = (CASE WHEN sbd.Type='D' AND pm.TypeCode NOT IN ('CHQ','CASH','DD','PO','TC') THEN isnull(sum(isnull(sbd.Amount,0)),0) ELSE 0 END)
				,TransferBankDOC = (CASE WHEN sbd.Type='T' THEN isnull(sum(isnull(sbd.Amount,0)),0) ELSE 0 END)
		FROM snd s 
		LEFT Outer  JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.DepositedSnDId
		LEFT Outer  JOIN PaymentTransaction pt ON pt.LocationId = sbd.LocationId AND pt.PaymentTransactionId = sbd.PaymentTransactionId
		LEFT Outer  JOIN PaymentMode pm ON pt.PaymentModeId=pm.PaymentModeId
		WHERE sbd.Type IN ('D','T') AND pm.IsToBeDeposited=1 
		AND s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL
		GROUP BY pm.TypeCode,sbd.Type
		) tmp
--ADD: DOC DEPOSITED IN BANK
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,BalanceDeposited)
(
SELECT	2 AS  GroupID, 'ADDITION' AS  GroupDescription,2 AS SortID,'ADD: DEPOSITED IN BANK' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@Cheque+@DD_PO+@TC+@OtherDocument+@TransferBankDOC
)
--LESS: DOC DEPOSITED IN COLLECTION A/C
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,Cheque,DD_PO,TC,OtherDocument,BankBalance)
(
SELECT	3 AS  GroupID, 'DEDUCTION' AS  GroupDescription,1 AS SortID,'LESS: DEPOSITED IN COLLECTION A/C' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@Cheque,@DD_PO,@TC,@OtherDocument,@TransferBankDOC
)
----------------------------------------------------------------------------------------------------------------------------------------
--ADD: RETURNED CHQ. REDEPOSITED
----------------------------------------------------------------------------------------------------------------------------------------
SELECT	@Cheque=isnull(sum(isnull(Cheque,0)),0)
		,@DD_PO=isnull(sum(isnull(DD_PO,0)),0)
		,@TC=isnull(sum(isnull(TC,0)),0)
		,@OtherDocument=isnull(sum(isnull(OtherDocument,0)),0)
		,@TransferBankDOC=isnull(sum(isnull(TransferBankDOC,0)),0)
from	(
		SELECT	Cheque = (CASE WHEN sbd.Type='D' AND pm.TypeCode='CHQ' THEN isnull(sum(isnull(sbd.Amount,0)),0) ELSE 0 END)
				,DD_PO = (CASE WHEN sbd.Type='D' AND pm.TypeCode IN ('DD','PO') THEN isnull(sum(isnull(sbd.Amount,0)),0) ELSE 0 END)
				,TC = (CASE WHEN sbd.Type='D' AND pm.TypeCode='TC' THEN isnull(sum(isnull(sbd.Amount,0)),0) ELSE 0 END)
				,OtherDocument = (CASE WHEN sbd.Type='D' AND pm.TypeCode NOT IN ('CHQ','CASH','DD','PO','TC','DS') THEN isnull(sum(isnull(sbd.Amount,0)),0) ELSE 0 END)
				,TransferBankDOC = (CASE WHEN sbd.Type='T' THEN isnull(sum(isnull(sbd.Amount,0)),0) ELSE 0 END)
		FROM snd s 
		LEFT Outer  JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.DepositedSnDId
		LEFT Outer  JOIN PaymentTransaction pt ON pt.LocationId = sbd.LocationId AND pt.PaymentTransactionId = sbd.PaymentTransactionId
		LEFT Outer  JOIN PaymentMode pm ON pt.PaymentModeId=pm.PaymentModeId
		WHERE sbd.Type IN ('D','T') AND pm.IsToBeDeposited=1 
		AND s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND sbd.LastSettlementSnDId=@SNDID AND s.RollbackDate IS NULL
		--All Redeposit Doc
		AND EXISTS (SELECT sbd2.SnDBankDocMovementId FROM SnDBankDocMovement sbd2 
						WHERE sbd2.PaymentTransactionId=sbd.PaymentTransactionId
						AND sbd2.DepositedSnDId=sbd.LastSettlementSnDId)
		GROUP BY pm.TypeCode,sbd.Type
		) tmp


INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,Cheque,DD_PO,TC,OtherDocument,BankBalance)
(
SELECT	2 AS  GroupID, 'ADDITION' AS  GroupDescription,3 AS SortID,'ADD: RETURNED CHQ. REDEPOSITED' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@Cheque,@DD_PO,@TC,@OtherDocument,@TransferBankDOC
)

INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,BankBalance)
(
SELECT	3 AS  GroupID, 'DEDUCTION' AS  GroupDescription,10 AS SortID,'LESS: COLLECTION A/C CHEQUE REDEPOSITED' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@TransferBankDOC
)
--LESS: RETURN DOCUMENT SETTLEMENT
--INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,ReturnDocument)
--(
--SELECT	3 AS  GroupID, 'DEDUCTION' AS  GroupDescription,11 AS SortID,'LESS: DEDUCTED / ADJUSTED /CLEARED'  AS SourceReceipt
--		,@CompanyID,@LocationID,@SNDID, @Cheque + @DD_PO + @TC + @OtherDocument
--)
----------------------------------------------------------------------------------------------------------------------------------------
--ADD: CHEQUE CLEARED & REMITTABLE BY BANK
----------------------------------------------------------------------------------------------------------------------------------------
SELECT	@BankBalance = isnull(sum(isnull(sbd.Amount,0)),0)
FROM snd s 
LEFT Outer  JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.ClearedSnDId
LEFT Outer  JOIN PaymentTransaction pt ON pt.LocationId = sbd.LocationId AND pt.PaymentTransactionId = sbd.PaymentTransactionId
LEFT Outer  JOIN PaymentMode pm ON pt.PaymentModeId=pm.PaymentModeId
WHERE sbd.Type IN ('D','T') AND pm.IsToBeDeposited=1 
AND s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL

INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,BankBalance)
(
SELECT	2 AS  GroupID, 'ADDITION' AS  GroupDescription,4 AS SortID,'ADD: CHEQUE CLEARED & REMITTABLE BY BANK' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@BankBalance
)
--LESS: DOC DEPOSITED IN COLLECTION A/C
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,BalanceDeposited)
(
SELECT	3 AS  GroupID, 'DEDUCTION' AS  GroupDescription,6 AS SortID,'LESS: CHEQUE CLEARED FROM NOT CREDATED' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@BankBalance
)
----------------------------------------------------------------------------------------------------------------------------------------
--ADD: CASH DD / BANK DD PREPARED
----------------------------------------------------------------------------------------------------------------------------------------
SELECT	@Cash=(CASE WHEN scd.VaultCompanyId IS NULL then isnull(sum(isnull(SCD.Amount  ,0)),0) ELSE 0 END),
		@Vault=(CASE WHEN scd.VaultCompanyId IS not NULL then isnull(sum(isnull(SCD.Amount ,0)),0) ELSE 0 END)
FROM	SnD s 
		LEFT Outer  JOIN SnDCashDD scd ON s.LocationId = scd.LocationId AND s.SnDId = scd.SnDId
WHERE	s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL 
GROUP BY s.CompanyId,s.LocationId,s.SnDId,scd.VaultCompanyId

SELECT	@BankBalance=isnull(sum(isnull(bd.Amount  ,0)),0)
FROM	SnD s 
		LEFT Outer  JOIN SnDBankDD bd ON s.LocationId = bd.LocationId AND s.SnDId = bd.SnDId
WHERE	s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL 
GROUP BY s.CompanyId,s.LocationId,s.SnDId

--ADD: CASH DEPOSITED IN BANK
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,DD_PO)
(
SELECT	2 AS  GroupID, 'ADDITION' AS  GroupDescription,5 AS SortID,'ADD: CASH DD / BANK DD PREPARED' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@Cash+@Vault+@BankBalance
)
--LESS: DEPOSITED IN COLLECTION A/C
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,Cash,Vault,BankBalance)
(
SELECT	3 AS  GroupID, 'DEDUCTION' AS  GroupDescription,4 AS SortID,'LESS: CASH DD / BANK DD PREPARED' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@Cash,@Vault,@BankBalance
)

----------------------------------------------------------------------------------------------------------------------------------------
--ADD: COLLECTION A/C CHEQUE RETURN
----------------------------------------------------------------------------------------------------------------------------------------
SELECT	@BankBalance = isnull(sum(isnull(sbd.Amount,0)),0)
FROM snd s 
LEFT Outer  JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.ReturnedSnDId
LEFT Outer  JOIN PaymentTransaction pt ON pt.LocationId = sbd.LocationId AND pt.PaymentTransactionId = sbd.PaymentTransactionId
LEFT Outer  JOIN PaymentMode pm ON pt.PaymentModeId=pm.PaymentModeId
WHERE sbd.Type IN ('R','T') AND pm.IsToBeDeposited=1 
AND s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL

INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,BankBalance)
(
SELECT	2 AS  GroupID, 'ADDITION' AS  GroupDescription,6 AS SortID,'ADD: COLLECTION A/C CHEQUE RETURN' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@BankBalance
)
----------------------------------------------------------------------------------------------------------------------------------------
--ADD: ADDED / RECEIVED
----------------------------------------------------------------------------------------------------------------------------------------
SET @Customer_ADJ=0
SET @OS_ADV_ADJ=0
SET @WHT_ADJ=0
SET @RertunDocument=0
SET @BankChanrges=0
SET @Cash=0
SET @Vault=0


--RETURN CHQ
SELECT	@RertunDocument = isnull(sum(isnull(sbd.Amount,0)),0)
FROM snd s 
LEFT Outer  JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.ReturnedSnDId
LEFT Outer  JOIN PaymentTransaction pt ON pt.LocationId = sbd.LocationId AND pt.PaymentTransactionId = sbd.PaymentTransactionId
LEFT Outer  JOIN PaymentMode pm ON pt.PaymentModeId=pm.PaymentModeId
WHERE sbd.Type IN ('D') AND pm.IsToBeDeposited=1 
AND s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL

--Customer Advance , OS Advance  Receiving and WHT deducted
SELECT	@Customer_ADJ = isnull(sum(isnull(sc.CustomerAdvance ,0)),0)
		,@OS_ADV_ADJ = isnull(sum(isnull(sc.OutstationAdvance ,0)),0)
		,@WHT_ADJ = isnull(sum(isnull(sc.WHTDeducted,0)),0)
FROM snd s 
LEFT Outer  JOIN SnDCollection sc ON s.LocationId=sc.LocationId AND s.SnDId=sc.SnDId
WHERE s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL

--Bank Charges
SELECT	@BankChanrges = isnull(sum(isnull(bc.Amount ,0)),0)
FROM snd s 
LEFT Outer  JOIN SnDBankCharges bc ON s.LocationId=bc.LocationId AND s.SnDId=bc.SnDId
WHERE s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL


--SND Cash Reduction
SELECT	@Cash = isnull(sum(isnull(cr.ReductionAmount ,0)),0)
FROM snd s 
LEFT Outer  JOIN SnDCashReduction cr ON s.LocationId=cr.LocationId AND s.SnDId=cr.SnDId
WHERE s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL

--Cash Deposit in Vault
SELECT	@Vault = isnull(sum(isnull(cd.DepositedInVault ,0)),0)
FROM snd s 
LEFT Outer  JOIN SnDCashDetail cd ON s.LocationId=cd.LocationId AND s.SnDId=cd.SnDId
WHERE s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL


--SLN
SELECT @SLN_ADJ= isnull(sum(isnull(s.TotalNet ,0)),0) --*-1
FROM SLN s
WHERE  s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.BLMApprovalDate BETWEEN @FromDate AND @Todate AND s.totalnet>0

--CN
SELECT @CN_ADJ = isnull(sum(isnull(cn.Amount  ,0)),0) --*-1
FROM CustomerCreditNote cn
WHERE  cn.CompanyId=@CompanyId AND cn.LocationId=@LocationID AND cn.BranchApprovalDate BETWEEN @FromDate AND @Todate AND cn.Amount>0

--IBC --CHANGED BY OVAIS ON 24 OCT 2013
SELECT @IBC_ADJ = isnull(sum(isnull(ibc.TotalAmount  ,0)),0) --* -1
--FROM InterBranchCollection ibc
--WHERE  ibc.CompanyId=@CompanyId AND ibc.LocationId=@LocationID AND ibc.ApprovalDate BETWEEN @FromDate AND @Todate AND ibc.TotalAmount>0
FROM InterBranchCollection ibc
INNER JOIN SnDInterBranchCollection sibc ON sibc.LocationId = ibc.LocationId AND sibc.InterBranchCollectionId = ibc.InterBranchCollectionId
INNER JOIN snd s ON s.LocationId = sibc.LocationId AND s.SnDId = sibc.SnDId AND s.CompanyId=ibc.CompanyId
WHERE s.CompanyId=@CompanyId AND s.LocationId=@LocationId AND s.SnDId = @SNDID AND s.RollbackDate IS NULL


--ADDED / RECEIVED
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,Vault,ReturnDocument,BankCharges
								,Shortage,Customer_ADJ,OS_ADV_ADJ,SLN_ADJ,CN_ADJ,WHT_ADJ,IBC_ADJ)
(
SELECT	2 AS  GroupID, 'ADDITION' AS  GroupDescription,7 AS SortID,'ADD: ADDED / RECEIVED' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@Vault,@RertunDocument,@BankChanrges,@SHORTAGE+@CASH,@Customer_ADJ,@OS_ADV_ADJ,@SLN_ADJ,@CN_ADJ,@WHT_ADJ,@IBC_ADJ
)

--LESS: CHEQUE DISHONOURED
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,BalanceDeposited)
(
SELECT	3 AS  GroupID, 'DEDUCTION' AS  GroupDescription,7 AS SortID,'LESS: CHEQUE DISHONOURED' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@RertunDocument
)
--LESS: BANK CHARGES
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,BankBalance)
(
SELECT	3 AS  GroupID, 'DEDUCTION' AS  GroupDescription,8 AS SortID,'LESS: BANK CHARGES' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@BankChanrges
)
--LESS: CASH DEPOSIT IN VAULT
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,Cash)
(
SELECT	3 AS  GroupID, 'DEDUCTION' AS  GroupDescription,11 AS SortID,'LESS: DEDUCTED / ADJUSTED /CLEARED'  AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@Vault
)


SET @Vault=0
--Cash Received From Vault
SELECT	@Vault = isnull(sum(isnull(cd.ReceivedFromVault ,0)),0)
FROM snd s 
LEFT Outer  JOIN SnDCashDetail cd ON s.LocationId=cd.LocationId AND s.SnDId=cd.SnDId
WHERE s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL
--ADDED / RECEIVED
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,Cash)
(
SELECT	2 AS  GroupID, 'ADDITION' AS  GroupDescription,7 AS SortID,'ADD: ADDED / RECEIVED' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@Vault
)
--LESS: CASH DEPOSIT IN VAULT
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,Vault)
(
SELECT	3 AS  GroupID, 'DEDUCTION' AS  GroupDescription,11 AS SortID,'LESS: DEDUCTED / ADJUSTED /CLEARED'  AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@Vault
)


----------------------------------------------------------------------------------------------------------------------------------------
--LESS: DEPOSITED IN HO A/C
----------------------------------------------------------------------------------------------------------------------------------------
SET @Cash=0
SET @Vault=0
SET @Remittance_CashInHandDepInHOAcc=0
SET @DD_PO=0
SET @TC=0
SET @OtherDocument=0

SELECT	@Cash=(CASE WHEN scd.VaultCompanyId IS NULL then isnull(sum(isnull(DepositAmount ,0)),0) ELSE 0 END)
		,@Vault=(CASE WHEN scd.VaultCompanyId IS not NULL then isnull(sum(isnull(DepositAmount ,0)),0) ELSE 0 END)
		,@Remittance_CashInHandDepInHOAcc = isnull(sum(isnull(DepositAmount ,0)),0)
		
FROM	SnD s 
		LEFT Outer  JOIN SnDCashDepositBank scd ON s.LocationId = scd.LocationId AND s.SnDId = scd.SnDId
		LEFT Outer  JOIN PaymentTransaction pt ON scd.LocationId=pt.LocationId AND scd.PaymentTransactionId=pt.PaymentTransactionId  
		LEFT Outer  JOIN BankAccount ba ON pt.CompanyId=ba.CompanyId and pt.SystemBankAccountId=ba.BankAccountId  AND ba.CloseDate IS null
WHERE	s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL  AND ba.AccountType IN ('HO','HOBR')
GROUP BY s.CompanyId,s.LocationId,s.SnDId,scd.VaultCompanyId

SET @Cash = isnull(@Cash,0)
SET @Vault = isnull(@Vault,0)
SET @Remittance_CashInHandDepInHOAcc = isnull(@Remittance_CashInHandDepInHOAcc,0)

SELECT	@DD_PO			= isnull(sum((CASE WHEN pm.TypeCode IN ('DD','PO') THEN pt.Amount ELSE 0 END)),0) ,
		@TC				= isnull(sum((CASE WHEN pm.TypeCode='TC' THEN pt.Amount ELSE 0 END)),0),
		@OtherDocument	=	isnull(sum((CASE WHEN pm.TypeCode NOT IN ('DD','PO','TC') THEN pt.Amount ELSE 0 END)),0)
FROM	snd s 
		LEFT OUTER JOIN SnDRemittanceOtherDoc sro ON sro.LocationId = s.LocationId AND sro.SnDId = s.SnDId
		LEFT OUTER JOIN PaymentTransaction pt ON pt.LocationId = sro.LocationId AND pt.PaymentTransactionId = sro.PaymentTransactionId 
		LEFT OUTER JOIN PaymentMode pm ON pm.PaymentModeId= pt.PaymentModeId AND pm.IsToBeRemitted=1 
WHERE	s.CompanyId =@CompanyId and s.LocationId=@LocationID AND s.SnDId = @SNDID


--LESS: DEPOSITED IN COLLECTION A/C
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,Cash,Vault,DD_PO,TC,OtherDocument)
(
SELECT	3 AS  GroupID, 'DEDUCTION' AS  GroupDescription,2 AS SortID,'LESS: DEPOSITED IN HO A/C' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@Cash,@Vault,@DD_PO,@TC,@OtherDocument
)



----------------------------------------------------------------------------------------------------------------------------------------
--LESS: WITHDRAWAL AG. HOC
----------------------------------------------------------------------------------------------------------------------------------------
SELECT	@Cash	=	isnull(sum(isnull(h.Amount ,0)),0) 
		,@Remittance_HOC=	isnull(sum(isnull(h.Amount ,0)),0) 
FROM	HOC h 
WHERE	h.CompanyId=@CompanyId AND h.LocationId=@LocationID AND h.WithdrawSnDId=@SNDID AND h.ApprovalDate IS NOT null


--LESS: DEPOSITED IN COLLECTION A/C
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,Cash)
(
SELECT	3 AS  GroupID, 'DEDUCTION' AS  GroupDescription,3 AS SortID,'LESS: WITHDRAWAL AG. HOC' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@Cash
)


----------------------------------------------------------------------------------------------------------------------------------------
--LESS: COLLECTION A/C CHEQUE DEPOSITED
----------------------------------------------------------------------------------------------------------------------------------------
SELECT @Remittance_CollAccChqDepInHOAcc = sum(Remittance_CollAccChqDepInHOAcc)
		,@Remittance_TTFromCollAcc=sum(Remittance_TTFromCollAcc)
FROM
(
SELECT	--@BankBalance = isnull(sum(isnull(sbd.Amount,0)),0)
		Remittance_CollAccChqDepInHOAcc = (CASE WHEN pm.IsDirectRemitted<>1 THEN isnull(sum(isnull(sbd.Amount,0)),0) ELSE 0 END)
		,Remittance_TTFromCollAcc = (CASE WHEN pm.IsDirectRemitted=1 THEN isnull(sum(isnull(sbd.Amount,0)),0) ELSE 0 END)
		
FROM snd s 
LEFT Outer JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.DepositedSnDId
LEFT Outer  JOIN PaymentTransaction pt ON pt.LocationId = sbd.LocationId AND pt.PaymentTransactionId = sbd.PaymentTransactionId
LEFT Outer  JOIN PaymentMode pm ON pt.PaymentModeId=pm.PaymentModeId
WHERE sbd.Type IN ('R') --AND pm.IsToBeDeposited=1 
AND s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL
GROUP BY pm.IsDirectRemitted
) tmp

--LESS: DOC DEPOSITED IN COLLECTION A/C
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,BankBalance)
(
SELECT	3 AS  GroupID, 'DEDUCTION' AS  GroupDescription,9 AS SortID,'LESS: COLLECTION A/C CHEQUE DEPOSITED' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@Remittance_CollAccChqDepInHOAcc
)
----------------------------------------------------------------------------------------------------------------------------------------
--LESS: SENT / TRANSFERRED TO HO
----------------------------------------------------------------------------------------------------------------------------------------

--LESS: SENT / TRANSFERRED TO HO
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,BankBalance, DD_PO)
(
SELECT	3 AS  GroupID, 'DEDUCTION' AS  GroupDescription,5 AS SortID,'LESS: SENT / TRANSFERRED TO HO' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@Remittance_TTFromCollAcc,@Remittance_CASH_DD+@Remittance_BANK_DD
)
--LESS: COLLECTION A/C CHEQUE REDEPOSITED
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,BalanceDeposited)
(
SELECT	3 AS  GroupID, 'DEDUCTION' AS  GroupDescription,10 AS SortID,'LESS: COLLECTION A/C CHEQUE REDEPOSITED' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@Remittance_CollAccChqRedeposited
)


--SELECT * FROM SnDRemittance sdd


----------------------------------------------------------------------------------------------------------------------------------------
--LESS: DEDUCTED / ADJUSTED / CLEARED
----------------------------------------------------------------------------------------------------------------------------------------
--Bank Charges Recorded
--SELECT	@BankBalance = isnull(sum(isnull(bc.Amount ,0)),0)
--FROM snd s 
--LEFT Outer  JOIN SnDBankCharges bc ON s.LocationId=bc.LocationId AND s.SnDId=bc.SnDId
--WHERE s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL

--Bank Charges Collected
--SELECT	@BankChanrges = isnull(sum(isnull(bc.Amount ,0)),0)
--FROM snd s 
--LEFT Outer JOIN SnDBankCharges bc ON s.LocationId=bc.LocationId AND s.SnDId=bc.CollectionSnDId
--WHERE s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL

--SND Cash Reduction
SELECT	@Cash = isnull(sum(isnull(cr.ReductionAmount ,0)),0)
FROM snd s 
LEFT Outer JOIN SnDCashReduction cr ON s.LocationId=cr.LocationId AND s.SnDId=cr.SnDId
WHERE s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL


SELECT	@ShortageCollection = isnull(sum(isnull(SC.CollectedAmount ,0)),0)
FROM snd s 
LEFT Outer JOIN SnDShortageCollection SC ON s.LocationId=SC.LocationId AND s.SnDId=SC.SnDId
WHERE s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL



SELECT	 @RS			=	ISNULL(sum(isnull(RS,0)),0)
		,@DS_HO			=	ISNULL(sum(isnull(DS_HO,0)),0)
		,@IBC_ADJ		=	ISNULL(sum(isnull(IBC_ADJ,0)),0)
		,@Customer_ADJ	=	ISNULL(sum(isnull(Customer_ADJ,0)),0)
		,@OS_ADV_ADJ	=	ISNULL(sum(isnull(OS_ADV_ADJ,0)),0)
		,@SLN_ADJ		=	ISNULL(sum(isnull(SLN_ADJ,0)),0)
		--,@WHT_ADJ		=	ISNULL(sum(isnull(WHT_ADJ,0)),0)
		,@CN_ADJ		=	ISNULL(sum(isnull(CN_ADJ,0)),0)
FROM #TempSnDCollection tsd


SELECT @RertunDocument= isnull(sum(isnull(sd.SettlementAmount, 0) ),0)
FROM    SnD s LEFT Outer JOIN
		SnDBankDocSettlement sd ON sd.LocationId = s.LocationId AND sd.SnDId = s.SnDId
WHERE	s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL

--WHT
SELECT @WHT_ADJ = isnull(sum(isnull(wr.AdjustedAmount  ,0)),0)
FROM WHTReversal wr 
WHERE  wr.CompanyId=@CompanyId AND wr.LocationId=@LocationID AND wr.ApprovalDate BETWEEN @FromDate AND @Todate AND wr.AdjustedAmount>0

SELECT @WHT_ADJ =@WHT_ADJ + isnull(sum(isnull(wso.AdjustedAmount  ,0)),0)
FROM WHTChallanSaleOrder wso 
WHERE  wso.LocationId=@LocationID AND CONVERT(datetime,CONVERT(varchar(10),wso.insertdate,101)) BETWEEN @FromDate AND @Todate AND wso.AdjustedAmount>0


--LESS: DOC DEPOSITED IN COLLECTION A/C
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,Cash,ReturnDocument
								,Shortage,DirectlyRemitted,Customer_ADJ,OS_ADV_ADJ,SLN_ADJ,CN_ADJ,WHT_ADJ,IBC_ADJ)
(
SELECT	3 AS  GroupID, 'DEDUCTION' AS  GroupDescription,11 AS SortID,'LESS: DEDUCTED / ADJUSTED /CLEARED' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@Cash,@RertunDocument,@ShortageCollection,@DS_HO+@RS
		,@Customer_ADJ,@OS_ADV_ADJ,@SLN_ADJ,@CN_ADJ,@WHT_ADJ,@IBC_ADJ
)

SELECT GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID
		,ISNULL(SUM(ISNULL(Cash,0)),0) AS Cash
		,ISNULL(SUM(ISNULL(Cheque,0)),0) AS Cheque
		,ISNULL(SUM(ISNULL(Vault,0)),0) AS Vault
		,ISNULL(SUM(ISNULL(DD_PO,0)),0) AS DD_PO
		,ISNULL(SUM(ISNULL(TC,0)),0) AS TC
		,ISNULL(SUM(ISNULL(OtherDocument,0)),0) AS OtherDocument
		,ISNULL(SUM(ISNULL(BalanceDeposited,0)),0) AS BalanceDeposited
		,ISNULL(SUM(ISNULL(BankBalance,0)),0) AS BankBalance
		,ISNULL(SUM(ISNULL(TotalBankBalance,0)),0) AS TotalBankBalance
		,ISNULL(SUM(ISNULL(ReturnDocument,0)),0) AS ReturnDocument
		,ISNULL(SUM(ISNULL(BankCharges,0)),0) AS BankCharges
		,ISNULL(SUM(ISNULL(Shortage,0)),0) AS Shortage
		,ISNULL(SUM(ISNULL(DirectlyRemitted,0)),0) AS DirectlyRemitted
		,ISNULL(SUM(ISNULL(Customer_ADJ,0)),0) AS Customer_ADJ
		,ISNULL(SUM(ISNULL(OS_ADV_ADJ,0)),0) AS OS_ADV_ADJ
		,ISNULL(SUM(ISNULL(SLN_ADJ,0)),0) AS SLN_ADJ
		,ISNULL(SUM(ISNULL(CN_ADJ,0)),0) AS CN_ADJ
		,ISNULL(SUM(ISNULL(WHT_ADJ,0)),0) AS WHT_ADJ
		,ISNULL(SUM(ISNULL(IBC_ADJ,0)),0) AS IBC_ADJ
		,ISNULL(SUM(ISNULL(ROUNDOFF,0)),0) AS ROUNDOFF
		,ISNULL(SUM(ISNULL(TOTALREMITTABEBALANCE,0)),0) AS TOTALREMITTABEBALANCE
		
FROM #SnDReconciliation
GROUP BY GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID

---------------------------------------------------------------------------------------------------------------------------------------
-- END - SND RECONCILLIATION 
----------------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------------------------
-- BEGIN - REIMTTANCE RELATED INFORMATION
----------------------------------------------------------------------------------------------------------------------------------------

	--REMITTANCE-1   (REMITTANCE TO HO B/F)
	INSERT INTO #SnDRemittance(SortID,SourceReceipt,CompanyID,LocationID,SNDID,TotalAmount)
	(
	SELECT	1 AS SortID,
			'REMITTANCE TO HO B/F' AS SourceReceipt,
			@CompanyID,
			@LocationID,
			@SNDID,
			isnull(@Remittance_OB,0)
	)
	
	--REMITTANCE-2   (ADD: COLLECTION A/C CHEQUE DISHONOURED)
	INSERT INTO #SnDRemittance(SortID,SourceReceipt,CompanyID,LocationID,SNDID,TotalAmount)
	(
	SELECT	2 AS SortID,'ADD: COLLECTION A/C CHEQUE DISHONOURED' AS SourceReceipt
			,@CompanyID,@LocationID,@SNDID,isnull(@Remittance_CollAccChqDishonoured,0)
	)
	
	--REMITTANCE-3   (LESS: COLLECTION A/C CHEQUE REDEPOSITED)
	INSERT INTO #SnDRemittance(SortID,SourceReceipt,CompanyID,LocationID,SNDID,TotalAmount)
	(
	SELECT	3 AS SortID,'LESS: COLLECTION A/C CHEQUE REDEPOSITED' AS SourceReceipt
			,@CompanyID,@LocationID,@SNDID,isnull(@Remittance_CollAccChqRedeposited,0)
	)
	
	--REMITTANCE-4   (REMITTABLE BALANCE TOTAL:')
	INSERT INTO #SnDRemittance(SortID,SourceReceipt,CompanyID,LocationID,SNDID,TotalAmount)
	(
	SELECT	4 AS SortID,'TOTAL BEFORE TODAY REMITTANCE:' AS SourceReceipt
			,@CompanyID,@LocationID,@SNDID,isnull(@Remittance_OB,0)  + isnull(@Remittance_CollAccChqDishonoured,0) - isnull(@Remittance_CollAccChqRedeposited,0)
	)
	
	--REMITTANCE-5   (ADD: CASH IN HAND DEPOSITED IN HO A/C)
	INSERT INTO #SnDRemittance(SortID,SourceReceipt,CompanyID,LocationID,SNDID,TotalAmount)
	(
	SELECT	5 AS SortID,'CASH IN HAND DEPOSITED IN HO A/C' AS SourceReceipt
			,@CompanyID,@LocationID,@SNDID,isnull(@Remittance_CashInHandDepInHOAcc,0)
	)
	
	--REMITTANCE-6   (REMITTANCE - HOC)
	INSERT INTO #SnDRemittance(SortID,SourceReceipt,CompanyID,LocationID,SNDID,TotalAmount)
	(
	SELECT	6 AS SortID,'HOC' AS SourceReceipt
			,@CompanyID,@LocationID,@SNDID,isnull(@Remittance_HOC,0)
	)
	
	--REMITTANCE-7   (TC)
	INSERT INTO #SnDRemittance(SortID,SourceReceipt,CompanyID,LocationID,SNDID,TotalAmount)
	(
	SELECT	7 AS SortID,'TC' AS SourceReceipt
			,@CompanyID,@LocationID,@SNDID,isnull(@Remittance_TC,0)
	)
	
	--REMITTANCE-8   (DD / PO)
	INSERT INTO #SnDRemittance(SortID,SourceReceipt,CompanyID,LocationID,SNDID,TotalAmount)
	(
	SELECT	8 AS SortID,'DD / PO' AS SourceReceipt
			,@CompanyID,@LocationID,@SNDID,isnull(@Remittance_DD_PO,0)
	)
	
	--REMITTANCE-9   (OTHER DOCUMENT)
	INSERT INTO #SnDRemittance(SortID,SourceReceipt,CompanyID,LocationID,SNDID,TotalAmount)
	(
	SELECT	9 AS SortID,'OTHER DOCUMENT' AS SourceReceipt
			,@CompanyID,@LocationID,@SNDID,isnull(@Remittance_OtherDocument,0)
	)
	
	--REMITTANCE-10   (COLLECTION A/C CHEQUE DEPOSITED IN HO A/C)
	INSERT INTO #SnDRemittance(SortID,SourceReceipt,CompanyID,LocationID,SNDID,TotalAmount)
	(
	SELECT	10 AS SortID,'COLLECTION A/C CHEQUE DEPOSITED IN HO A/C' AS SourceReceipt
			,@CompanyID,@LocationID,@SNDID,isnull(@Remittance_CollAccChqDepInHOAcc,0)
	)

	--REMITTANCE-11   (REMITTANCE FROM COLLECTION A/C (ET/TT/MT))
	INSERT INTO #SnDRemittance(SortID,SourceReceipt,CompanyID,LocationID,SNDID,TotalAmount)
	(
	SELECT	11 AS SortID,'REMITTANCE FROM COLLECTION A/C (ET/TT/MT)' AS SourceReceipt
			,@CompanyID,@LocationID,@SNDID,isnull(@Remittance_TTFromCollAcc,0)
	)

	--REMITTANCE-12   (DIRECT REMITTANCE TO HO - DEPOSIT SLIP)
	INSERT INTO #SnDRemittance(SortID,SourceReceipt,CompanyID,LocationID,SNDID,TotalAmount)
	(
	SELECT	12 AS SortID,'DIRECT REMITTANCE TO HO - DEPOSIT SLIP' AS SourceReceipt
			,@CompanyID,@LocationID,@SNDID,isnull(@Remittance_DirectRemToHODS,0)
	)

	--REMITTANCE-13   (DIRECT REMITTANCE TO HO - REMITTANCE SLIP)
	INSERT INTO #SnDRemittance(SortID,SourceReceipt,CompanyID,LocationID,SNDID,TotalAmount)
	(
	SELECT	13 AS SortID,'DIRECT REMITTANCE TO HO - REMITTANCE SLIP' AS SourceReceipt
			,@CompanyID,@LocationID,@SNDID,isnull(@Remittance_DirectRemToHORS,0)
	)
	
	--REMITTANCE-14   (REMITTED TODAY'S TOTAL)

	SET @Remittance_TOTALREMITTEDTODAY =	isnull(@Remittance_CashInHandDepInHOAcc,0)
											+ isnull(@Remittance_HOC,0)
											+ isnull(@Remittance_DD_PO,0)
											+ isnull(@Remittance_TC,0)
											+ isnull(@Remittance_OtherDocument,0)
											+ isnull(@Remittance_CollAccChqDepInHOAcc,0)
											+ isnull(@Remittance_TTFromCollAcc,0)
											+ isnull(@Remittance_DirectRemToHODS,0)
											+ isnull(@Remittance_DirectRemToHORS,0)

	INSERT INTO #SnDRemittance(SortID,SourceReceipt,CompanyID,LocationID,SNDID,TotalAmount)
	(
	SELECT	14 AS SortID,'TOTAL REMITTED TODAY:' AS SourceReceipt
			,@CompanyID,@LocationID,@SNDID, isnull(@Remittance_TOTALREMITTEDTODAY,0)
	)


	--REMITTANCE-15   (REMITTANCE CF)

	SELECT @Remittance_CF = SUM(ADDEDTOREMITTABLE) FROM #TempSnDCollection 
	SET @Remittance_CF = @Remittance_CF + @Remittance_OB + @Remittance_CollAccChqDishonoured - @Remittance_CollAccChqRedeposited - @Remittance_TOTALREMITTEDTODAY

	INSERT INTO #SnDRemittance(SortID,SourceReceipt,CompanyID,LocationID,SNDID,TotalAmount)
	(
	SELECT	15 AS SortID,'TOTAL REMITTANCE TO HO C/F:' AS SourceReceipt
			,@CompanyID,@LocationID,@SNDID,@Remittance_CF
	)


	SELECT * FROM #SnDRemittance

----------------------------------------------------------------------------------------------------------------------------------------
-- END - REIMTTANCE RELATED INFORMATION
----------------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------------------------
-- BEGIN - SND BANK DEBIT ADVICE
----------------------------------------------------------------------------------------------------------------------------------------

	Declare		@DepositedDate datetime,
				@TransactionDate datetime,
				@PreviousSNDID	numeric(5,0),
				@DayBeforePreviousSNDID	numeric(5,0),
				@DefaultBank numeric(15,4),
				@OtherBank numeric(15,4)

	set  @PreviousSNDID				=	(SELECT max(sndid) FROM snd s WHERE s.CompanyId =@CompanyId  AND s.LocationId=@LocationId AND s.SnDId < @SNDID AND s.RollbackDate IS NULL)
	set  @DayBeforePreviousSNDID	=	(SELECT max(sndid) FROM snd s WHERE s.CompanyId =@CompanyId  AND s.LocationId=@LocationId AND s.SnDId < @PreviousSNDID AND s.RollbackDate IS NULL)


	--CREATE TABLE FOR SND BANK DEBIT ADVICE
	CREATE TABLE #SnDDebitAdvice    (SortID numeric(5,0),SourceReceipt Varchar(100),DepositedDate datetime,TransactionDate datetime,
									 DefaultBankAmount numeric(15,2),OtherBankAmount numeric(15,2))


--CASH DEPOSITED PREVIOUS DAY

	SET		@DepositedDate=null
	SET		@TransactionDate=NULL
	SET		@DefaultBank=0
	SET		@OtherBank=0
		
	
	SELECT	@DepositedDate		=	s.ToDate,
			@TransactionDate	=	s.ToDate,
			@DefaultBank		=	(CASE WHEN bas.IsDefault=1 THEN isnull(sum(isnull(scd.DepositAmount,0)),0)  ELSE 0 END), 
			@OtherBank			=	(CASE WHEN bas.IsDefault<>1 THEN isnull(sum(isnull(scd.DepositAmount,0)),0)  ELSE 0 END)
	FROM snd s 
	INNER JOIN SnDCashDepositBank scd ON s.LocationId=scd.LocationId AND s.SnDId=scd.SnDId
	INNER JOIN PaymentTransaction pt ON pt.LocationId = scd.LocationId AND pt.PaymentTransactionId = scd.PaymentTransactionId
	INNER JOIN uv_SystemBankAccounts sba ON pt.SystemBankAccountId=sba.BankAccountId AND pt.LocationId=sba.LocationId
	INNER JOIN BankAccountSequence bas ON bas.LocationId= sba.LocationId AND bas.BankAccountId= sba.BankAccountId 
	WHERE s.CompanyId=@CompanyId AND s.LocationId=@LocationId AND s.SnDId = @PreviousSNDID 
	GROUP BY s.ToDate,bas.IsDefault
	
	INSERT INTO #SnDDebitAdvice
	SELECT 1,'CASH DEPOSITED PREVIOUS DAY',@DepositedDate,@TransactionDate, @DefaultBank, @OtherBank

uno

	INSERT INTO #SnDDebitAdvice		
	SELECT	1,'CASH DEPOSITED PREVIOUS DAY', DepositedDate		=	s.ToDate,
			TransactionDate	=	s.ToDate,
			DefaultBank		=	(CASE WHEN bas.IsDefault=1 THEN isnull(sum(isnull(spt.AdjustedAmount,0)),0)  ELSE 0 END), 
			OtherBank			=	(CASE WHEN bas.IsDefault<>1 THEN isnull(sum(isnull(spt.AdjustedAmount,0)),0)  ELSE 0 END)
	FROM snd s
	INNER JOIN uv_SNDPaymentTransaction spt ON s.LocationId=spt.LocationId AND s.SnDId=spt.SnDId
	INNER JOIN PaymentTransaction pt ON pt.LocationId = spt.LocationId AND pt.PaymentTransactionId = spt.PaymentTransactionId
	INNER JOIN Paymentmode pm ON pt.PaymentModeId=pm.PaymentModeId
	INNER JOIN uv_SystemBankAccounts sba ON pt.SystemBankAccountId=sba.BankAccountId AND pt.LocationId=sba.LocationId
	INNER JOIN BankAccountSequence bas ON bas.LocationId= sba.LocationId AND bas.BankAccountId= sba.BankAccountId 
	WHERE s.CompanyId=@CompanyId AND s.LocationId=@LocationId AND s.SnDId = @PreviousSNDID   AND s.RollbackDate IS null
	AND pm.IsDirectDeposited=1
	GROUP BY s.ToDate,bas.IsDefault

--CHQS DEPOSITED DAY BEFORE PREVIOUS DAY

	SET		@DepositedDate		= (SELECT todate FROM snd s WHERE s.CompanyId =@CompanyId  AND s.LocationId=@LocationId AND s.SnDId = @DayBeforePreviousSNDID )
	SET		@TransactionDate	= (SELECT todate FROM snd s WHERE s.CompanyId =@CompanyId  AND s.LocationId=@LocationId AND s.SnDId = @SNDID )
	SET		@DefaultBank		= 0
	SET		@OtherBank			= 0
			
	SELECT	@DefaultBank		=	(CASE WHEN bas.IsDefault=1 THEN isnull(sum(isnull(sbd.Amount,0)),0)  ELSE 0 END), 
			@OtherBank			=	(CASE WHEN bas.IsDefault<>1 THEN isnull(sum(isnull(sbd.Amount,0)),0)  ELSE 0 END)
	FROM snd s 
	inner JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.DepositedSnDId
	INNER JOIN uv_SystemBankAccounts usba ON usba.LocationId = sbd.LocationId AND usba.BankAccountId = sbd.BankAccountId
	INNER JOIN BankAccountSequence bas ON bas.LocationId = usba.LocationId AND bas.BankAccountId = usba.BankAccountId
	WHERE sbd.Type = 'D' 
	AND s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId = @DayBeforePreviousSNDID   AND s.RollbackDate IS null
	--Exclude Redeposit Doc
	AND NOT EXISTS (SELECT	sbd2.SnDBankDocMovementId FROM SnDBankDocMovement sbd2 
					WHERE	sbd2.PaymentTransactionId=sbd.PaymentTransactionId
					AND     sbd2.LocationId = sbd.LocationId
					AND		sbd2.DepositedSnDId=sbd.LastSettlementSnDId)
	GROUP BY bas.IsDefault,s.ToDate
	
	INSERT INTO #SnDDebitAdvice
	SELECT 2,'ADD: CHQS DEPOSITED DAY BEFORE PREVIOUS DAY',@DepositedDate,@TransactionDate, @DefaultBank, @OtherBank


--LESS: SAME BANK CHQ. CLEARED PREV. DAY

	SET		@DepositedDate		= (SELECT todate FROM snd s WHERE s.CompanyId =@CompanyId  AND s.LocationId=@LocationId AND s.SnDId = @DayBeforePreviousSNDID )
	SET		@TransactionDate	= (SELECT todate FROM snd s WHERE s.CompanyId =@CompanyId  AND s.LocationId=@LocationId AND s.SnDId = @PreviousSNDID )
	SET		@DefaultBank		= 0
	SET		@OtherBank			= 0
			
	SELECT	@DefaultBank		=	(CASE WHEN bas.IsDefault=1 THEN isnull(sum(isnull(sbd.Amount,0)),0)  * -1  ELSE 0 END), 
			@OtherBank			=	(CASE WHEN bas.IsDefault<>1 THEN isnull(sum(isnull(sbd.Amount,0)),0) * -1  ELSE 0 END)
	FROM snd s 
	inner JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.DepositedSnDId
	INNER JOIN uv_SystemBankAccounts usba ON usba.LocationId = sbd.LocationId AND usba.BankAccountId = sbd.BankAccountId
	INNER JOIN BankAccountSequence bas ON bas.LocationId = usba.LocationId AND bas.BankAccountId = usba.BankAccountId
	WHERE sbd.Type = 'D' 
	AND s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId = @DayBeforePreviousSNDID AND sbd.ClearedSnDId=@PreviousSNDID  AND s.RollbackDate IS null
	--Exclude Redeposit Doc
	AND NOT EXISTS (SELECT	sbd2.SnDBankDocMovementId FROM SnDBankDocMovement sbd2 
					WHERE	sbd2.PaymentTransactionId=sbd.PaymentTransactionId
					AND     sbd2.LocationId = sbd.LocationId
					AND		sbd2.DepositedSnDId=sbd.LastSettlementSnDId)
	GROUP BY bas.IsDefault,s.ToDate
	
	INSERT INTO #SnDDebitAdvice
	SELECT 3,'LESS: SAME BANK CHQ. CLEARED PREV. DAY',@DepositedDate,@TransactionDate, @DefaultBank, @OtherBank


--ADD: SAME BANK CHQ. DEP. PREV. DAY CLEARED

	SET		@DepositedDate		= (SELECT todate FROM snd s WHERE s.CompanyId =@CompanyId  AND s.LocationId=@LocationId AND s.SnDId = @PreviousSNDID )
	SET		@TransactionDate	= (SELECT todate FROM snd s WHERE s.CompanyId =@CompanyId  AND s.LocationId=@LocationId AND s.SnDId = @SNDID )
	SET		@DefaultBank		= 0
	SET		@OtherBank			= 0
			
	SELECT	@DefaultBank		=	(CASE WHEN bas.IsDefault=1 THEN isnull(sum(isnull(sbd.Amount,0)),0)  ELSE 0 END), 
			@OtherBank			=	(CASE WHEN bas.IsDefault<>1 THEN isnull(sum(isnull(sbd.Amount,0)),0)  ELSE 0 END)
	FROM snd s 
	inner JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.DepositedSnDId
	INNER JOIN uv_SystemBankAccounts usba ON usba.LocationId = sbd.LocationId AND usba.BankAccountId = sbd.BankAccountId
	INNER JOIN BankAccountSequence bas ON bas.LocationId = usba.LocationId AND bas.BankAccountId = usba.BankAccountId
	WHERE sbd.Type = 'D' 
	AND s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId = @PreviousSNDID AND sbd.ClearedSnDId = @SNDID  AND s.RollbackDate IS null
	--Exclude Redeposit Doc
	AND NOT EXISTS (SELECT	sbd2.SnDBankDocMovementId FROM SnDBankDocMovement sbd2 
					WHERE	sbd2.PaymentTransactionId=sbd.PaymentTransactionId
					AND     sbd2.LocationId = sbd.LocationId
					AND		sbd2.DepositedSnDId=sbd.LastSettlementSnDId)
	GROUP BY bas.IsDefault,s.ToDate

	INSERT INTO #SnDDebitAdvice
	SELECT 4,'ADD: SAME BANK CHQ. DEP. PREV. DAY CLEARED',@DepositedDate,@TransactionDate, @DefaultBank, @OtherBank


--ADD: SAME BANK CHQ. DEP. PREV. DAY RETURNED

	SET		@DepositedDate		= (SELECT todate FROM snd s WHERE s.CompanyId =@CompanyId  AND s.LocationId=@LocationId AND s.SnDId = @PreviousSNDID )
	SET		@TransactionDate	= (SELECT todate FROM snd s WHERE s.CompanyId =@CompanyId  AND s.LocationId=@LocationId AND s.SnDId = @SNDID )
	SET		@DefaultBank		= 0
	SET		@OtherBank			= 0
			
	SELECT	@DefaultBank		=	(CASE WHEN bas.IsDefault=1 THEN isnull(sum(isnull(sbd.Amount,0)),0)  ELSE 0 END), 
			@OtherBank			=	(CASE WHEN bas.IsDefault<>1 THEN isnull(sum(isnull(sbd.Amount,0)),0)  ELSE 0 END)
	FROM snd s 
	inner JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.DepositedSnDId
	INNER JOIN uv_SystemBankAccounts usba ON usba.LocationId = sbd.LocationId AND usba.BankAccountId = sbd.BankAccountId
	INNER JOIN BankAccountSequence bas ON bas.LocationId = usba.LocationId AND bas.BankAccountId = usba.BankAccountId
	WHERE sbd.Type = 'D' 
	AND s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId = @PreviousSNDID AND sbd.ReturnedSnDId = @SNDID  AND s.RollbackDate IS null
	--Exclude Redeposit Doc
	AND NOT EXISTS (SELECT	sbd2.SnDBankDocMovementId FROM SnDBankDocMovement sbd2 
					WHERE	sbd2.PaymentTransactionId=sbd.PaymentTransactionId
					AND     sbd2.LocationId = sbd.LocationId
					AND		sbd2.DepositedSnDId=sbd.LastSettlementSnDId)
	GROUP BY bas.IsDefault,s.ToDate

	INSERT INTO #SnDDebitAdvice
	SELECT 5,'ADD: SAME BANK CHQ. DEP. PREV. DAY RETURNED',@DepositedDate,@TransactionDate, @DefaultBank, @OtherBank

--ADD: CHQS. PRIOR TO DAY BEFORE PREV. DAY
--Those cheques which is Prior to day before deposited day but not clear and return

	SET		@DepositedDate		=  null
	SET		@TransactionDate	= (SELECT todate FROM snd s WHERE s.CompanyId =@CompanyId  AND s.LocationId=@LocationId AND s.SnDId = @SNDID )
	SET		@DefaultBank		= 0
	SET		@OtherBank			= 0
			
	SELECT	@DefaultBank		=	(CASE WHEN bas.IsDefault=1 THEN isnull(sum(isnull(sbd.Amount,0)),0)  ELSE 0 END), 
			@OtherBank			=	(CASE WHEN bas.IsDefault<>1 THEN isnull(sum(isnull(sbd.Amount,0)),0)  ELSE 0 END)
	FROM snd s 
	inner JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.DepositedSnDId
	INNER JOIN uv_SystemBankAccounts usba ON usba.LocationId = sbd.LocationId AND usba.BankAccountId = sbd.BankAccountId
	INNER JOIN BankAccountSequence bas ON bas.LocationId = usba.LocationId AND bas.BankAccountId = usba.BankAccountId
	WHERE	sbd.Type = 'D' 
	--AND s.CompanyId=5 AND s.LocationId=58 AND s.SnDId=28 AND s.RollbackDate IS NULL
	AND		s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId < @DayBeforePreviousSNDID   AND s.RollbackDate IS null
	AND		(
			ISNULL(SBD.ClearedSnDId, @SNDID+1)	> @SNDID  
			and ISNULL(SBD.ReturnedSnDId,@SNDID+1) > @SNDID
			)
	
	--Exclude Redeposit Doc
	AND NOT EXISTS (SELECT	sbd2.SnDBankDocMovementId FROM SnDBankDocMovement sbd2 
					WHERE	sbd2.PaymentTransactionId=sbd.PaymentTransactionId
					AND     sbd2.LocationId = sbd.LocationId
					AND		sbd2.DepositedSnDId=sbd.LastSettlementSnDId)
	GROUP BY bas.IsDefault,s.ToDate

	INSERT INTO #SnDDebitAdvice
	SELECT 6,'ADD: CHQS. PRIOR TO DAY BEFORE PREV. DAY',@DepositedDate,@TransactionDate, @DefaultBank, @OtherBank



--LESS: CHQS. RET. ALL PREV. DEPOSIT
--Those cheques which is Prior to day before deposited day but return in current SND

	SET		@DepositedDate		=  null
	SET		@TransactionDate	= (SELECT todate FROM snd s WHERE s.CompanyId =@CompanyId  AND s.LocationId=@LocationId AND s.SnDId = @SNDID )
	SET		@DefaultBank		= 0
	SET		@OtherBank			= 0
			
	SELECT	@DefaultBank		=	(CASE WHEN bas.IsDefault=1 THEN isnull(sum(isnull(sbd.Amount,0)),0) * -1   ELSE 0 END), 
			@OtherBank			=	(CASE WHEN bas.IsDefault<>1 THEN isnull(sum(isnull(sbd.Amount,0)),0) * -1  ELSE 0 END)
	FROM snd s 
	inner JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.DepositedSnDId
	INNER JOIN uv_SystemBankAccounts usba ON usba.LocationId = sbd.LocationId AND usba.BankAccountId = sbd.BankAccountId
	INNER JOIN BankAccountSequence bas ON bas.LocationId = usba.LocationId AND bas.BankAccountId = usba.BankAccountId
	WHERE	sbd.Type = 'D' 
	AND		s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId < @DayBeforePreviousSNDID   AND s.RollbackDate IS null
	AND		SBD.ReturnedSnDId = @SNDID
	--Exclude Redeposit Doc
	AND NOT EXISTS (SELECT	sbd2.SnDBankDocMovementId FROM SnDBankDocMovement sbd2 
					WHERE	sbd2.PaymentTransactionId=sbd.PaymentTransactionId
					AND     sbd2.LocationId = sbd.LocationId
					AND		sbd2.DepositedSnDId=sbd.LastSettlementSnDId)
	GROUP BY bas.IsDefault,s.ToDate

	INSERT INTO #SnDDebitAdvice
	SELECT 7,'LESS: CHQS. RET. ALL PREV. DEPOSIT',@DepositedDate,@TransactionDate, @DefaultBank, @OtherBank


--LESS: UNMARKED CHEQUES
--Those cheques which is Prior to day before deposited day but not clear and return

	SET		@DepositedDate		= Null
	SET		@TransactionDate	= Null
	SET		@DefaultBank		= 0
	SET		@OtherBank			= 0
			
	SELECT	@DefaultBank		=	(CASE WHEN bas.IsDefault=1 THEN isnull(sum(isnull(sbd.Amount,0)),0) * -1   ELSE 0 END), 
			@OtherBank			=	(CASE WHEN bas.IsDefault<>1 THEN isnull(sum(isnull(sbd.Amount,0)),0) * -1  ELSE 0 END)
	FROM snd s 
	inner JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.DepositedSnDId
	INNER JOIN uv_SystemBankAccounts usba ON usba.LocationId = sbd.LocationId AND usba.BankAccountId = sbd.BankAccountId
	INNER JOIN BankAccountSequence bas ON bas.LocationId = usba.LocationId AND bas.BankAccountId = usba.BankAccountId
	WHERE	sbd.Type = 'D' 
	AND		s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId <= @DayBeforePreviousSNDID   AND s.RollbackDate IS null
	AND		(
			ISNULL(SBD.ClearedSnDId, @SNDID+1)	> @SNDID  
			and ISNULL(SBD.ReturnedSnDId,@SNDID+1) > @SNDID
			)
	--Exclude Redeposit Doc
	AND NOT EXISTS (SELECT	sbd2.SnDBankDocMovementId FROM SnDBankDocMovement sbd2 
					WHERE	sbd2.PaymentTransactionId=sbd.PaymentTransactionId
					AND     sbd2.LocationId = sbd.LocationId
					AND		sbd2.DepositedSnDId=sbd.LastSettlementSnDId)
	GROUP BY bas.IsDefault,s.ToDate
	
	INSERT INTO #SnDDebitAdvice
	SELECT 8,'LESS: UNMARKED CHEQUES',@DepositedDate,@TransactionDate, @DefaultBank, @OtherBank


	--GET DATA
	SELECT SortID,SourceReceipt,DepositedDate,TransactionDate,sum(isnull(DefaultBankAmount,0)) AS DefaultBank,sum(isnull(OtherBankAmount,0)) AS OtherBank 
	FROM #SnDDebitAdvice
	GROUP BY SortID,SourceReceipt,DepositedDate,TransactionDate
	
----------------------------------------------------------------------------------------------------------------------------------------
-- END - SND BANK DEBIT ADVICE
----------------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------------------------
-- BEGIN - BREAKUP OF DAY BEFORE PREV. DAY DEPOSITED CHQS
----------------------------------------------------------------------------------------------------------------------------------------

	--CREATE TABLE FOR SND BANK DEBIT ADVICE
	CREATE TABLE #SnDepositedChequeDetail(SortID numeric(5,0),SourceReceipt Varchar(100),DepositedDate datetime,TransactionDate datetime,
	DefaultBankAmount numeric(15,2),OtherBankAmount numeric(15,2))

--CHQS DEPOSITED DAY BEFORE PREVIOUS DAY

	SET		@DepositedDate		= Null
	SET		@TransactionDate	= Null
	SET		@DefaultBank		= 0
	SET		@OtherBank			= 0
			
	SELECT	@DepositedDate		=   s.ToDate,
			@DefaultBank		=	(CASE WHEN bas.IsDefault=1 THEN isnull(sum(isnull(sbd.Amount,0)),0) * -1   ELSE 0 END), 
			@OtherBank			=	(CASE WHEN bas.IsDefault<>1 THEN isnull(sum(isnull(sbd.Amount,0)),0) * -1  ELSE 0 END)
	FROM snd s 
	inner JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.DepositedSnDId
	INNER JOIN uv_SystemBankAccounts usba ON usba.LocationId = sbd.LocationId AND usba.BankAccountId = sbd.BankAccountId
	INNER JOIN BankAccountSequence bas ON bas.LocationId = usba.LocationId AND bas.BankAccountId = usba.BankAccountId
	WHERE sbd.Type = 'D' 
	AND s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId = @DayBeforePreviousSNDID   AND s.RollbackDate IS null
	--Exclude Redeposit Doc
	AND NOT EXISTS (SELECT	sbd2.SnDBankDocMovementId FROM SnDBankDocMovement sbd2 
					WHERE	sbd2.PaymentTransactionId=sbd.PaymentTransactionId
					AND     sbd2.LocationId = sbd.LocationId
					AND		sbd2.DepositedSnDId=sbd.LastSettlementSnDId)
	GROUP BY bas.IsDefault,s.ToDate
	
	INSERT INTO #SnDepositedChequeDetail
	SELECT 1,'ADD: CHQS DEPOSITED ON',@DepositedDate,@TransactionDate, @DefaultBank, @OtherBank
	
--CHQS CLEARED - NORMAL CLEARING

	SET		@DepositedDate		= Null
	SET		@TransactionDate	= (SELECT todate FROM snd s WHERE s.CompanyId =@CompanyId  AND s.LocationId=@LocationId AND s.SnDId = @SNDID )
	SET		@DefaultBank		= 0
	SET		@OtherBank			= 0
			
	SELECT	@DepositedDate		=   s.ToDate,
			@DefaultBank		=	(CASE WHEN bas.IsDefault=1 THEN isnull(sum(isnull(sbd.Amount,0)),0)    ELSE 0 END), 
			@OtherBank			=	(CASE WHEN bas.IsDefault<>1 THEN isnull(sum(isnull(sbd.Amount,0)),0)   ELSE 0 END)
	FROM snd s 
	inner JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.DepositedSnDId
	INNER JOIN uv_SystemBankAccounts usba ON usba.LocationId = sbd.LocationId AND usba.BankAccountId = sbd.BankAccountId
	INNER JOIN BankAccountSequence bas ON bas.LocationId = usba.LocationId AND bas.BankAccountId = usba.BankAccountId
	WHERE sbd.Type			=	'D' 
	AND s.CompanyId			=	@CompanyId 
	AND s.LocationId		=	@LocationID 
	AND s.SnDId				=	@DayBeforePreviousSNDID 
	AND sbd.ClearedSnDId	<=	@SNDID 
	AND s.RollbackDate		IS null
	--Exclude Redeposit Doc
	AND NOT EXISTS (SELECT	sbd2.SnDBankDocMovementId FROM SnDBankDocMovement sbd2 
					WHERE	sbd2.PaymentTransactionId=sbd.PaymentTransactionId
					AND     sbd2.LocationId = sbd.LocationId
					AND		sbd2.DepositedSnDId=sbd.LastSettlementSnDId)
	GROUP BY bas.IsDefault,s.ToDate
	
	INSERT INTO #SnDepositedChequeDetail
	SELECT 2,'LESS: CHQ. CLEARED',@DepositedDate,@TransactionDate, @DefaultBank, @OtherBank

----LESS: CHQS CLEARED - SAME BANK

--	SET		@DepositedDate		= Null
--	SET		@TransactionDate	= (SELECT todate FROM snd s WHERE s.CompanyId =@CompanyId  AND s.LocationId=@LocationId AND s.SnDId = @PreviousSNDID )
--	SET		@DefaultBank		= 0
--	SET		@OtherBank			= 0
			
--	SELECT	@DepositedDate		=   s.ToDate,
--			@DefaultBank		=	(CASE WHEN bas.IsDefault=1 THEN isnull(sum(isnull(sbd.Amount,0)),0) * -1   ELSE 0 END), 
--			@OtherBank			=	(CASE WHEN bas.IsDefault<>1 THEN isnull(sum(isnull(sbd.Amount,0)),0) * -1  ELSE 0 END)
--	FROM snd s 
--	inner JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.DepositedSnDId
--	INNER JOIN uv_SystemBankAccounts usba ON usba.LocationId = sbd.LocationId AND usba.BankAccountId = sbd.BankAccountId
--	INNER JOIN BankAccountSequence bas ON bas.LocationId = usba.LocationId AND bas.BankAccountId = usba.BankAccountId
--	WHERE sbd.Type = 'D' 
--	AND s.CompanyId=@CompanyId AND s.LocationId=@LocationID    AND s.RollbackDate IS null
--	AND s.SnDId = @DayBeforePreviousSNDID 
--	AND sbd.ClearedSnDId = @PreviousSNDID 
--	--Exclude Redeposit Doc
--	AND NOT EXISTS (SELECT	sbd2.SnDBankDocMovementId FROM SnDBankDocMovement sbd2 
--					WHERE	sbd2.PaymentTransactionId=sbd.PaymentTransactionId
--					AND		sbd2.DepositedSnDId=sbd.LastSettlementSnDId)
--	GROUP BY bas.IsDefault,s.ToDate
	
--	INSERT INTO #SnDepositedChequeDetail
--	SELECT 3,'LESS: CHQS CLEARED - SAME BANK',@DepositedDate,@TransactionDate, @DefaultBank, @OtherBank
	
	--CHQS RETURNED - TODAY snd
	
	SET		@DepositedDate		= Null
	SET		@TransactionDate	= (SELECT todate FROM snd s WHERE s.CompanyId =@CompanyId  AND s.LocationId=@LocationId AND s.SnDId = @SNDID )
	SET		@DefaultBank		= 0
	SET		@OtherBank			= 0
			
	SELECT	@DepositedDate		=   s.ToDate,
			@DefaultBank		=	(CASE WHEN bas.IsDefault=1 THEN isnull(sum(isnull(sbd.Amount,0)),0)    ELSE 0 END), 
			@OtherBank			=	(CASE WHEN isnull(bas.IsDefault,0)<>1 THEN isnull(sum(isnull(sbd.Amount,0)),0)  ELSE 0 END)
	FROM snd s 
	inner JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.DepositedSnDId
	INNER JOIN uv_SystemBankAccounts usba ON usba.LocationId = sbd.LocationId AND usba.BankAccountId = sbd.BankAccountId
	INNER JOIN BankAccountSequence bas ON bas.LocationId = usba.LocationId AND bas.BankAccountId = usba.BankAccountId
	WHERE sbd.Type = 'D' 
	AND s.CompanyId=@CompanyId AND s.LocationId=@LocationID    AND s.RollbackDate IS NULL 
	AND s.SnDId = @DayBeforePreviousSNDID 
	AND sbd.ReturnedSnDId <= @SNDID 
	--Exclude Redeposit Doc
	AND NOT EXISTS (SELECT	sbd2.SnDBankDocMovementId FROM SnDBankDocMovement sbd2 
					WHERE	sbd2.PaymentTransactionId=sbd.PaymentTransactionId
					AND     sbd2.LocationId = sbd.LocationId
					AND		sbd2.DepositedSnDId=sbd.LastSettlementSnDId)
	GROUP BY bas.IsDefault,s.ToDate

	INSERT INTO #SnDepositedChequeDetail
	SELECT 4,'LESS: CHQS RETURNED',@DepositedDate,@TransactionDate, @DefaultBank, @OtherBank
	
----LESS: CHQS ALREADY RETURNED - SAME BANK

--	SET		@DepositedDate		= Null
--	SET		@TransactionDate	= (SELECT todate FROM snd s WHERE s.CompanyId =@CompanyId  AND s.LocationId=@LocationId AND s.SnDId = @PreviousSNDID  )
--	SET		@DefaultBank		= 0
--	SET		@OtherBank			= 0
			
--	SELECT	@DepositedDate		=   s.ToDate,
--			@DefaultBank		=	(CASE WHEN bas.IsDefault=1 THEN isnull(sum(isnull(sbd.Amount,0)),0) * -1   ELSE 0 END), 
--			@OtherBank			=	(CASE WHEN bas.IsDefault<>1 THEN isnull(sum(isnull(sbd.Amount,0)),0) * -1  ELSE 0 END)
--	FROM snd s 
--	inner JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.DepositedSnDId
--	INNER JOIN uv_SystemBankAccounts usba ON usba.LocationId = sbd.LocationId AND usba.BankAccountId = sbd.BankAccountId
--	INNER JOIN BankAccountSequence bas ON bas.LocationId = usba.LocationId AND bas.BankAccountId = usba.BankAccountId
--	WHERE sbd.Type = 'D' 
--	AND s.CompanyId=@CompanyId AND s.LocationId=@LocationID    AND s.RollbackDate IS null
--	AND s.SnDId = @DayBeforePreviousSNDID 
--	AND sbd.ReturnedSnDId = @PreviousSNDID 
--	--Exclude Redeposit Doc
--	AND NOT EXISTS (SELECT	sbd2.SnDBankDocMovementId FROM SnDBankDocMovement sbd2 
--					WHERE	sbd2.PaymentTransactionId=sbd.PaymentTransactionId
--					AND		sbd2.DepositedSnDId=sbd.LastSettlementSnDId)
--	GROUP BY bas.IsDefault,s.ToDate		
	
--	INSERT INTO #SnDepositedChequeDetail
--	SELECT 5,'LESS: CHQS RETURNED - SAME BANK',@DepositedDate,@TransactionDate, @DefaultBank, @OtherBank
	
	--LESS: CHQS UNMARKED
	
	SET		@DepositedDate		= Null
	SET		@TransactionDate	= Null
	SET		@DefaultBank		= 0
	SET		@OtherBank			= 0
			
	SELECT	@DefaultBank		=	(CASE WHEN bas.IsDefault=1 THEN isnull(sum(isnull(sbd.Amount,0)),0)    ELSE 0 END), 
			@OtherBank			=	(CASE WHEN isnull(bas.IsDefault,0)<>1 THEN isnull(sum(isnull(sbd.Amount,0)),0)   ELSE 0 END)
	FROM snd s 
	inner JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.DepositedSnDId
	INNER JOIN uv_SystemBankAccounts usba ON usba.LocationId = sbd.LocationId AND usba.BankAccountId = sbd.BankAccountId
	INNER JOIN BankAccountSequence bas ON bas.LocationId = usba.LocationId AND bas.BankAccountId = usba.BankAccountId
	WHERE sbd.Type = 'D' 
	AND s.CompanyId=@CompanyId AND s.LocationId=@LocationID    AND s.RollbackDate IS null
	AND s.SnDId = @DayBeforePreviousSNDID 
	AND		(
			ISNULL(SBD.ClearedSnDId, @SNDID+1)	> @SNDID  
			and ISNULL(SBD.ReturnedSnDId,@SNDID+1) > @SNDID
			)
	--Exclude Redeposit Doc
	AND NOT EXISTS (SELECT	sbd2.SnDBankDocMovementId FROM SnDBankDocMovement sbd2 
					WHERE	sbd2.PaymentTransactionId=sbd.PaymentTransactionId
					AND     sbd2.LocationId = sbd.LocationId
					AND		sbd2.DepositedSnDId=sbd.LastSettlementSnDId)
	GROUP BY bas.IsDefault,s.ToDate	
	
	INSERT INTO #SnDepositedChequeDetail
	SELECT 6,'LESS: CHQS UNMARKED',@DepositedDate,@TransactionDate, @DefaultBank, @OtherBank
	
	
--GET DATA
	SELECT SortID,SourceReceipt,DepositedDate,TransactionDate,sum(isnull(DefaultBankAmount,0)) AS DefaultBank,sum(isnull(OtherBankAmount,0)) AS OtherBank 
	FROM #SnDepositedChequeDetail
	GROUP BY SortID,SourceReceipt,DepositedDate,TransactionDate
	
	----------------------------------------------------------------------------------------------------------------------------------------
-- END - BREAKUP OF DAY BEFORE PREV. DAY DEPOSITED CHQS
----------------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------------------------
-- BEGIN - ALL INCLEARING CHEQUES
----------------------------------------------------------------------------------------------------------------------------------------
	
	SET  @DepositedDate	= 	(SELECT todate FROM snd s WHERE s.CompanyId =@CompanyId  AND s.LocationId=@LocationId AND s.SnDId = @SNDID )

	SELECT	1 AS SORTID,
			'CHQS DEPOSITED ON:' AS SourceReceipt,
			S.ToDate AS Depositeddate,
			DefaultBank	=	(CASE WHEN bas.IsDefault=1 THEN isnull(sum(isnull(sbd.Amount,0)),0)   ELSE 0 END), 
			OtherBank	=	(CASE WHEN isnull(bas.IsDefault,0)<>1 THEN isnull(sum(isnull(sbd.Amount,0)),0)   ELSE 0 END)
	FROM snd s 
	inner JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.DepositedSnDId
	left JOIN uv_SystemBankAccounts usba ON usba.LocationId = sbd.LocationId AND usba.BankAccountId = sbd.BankAccountId
	left JOIN BankAccountSequence bas ON bas.LocationId = usba.LocationId AND bas.BankAccountId = usba.BankAccountId
	WHERE sbd.Type = 'D' 
	AND s.CompanyId=@CompanyId AND s.LocationId=@LocationID   AND s.RollbackDate IS NULL  AND s.SnDId  <= @SNDID
	AND		
	(
			ISNULL(SBD.ClearedSnDId, @SNDID+1)	> @SNDID  
			and ISNULL(SBD.ReturnedSnDId,@SNDID+1) > @SNDID
	)
	AND s.ToDate > @DepositedDate - 3
	--Exclude Redeposit Doc
	--AND NOT EXISTS (SELECT	sbd2.SnDBankDocMovementId FROM SnDBankDocMovement sbd2 
	--				WHERE	sbd2.PaymentTransactionId=sbd.PaymentTransactionId
	--				AND     sbd2.LocationId = sbd.LocationId
	--				AND		sbd2.DepositedSnDId=sbd.LastSettlementSnDId)
	AND sbd.SnDBankDocMovementId NOT IN 
	(
		SELECT	sbd2.SnDBankDocMovementId 
        FROM SnDBankDocMovement sbd2 
		WHERE sbd2.LocationId = sbd.LocationId
		AND	sbd2.DepositedSnDId=sbd.LastSettlementSnDId
		AND	sbd2.RefSnDBankDocMovementId IS NOT NULL 
	)
	GROUP BY s.ToDate,bas.IsDefault	
	
	
	UNION ALL
	
	
	SELECT  2 AS SORTID,
			'CHQS DEPOSITED LESS THEN:' AS SourceReceipt,
			@DepositedDate AS Depositeddate,
			DefaultBank	=	(CASE WHEN bas.IsDefault=1 THEN isnull(sum(isnull(sbd.Amount,0)),0)   ELSE 0 END), 
			OtherBank	=	(CASE WHEN isnull(bas.IsDefault,0)<>1 THEN isnull(sum(isnull(sbd.Amount,0)),0)   ELSE 0 END)
	FROM snd s 
	inner JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.DepositedSnDId
	left JOIN uv_SystemBankAccounts usba ON usba.LocationId = sbd.LocationId AND usba.BankAccountId = sbd.BankAccountId
	left JOIN BankAccountSequence bas ON bas.LocationId = usba.LocationId AND bas.BankAccountId = usba.BankAccountId
	WHERE sbd.Type = 'D' 
	AND s.CompanyId=@CompanyId AND s.LocationId=@LocationID  AND s.RollbackDate IS NULL   AND s.SnDId  <= @SNDID
	AND		
	(
			ISNULL(SBD.ClearedSnDId, @SNDID+1)	> @SNDID  
			and ISNULL(SBD.ReturnedSnDId,@SNDID+1) > @SNDID
	)
	AND s.ToDate < @DepositedDate - 4
	--Exclude Redeposit Doc
	--AND NOT EXISTS 
	--(
	--	SELECT	sbd2.SnDBankDocMovementId FROM SnDBankDocMovement sbd2 
	--	WHERE	
	--	sbd2.PaymentTransactionId=sbd.PaymentTransactionId
	--	AND sbd2.LocationId = sbd.LocationId
	--	AND		sbd2.DepositedSnDId=sbd.LastSettlementSnDId
	--)
	AND sbd.SnDBankDocMovementId NOT IN 
	(
		SELECT	sbd2.SnDBankDocMovementId 
        FROM SnDBankDocMovement sbd2 
		WHERE sbd2.LocationId = sbd.LocationId
		AND	sbd2.DepositedSnDId=sbd.LastSettlementSnDId
		AND	sbd2.RefSnDBankDocMovementId IS NOT NULL 
	)
					
	GROUP BY bas.IsDefault	
	ORDER BY SORTID ,Depositeddate desc
	
	DROP TABLE #SnDReconciliation
	DROP TABLE #SnDRemittance
	DROP TABLE #TempSnDCollection
	DROP TABLE #TempBankBalance
	DROP TABLE #TempSnDOpeningBalance
	DROP TABLE #SnDDebitAdvice
	DROP TABLE #SnDepositedChequeDetail
 GO 
SELECT *--max(LEN(p.[Name])) 
FROM Product p 
WHERE p.ProductId = 2406

UPDATE product SET [Name] =  [Name] + '1234567890'
WHERE ProductId = 2406  
 GO 
SELECT
				usso.LocationId,
				usso.PrincipalBusinessLineId,
				usso.ProductId,
				--Case When @SalesCriteria  = 0 then SUM(usso.SoldQuantity) 
				--     When @SalesCriteria  = 1 then SUM(usso.SoldQuantity)
				--     When @SalesCriteria  = 2 then 0 END 
				--AS [Quantity],
				usso.SalePassDate AS [Date],
				pc.PP,				
				pc.TP
			FROM uv_Sales_SaleOrder usso 
			INNER JOIN PriceCatalog pc ON usso.PriceId = pc.PriceCatalogId
		
			--INNER JOIN   DBO.Split(@ProductIds, ',') Product ON  (Product.Data = usso.ProductId OR @ProductIds = '')
			--INNER JOIN   DBO.Split(@PBLIds, ',') PBL ON  (PBL.Data = usso.PrincipalBusinessLineId OR @PBLIds = '')
			--INNER JOIN   DBO.Split(@LocationIds, ',') Location ON  (Location.Data = usso.LocationId OR @LocationIds = '')
			--WHERE 
			--(  @SelectAll = 0	  
			-- OR  (@SelectAll = 1 AND ( DATEDIFF(DAY, usso.SalePassDate,  @FromDate) = 0 ))
			-- OR  (@SelectAll = 2 AND ( DATEDIFF(DAY, usso.SalePassDate,  @FromDate) <= 0 AND DATEDIFF(day, usso.SalePassDate, @ToDate) >= 0 ))   
			--) AND usso.IsRollbacked = 0
		  --  GROUP BY 
				--usso.LocationId,
				--usso.PrincipalBusinessLineId,
				--usso.ProductId,
				--usso.SalePassDate,
				--pc.PP,
				
				usp_Report_GrossSaleAndMargin
				--pc.TP
 GO 
DECLARE @PrincipalTeamIds varchar(max),
		@SalesForce  varchar(max),
		@PBLIds  varchar(max),
		@Locations  varchar(max),
		@IsTemporary bit,
		@IsShopSale bit,
		@IsUnTagg bit,       		        
		@FromDate datetime,
		@ToDate datetime 
SET @PrincipalTeamIds =''--'36,32,33,34,35'
SET @SalesForce = ''--'4,26,28,73,75,95,96,102,108,113,116,118,119,141,146,153,181,196,199,205,11,18,45,47,53,57,66,78,89,93,122,130,133,158,164,171,179,188,191,206,1,12,14,16,34,36,58,63,87,91,120,123,145,170,186,197,202,208,210,219,2,22,27,35,46,49,67,70,107,126,131,134,135,144,149,177,180,182,216,217,'
SET @PBLIds='28,55'
SET @Locations='14'
SET @IsTemporary = 1
SET @IsShopSale = 1
SET @IsUnTagg = 1
SET @FromDate = '2013-11-23 00:00:00.000'
SET @ToDate = '2013-11-26 00:00:00.000'

SELECT 
	L.Name AS [Location Name],
	P.PBLSequenceId,
	P.[Principal Business Line], 
	P.DeliveryChallanId,
	P.PrincipalTeamId,
	P.[Principal Team],
	P.ProductId, 
	P.[Product Name],
	P.ProductSequence,
	P.[SoldQuantity],
	P.[Value],
	P.FFId,
	P.FFName,
	P.FFName AS [FFSeq],
	P.LocationId
	INTO #Temp
FROM 
(
	SELECT upbla.PBLSequenceId,upbla.Name AS [Principal Business Line],SOPROD.DeliveryChallanId, 
	       TeamProduct.PrincipalTeamId,TeamProduct.[Principal Team],
		   TeamProduct.ProductId, 
		   up.ShortName AS [Product Name],up.ProductSequence,
		   SUM(ISNULL(SOProd.SoldQuantity,0)) AS [SoldQuantity],
		   SUM(ISNULL(SOProd.SoldQuantity,0) * ISNULL(SOProd.TP,0)) AS [Value],
		   SOProd.FFId,
		   SOProd.FFName,
		   SOProd.FFName AS [FFSeq],
		   LocationId
	FROM   
	(
		 SELECT  ptp.PrincipalTeamProductId, ptp.PrincipalTeamId,ptt.ShortName AS [Principal Team],
		 ptp.ToBeDeleted,ptp.ProductId
		 FROM PrincipalTeamProduct ptp
		 INNER JOIN PrincipalTeam ptt ON ptt.PrincipalTeamId = ptp.PrincipalTeamId
		 INNER JOIN   DBO.Split(@PrincipalTeamIds, ',' ) PT ON ( PT.Data = ptp.PrincipalTeamId OR @PrincipalTeamIds = '' )         
		 WHERE  ptp.ToBeDeleted = 0          
		 AND DATEDIFF(day, ptt.EffectiveDate,GETDATE())>= 0
		 AND  DATEDIFF(day,GETDATE(), isnull( ptt.EndDate,GETDATE()+1))> 0
	)  TeamProduct
	LEFT JOIN 
	(
			SELECT so.LocationId,so.DeliveryChallanId, so.SaleOrderId,so.SalePassDate, so.IsCash, st.Code AS [Sale Type], sop.ProductId, 
			sop.SoldQuantity, so.CustomerId, sfo.PrincipalTeamId, sop.tp AS [TP],
			( CASE  WHEN st.Code = 'SHP' THEN -1 WHEN c.IsTemporary = 1 THEN -2 ELSE ISNULL(sfo.SalesForceId,-3) END ) AS FFId,
			( CASE  WHEN st.Code = 'SHP' THEN 'SHOP' WHEN c.IsTemporary = 1 THEN 'NEW' ELSE ISNULL(sfo.[FieldForceName],'UNTAG') END ) AS FFName,
			st.Code,
			c.IsTemporary
			FROM   SaleOrder so
			INNER JOIN DBO.Split(@Locations, ',' ) Loc ON   ( Loc.Data = so.LocationId OR @Locations = '' )
			INNER JOIN  SaleType st ON   so.SaleTypeId = st.SaleTypeId
			INNER JOIN  Customer c ON   ( c.CustomerId = so.CustomerId AND   c.LocationId = so.LocationId )
			INNER JOIN  SaleOrderProduct sop ON   ( sop.LocationId = so.LocationId AND   sop.SaleOrderId = so.SaleOrderId  AND sop.EndDate IS NULL )
			LEFT JOIN  
			(
				SELECT DISTINCT sfc.LocationId, sfc.CustomerId, sfc.PrincipalTeamId, sf.SalesForceId, sf.ShortName [FieldForceName],ptp.ProductId
				FROM SalesForceCustomer sfc
				INNER JOIN SalesForce sf ON sf.LocationId = sfc.LocationId
				AND sf.SalesForceId = sfc.SalesForceId
				INNER JOIN PrincipalTeam ptt ON ptt.PrincipalTeamId=sf.PrincipalTeamId
				INNER JOIN PrincipalTeamProduct ptp ON ptt.PrincipalTeamId=ptp.PrincipalTeamId AND ptp.ToBeDeleted=0			
				INNER JOIN DBO.Split(@PrincipalTeamIds, ',' ) PT ON ( PT.Data = sfc.PrincipalTeamId OR @PrincipalTeamIds = '' )  		 
				INNER JOIN DBO.Split(@SalesForce, ',' ) ff ON   ( ff.Data = sfc.SalesForceId OR @SalesForce = '' )	
				INNER JOIN DBO.Split(@Locations, ',' ) Loc ON   ( Loc.Data = sf.LocationId OR @Locations = '' )
				
				WHERE sfc.ToBeDeleted = 0
				    /*AND DATEDIFF(day, sf.EffectiveDate,ISNULL(@FromDate,GETDATE()))>= 0
					AND  DATEDIFF(day,ISNULL(@ToDate,GETDATE()), isnull( sf.EndDate,@ToDate+1))> 0*/
					AND DATEDIFF(day, sf.EffectiveDate,GETDATE())>= 0
					AND  DATEDIFF(day,GETDATE(), isnull( sf.EndDate,GETDATE()+1))> 0					  	
					AND DATEDIFF(day, ptt.EffectiveDate,GETDATE())>= 0
					AND  DATEDIFF(day,GETDATE(), isnull( ptt.EndDate,GETDATE()+1))> 0
					
			) SFO
			ON ( SFO.LocationId = so.LocationId AND SFO.Customerid = so.CustomerId  AND sop.ProductId=SFO.ProductId)
			WHERE   (DATEDIFF(DAY,so.SalePassDate,  @FromDate) <= 0 AND  DATEDIFF(DAY,so.SalePassDate,  @ToDate) >= 0)				   
			AND
			(
					(@IsTemporary = 1	OR (@IsTemporary = 0	AND  c.IsTemporary = 0))
				AND (@IsShopSale = 1	OR (@IsShopSale = 0		AND  st.Code <> 'SHP')	)
				AND (@IsUnTagg = 1		OR (@IsUnTagg = 0		AND  sfo.PrincipalTeamId IS NOT NULL))
			)
			
	) SOProd ON TeamProduct.ProductId = SOProd.ProductId 
	AND (TeamProduct.PrincipalTeamId = SOProd.PrincipalTeamId OR SOProd.PrincipalTeamId IS NULL)	
	INNER JOIN   uv_Product up ON   TeamProduct.ProductId = up.ProductId
    INNER JOIN uv_PrincipalBusinessLine_All upbla ON upbla.PrincipalBusinessLineId = up.PrincipalBusinessLineId   
    INNER JOIN   DBO.Split(@PBLIds, ',' ) PBL ON   ( PBL.Data = up.PrincipalBusinessLineId OR @PBLIds = '' )
     	
	GROUP BY
	upbla.PBLSequenceId,upbla.Name,
	SOPROD.DeliveryChallanId,
	SOProd.FFId, SOProd.FFName,
	TeamProduct.PrincipalTeamId,
	TeamProduct.[Principal Team],
	up.ProductSequence,
	TeamProduct.ProductId, 
	up.ShortName,
	SOProd.CustomerId,SOProd.LocationId


	UNION ALL

	SELECT upbla.PBLSequenceId,upbla.Name AS [Principal Business Line],so.DeliveryChallanId,99999 AS PrincipalTeamId,
	[Product].[Principal Team], [Product].ProductId,[Product].Name ,[Product].ProductSequence,
	sum(sop.SoldQuantity) AS [SoldQuantity],
	sum(sop.SoldQuantity*sop.TP) AS [Amount],
	( CASE  WHEN st.Code = 'SHP' THEN -1 WHEN c.IsTemporary = 1 THEN -2 ELSE ISNULL(sf.SalesForceId,-3) END ) AS FFId,
	( CASE  WHEN st.Code = 'SHP' THEN 'SHOP' WHEN c.IsTemporary = 1 THEN 'NEW' ELSE ISNULL(sf.Name,'UNTAG') END ) AS FFName,
	( CASE  WHEN st.Code = 'SHP' THEN 'SHOP' WHEN c.IsTemporary = 1 THEN 'NEW' ELSE ISNULL(sf.Name,'UNTAG') END ) AS FFSeq	
	,SO.LocationId
	FROM 
	(
		SELECT up.ProductId, 
		up.Name,
		isnull(up.ProductSequence,99999) AS ProductSequence,
		ISNULL(pt.ShortName,'UNTAGGED PRODUCT') AS [Principal Team],
		up.PrincipalBusinessLineId,pt.PrincipalTeamId
		FROM uv_Product up
		LEFT OUTER JOIN PrincipalTeamProduct ptp ON ptp.ProductId = up.ProductId AND ptp.ProductSequence = up.ProductSequence
		AND ptp.ToBeDeleted = 0
		LEFT OUTER JOIN PrincipalTeam pt ON pt.PrincipalTeamId = ptp.PrincipalTeamId			
	   -- AND DATEDIFF(day, pt.EffectiveDate,ISNULL(@FromDate,GETDATE()))>= 0
	    --AND  DATEDIFF(day,ISNULL(@ToDate,GETDATE()), isnull( pt.EndDate,@ToDate+1))> 0	  
	     AND DATEDIFF(day, pt.EffectiveDate,GETDATE())>= 0
		 AND  DATEDIFF(day,GETDATE(), isnull( pt.EndDate,GETDATE()+1))> 0
		WHERE pt.PrincipalTeamId IS NULL	  
	) AS [Product] 
	INNER JOIN SaleOrderProduct sop ON Product.ProductId=sop.ProductId /*AND sop.EndDate IS NULL*/
	INNER JOIN SaleOrder so ON (so.SaleOrderId = sop.SaleOrderId AND so.LocationId = sop.LocationId)
	INNER JOIN SaleType st ON st.SaleTypeId=so.SaleTypeId
	INNER JOIN Customer c ON   ( c.CustomerId = so.CustomerId AND   c.LocationId = so.LocationId )
	INNER JOIN   DBO.Split(@Locations, ',' ) Loc ON   ( Loc.Data =so.LocationId OR @Locations = '' )
	LEFT OUTER  JOIN   SalesForceCustomer sfc ON   ( sfc.LocationId = so.LocationId AND   sfc.Customerid = so.CustomerId 
	AND sfc.ToBeDeleted=0 AND sfc.SalesForceCustomerId IS  null)
	LEFT OUTER JOIN   SalesForce sf ON   ( sf.LocationId = sfc.LocationId AND   sf.SalesForceId = sfc.SalesForceId )
	--INNER JOIN   DBO.Split(@SalesForce, ',' ) ff ON   ( ff.Data = sfc.SalesForceId OR @SalesForce = '' )
   INNER JOIN uv_PrincipalBusinessLine_All upbla ON upbla.PrincipalBusinessLineId =  [Product].PrincipalBusinessLineId
   INNER JOIN   DBO.Split(@PBLIds, ',' ) PBL ON   ( PBL.Data = [Product].PrincipalBusinessLineId OR @PBLIds = '' )
    	
    WHERE    
    (DATEDIFF(DAY,so.SalePassDate,  @FromDate) <= 0 
	AND  DATEDIFF(DAY,so.SalePassDate,  @ToDate) >= 0)			      
    AND
		(
			(@IsTemporary=0 OR (@IsTemporary=1 AND c.IsTemporary=1))
		 OR (@IsShopSale=0 OR (@IsShopSale=1 AND st.Code='SHP'))
		 OR (@IsUnTagg=0 OR (@IsUnTagg=1 AND sfc.SalesForceCustomerId IS NULL))		 		
		)
		
	GROUP BY
		upbla.PBLSequenceId,
		upbla.Name,
		SO.DeliveryChallanId,
		[Product].[Principal Team], 
		[Product].ProductId,
		[Product].Name ,
		[Product].ProductSequence,
		st.Code,
		c.IsTemporary,
		sf.Name,
		sf.SalesForceId,
		SO.LocationId
		
	HAVING 
		sum(sop.SoldQuantity)>0 

)AS P
INNER JOIN Location l ON l.LocationId=P.LocationId
	


SELECT 
DISTINCT
IDENTITY(INT, 1,1) Id,
PrincipalTeamId,
[Principal Team]
INTO #tblLoop
FROM #Temp t

DECLARE @Count INT, @QUERY VARCHAR(max), @PrincipalTeam VARCHAR(50), 
@colFF VARCHAR(MAX),@colFFNonZeroQty VARCHAR(MAX),@colFFZeroQty VARCHAR(MAX)
,@PvtSummary VARCHAR(MAX)
,@PvtSummaryThousand VARCHAR(MAX)
,@colTQty varchar(max),@colSUMTQty varchar(max)

SET @Count = 1
WHILE @Count <= (SELECT COUNT(*) FROM #tblLoop)
	BEGIN
		
		SET @PrincipalTeam = (SELECT [Principal Team] FROM #tblLoop WHERE Id = @Count)	   			
		SET @colFF =
		ISNULL(( 
			SELECT DISTINCT '['+FFName + '], '
			FROM #tblLoop L 
			INNER JOIN #TEMP T ON l.PrincipalTeamId = t.PrincipalTeamId
			WHERE Id = @Count
			AND FFName NOT IN ('SHOP', 'NEW', 'UNTAG')
			FOR XML PATH('' ) 
		),'')
		SET @colFF = @colFF + ' [SHOP], [NEW], [UNTAG]'		
	
		SET @colFFNonZeroQty = 
		ISNULL(( 
			SELECT DISTINCT '['+FFName + '], 0 [' + FFName + ' Value], ' 
			FROM #tblLoop L 
			INNER JOIN #TEMP T ON l.PrincipalTeamId = t.PrincipalTeamId
			WHERE Id = @Count
			AND FFName NOT IN ('SHOP', 'NEW', 'UNTAG')
			FOR XML PATH('' ) 
		),'')                            
		SET @colFFNonZeroQty =@colFFNonZeroQty + ' [SHOP], 0 [SHOP Value], [NEW], 0 [NEW Value], [UNTAG], 0 [UNTAG Value]'
				
		SET @colFFZeroQty = 
		ISNULL(( 
			SELECT DISTINCT '0 ['+FFName + '], ['+FFName + '] [' + FFName + ' Value], ' 
			FROM #tblLoop L 
			INNER JOIN #TEMP T ON l.PrincipalTeamId = t.PrincipalTeamId
			WHERE Id = @Count
			AND FFName NOT IN ('SHOP', 'NEW', 'UNTAG')
			FOR XML PATH('' ) 
		),'')                            
		SET @colFFZeroQty = @colFFZeroQty + ' 0 [SHOP], [SHOP] [SHOP Value], 0 [NEW], [NEW] [NEW Value], 0 [UNTAG], [UNTAG] [UNTAG Value]'
		
		SET @PvtSummary = 
		ISNULL(( 
			SELECT DISTINCT 'SUM(['+FFName + ']) AS ['+FFName + '],' 
			FROM #tblLoop L 
			INNER JOIN #TEMP T ON l.PrincipalTeamId = t.PrincipalTeamId
			WHERE Id = @Count
			AND FFName NOT IN ('SHOP', 'NEW', 'UNTAG')
			FOR XML PATH('' ) 
		),'')              
		SET @PvtSummary = @PvtSummary+ ' ISNULL(SUM([SHOP]),0) [SHOP], ISNULL(SUM([NEW]),0) [NEW], ISNULL(SUM([UNTAG]),0) [UNTAG]'
	
		SET @PvtSummaryThousand = 
		ISNULL(( 
			SELECT DISTINCT 'SUM(['+FFName + '])/1000 AS ['+FFName + '],' 
			FROM #tblLoop L 
			INNER JOIN #TEMP T ON l.PrincipalTeamId = t.PrincipalTeamId
			WHERE Id = @Count
			AND FFName NOT IN ('SHOP', 'NEW', 'UNTAG')
			FOR XML PATH('' ) 
		),'')              
			
		SET @PvtSummaryThousand =@PvtSummaryThousand + ' SUM([SHOP])/1000 [SHOP], SUM([NEW])/1000 [NEW], SUM([UNTAG])/1000 [UNTAG]'		
		
		SET @colSUMTQty = 'SUM(' +
		ISNULL(( 
			SELECT DISTINCT + 'ISNULL(['+ FFName + '],0)+ ' 
			FROM #tblLoop L 
			INNER JOIN #TEMP T ON l.PrincipalTeamId = t.PrincipalTeamId
			WHERE Id = @Count
			AND FFName NOT IN ('SHOP', 'NEW', 'UNTAG')
			FOR XML PATH('' ) 
		),'')                            
		SET @colSUMTQty = @colSUMTQty+ ' ISNULL([SHOP],0)+ ISNULL([NEW],0)+ ISNULL([UNTAG],0)' + ')'
	
		SET @colTQty =
		ISNULL(( 
			SELECT DISTINCT + 'ISNULL(['+ FFName + '],0)+ ' 
			FROM #tblLoop L 
			INNER JOIN #TEMP T ON l.PrincipalTeamId = t.PrincipalTeamId
			WHERE Id = @Count
			AND FFName NOT IN ('SHOP', 'NEW', 'UNTAG')
			FOR XML PATH('' ) 
		),'')                            
		SET @colTQty = @colTQty+ ' ISNULL([SHOP],0)+ ISNULL([NEW],0)+ ISNULL([UNTAG],0)'
		
					
		SET @QUERY = 
		(
		'		
		 SELECT * 
		 FROM
		 (			
		 SELECT A.[Location Name],A.DeliveryChallanId, A.ProductSequence ,A.PrincipalTeamId,A.[Principal Team], A.[Code],A.[Product Name],'+@PvtSummary+', SUM(A.[T.QTY]) [T.QTY], SUM(A.[T.VALUE]) [T.VALUE]
		 FROM
		 (
			SELECT [Location Name],st.DeliveryChallanId,PrincipalTeamId,''Team: '+ @PrincipalTeam +''' AS [Principal Team], ProductSequence , ProductId [Code], [Product Name], '+@colFFNonZeroQty+', '+@colTQty+' AS [T.QTY],0 AS [T.VALUE]
			FROM
			(
				SELECT t.[Location Name],t.DeliveryChallanId,t.PrincipalTeamId,
					   t.[Principal Business Line], CONVERT(char(11),t.ProductId) as [ProductId],t.[Product Name],  
					   T.FFName, ISNULL(SoldQuantity,0) as [SoldQuantity] ,
					   T.ProductSequence
				FROM #tblLoop L 
				INNER JOIN #TEMP T ON l.PrincipalTeamId = t.PrincipalTeamId
				WHERE Id = ' + CONVERT(VARCHAR(10), @Count) + '
			)ST
			PIVOT
			(SUM(SOLDQUANTITY) FOR FFName IN ('+@colFF+')) AS PVT
			
			UNION ALL
			
			SELECT [Location Name],st.DeliveryChallanId,,PrincipalTeamId,''Team: '+ @PrincipalTeam +''' AS [Principal Team], ProductSequence , ProductId [Code], [Product Name], '+@colFFZeroQty+', 0 AS [T.QTY], '+@colTQty+' AS [T.VALUE]
			FROM
			(
				SELECT t.[Location Name],t.PrincipalTeamId,
					   t.[Principal Business Line],t.DeliveryChallanId, CONVERT(char(11),t.ProductId) as [ProductId],t.[Product Name],  
					   T.FFName, ISNULL(Value,0) as [Value], 
					   T.ProductSequence
				FROM #tblLoop L 
				INNER JOIN #TEMP T ON l.PrincipalTeamId = t.PrincipalTeamId
				WHERE Id = ' + CONVERT(VARCHAR(10), @Count) + '
			)ST
			PIVOT
			(SUM(Value) FOR FFName IN ('+@colFF+')) AS PVT		
		 ) AS [A]
		 GROUP BY
		 A.[Location Name],A.PrincipalTeamId,A.[Principal Team], A.[Code],A.[Product Name] , A.ProductSequence
		 		 
		 )SA
		 
		 UNION ALL
	
		SELECT [Location Name],st.DeliveryChallanId 99999 ProductSequence ,99999 AS PrincipalTeamId,'''' AS [Principal Team],'''' as  [Code],''Team: '+ @PrincipalTeam +' VALUES(''''000)'' AS [Product Name], '+@PvtSummaryThousand+', 0 AS [T.QTY], '+@colSUMTQty+' AS [T.VALUE]
		FROM
		(
			SELECT t.[Location Name], t.PrincipalTeamId,
				   t.[Principal Business Line],t.DeliveryChallanId, CONVERT(char(11),t.ProductId) as [ProductId],t.[Product Name],  
				   T.FFName, ISNULL(Value,0) as [Value] ,
				   T.ProductSequence
			FROM #tblLoop L 
			INNER JOIN #TEMP T ON l.PrincipalTeamId = t.PrincipalTeamId
			WHERE Id = ' + CONVERT(VARCHAR(10), @Count) + '
			
		)ST
		
		PIVOT
		(SUM(Value) FOR FFName IN ('+@colFF+')) AS PVT
		GROUP BY [Location Name]
		Order by  ProductSequence
		 '
		)
				
		BEGIN TRY
			EXEC (@QUERY)			
		END TRY		
		BEGIN CATCH
			PRINT ('eRROR')
			PRINT (@QUERY)
		END CATCH
			
		
		SET @Count = @Count + 1	
	  	
	END				
	
--DROP TABLE #tblLoop					
--DROP TABLE #Temp
SELECT a.DeliveryChallanId,sum(a.SoldQuantity) AS [R59 Quantity]--SUM(a.SoldQuantity) 
FROM #TEMP a WHERE a.ProductId = 14 AND PrincipalTeamId <> 99999
GROUP BY a.DeliveryChallanId
--AND a.DeliveryChallanId IN  

SELECT so.DeliveryChallanId,SUM(sop.SoldQuantity) AS [DC Quantity]
FROM dbo.SaleOrder so INNER JOIN dbo.SaleOrderProduct sop ON so.LocationId = sop.LocationId AND so.SaleOrderId = sop.SaleOrderId
--GROUP BY so.DeliveryChallanId
WHERE (DATEDIFF(DAY,so.SalePassDate,  '2013/11/23') <= 0 AND  DATEDIFF(DAY,so.SalePassDate,  '2013/11/26') >= 0) AND sop.ProductId = 14 AND sop.SoldQuantity>0
GROUP BY so.DeliveryChallanId
 GO 
DECLARE @PBLIds varchar(1000), @LocationIds varchar(1000), @RecLocationIds varchar(1000),
		@SelectAll int,@FromDate datetime,@ToDate datetime, 
		@TRSelectAll int,@TRFromDate datetime,@TRToDate datetime,
		@SelectAllDoc int,@DocRange  varchar(50),@FromDoc int,@ToDoc int, 
		@TOStatus  varchar(5),
		@Status  varchar(5),
		@IsCombineCorrection bit 

SET @PBLIds = '4'
SET @LocationIds = '11,14,29,17,19,21,28,23,12,38,26,42,15,35,18,37,43,30,36,22,24,44,13,32,27,16'
SET @RecLocationIds = '11,14,29,17,19,21,28,23,12,38,26,42,15,35,18,37,43,30,36,22,24,44,13,32,27,16'
SET @SelectAll=0
SET @FromDate = '2013-11-01 '
SET @ToDate = '2013-11-30 '
SET @TRSelectAll=0
SET @TRFromDate = '2013-11-01'
SET @TRToDate = '2013-12-31'
SET @SelectAllDoc=2
SET @DocRange='162'
SET @FromDoc = '162'
SET @ToDoc = '247' 
SET @TOStatus = 'AP'
SET @Status = ''
SET @IsCombineCorrection = 1

SELECT * FROM TransferOut to1
INNER JOIN   (
           SELECT to1.LocationId,
                  to1.TransferOutId,
                  to1.ReferenceTransferOutId
           FROM   TransferOut to1
           INNER JOIN   DBO.Split(@LocationIds, ',' ) LOC
             ON   (
                      LOC.Data = to1.LocationId OR @LocationIds = ''
                  )
           INNER JOIN   DBO.Split(@RecLocationIds, ',' ) RecLOC
             ON   (
                      RecLOC.Data = to1.ToLocationId OR @RecLocationIds = ''
                  )
           INNER JOIN   DBO.Split(@PBLIds, ',' ) PBL
             ON   (
                      PBL.Data = to1.PrincipalBusinessLineId 
                      OR @PBLIds = ''
                  )
           WHERE 
               (
                      @TOStatus = '' 
					OR (@TOStatus='AP' AND to1.IsRollbacked=0)
					OR (@TOStatus='P' AND to1.IsApproved=0 AND to1.IsRollbacked=0)
					OR (@TOStatus='A' AND to1.IsApproved=1 AND to1.IsRollbacked=0)
					OR (@TOStatus='R' AND to1.IsApproved=0 AND to1.IsRollbacked=1)
                )
            AND (
                      @Status = ''
                  OR  (
                          @Status = 'R'
                     AND  To1.TransferOutId IS NOT 
                     NULL
                      )
                  OR  (
                          @Status = 'I'
                     AND  To1.TransferOutId IS  NULL
                      )
                  OR  (
                          @Status = 'P'
                     AND  to1.TREntryDate IS NULL
                      )
               ) 
           	AND (
					   @SelectAll = 0
				   OR  (
						   @SelectAll = 1 AND  ( DATEDIFF(DAY, to1.TransactionDate,  @FromDate) = 0 /* only FOR one day*/)
					   )
				   OR  (
						   @SelectAll = 2 AND   
							(
								DATEDIFF(DAY, to1.TransactionDate,  @FromDate) <= 0
								AND 
								(
									(@IsCombineCorrection = 1 AND to1.ReferenceTransferOutId IS NOT NULL) 
									OR   datediff (day,to1.TransactionDate, @ToDate) >= 0
								)
							)  				
					   )   
				)    
			AND (
					   @TRSelectAll = 0
				   OR  (
						   @TRSelectAll = 1
					  AND  ( DATEDIFF(DAY,to1.TREntryDate,  @TRFromDate) = 0 /* only FOR one day*/)
					   )
				   OR  (
						   @TRSelectAll = 2
						   AND  (DATEDIFF(DAY,to1.TREntryDate,  @TRFromDate) <= 0AND  DATEDIFF(DAY,to1.TREntryDate,  @TRToDate) >= 0)										
					   )   
				)      			
			AND (
					   @SelectAllDoc = 0 
				   OR (
						@SelectAllDoc = 1 AND  to1.TransferOutId IN (SELECT S.DATA FROM   DBO.Split(@DocRange, ',') S)
					  )
					OR(
					  @SelectAllDoc = 2 AND ( (@FromDoc = '0'OR to1.TransferOutId>= @FromDoc) AND  (@ToDoc = '0' OR to1.TransferOutId <= @ToDoc))
					  )
				)            
       ) AS RefTI
  ON   (
           (
               to1.TransferOutId = RefTI.TransferOutId OR( @IsCombineCorrection = 1 
               AND   to1.ReferenceTransferOutId = RefTI.TransferOutId )
           )AND   to1.LocationId = RefTI.LocationId
  )
WHERE (ISNULL(RefTI.ReferencetransferOutId, 0) = CASE WHEN (@IsCombineCorrection  = 1) THEN  0 ELSE 1 END) 
   OR  
   (ISNULL(RefTI.ReferencetransferOutId, 1) > CASE WHEN (@IsCombineCorrection  = 0) THEN  0 ELSE (refti.transferoutid) END)
  -- AND RefTI.ReferenceTransferOutId IS  NULLIF(@IsCombineCorrection = 1)
  --AND ASE WHEN (@IsCombineCorrection  = 1) THEN refti.referencetransferoutid IS null ELSE refti.referencetransferoutid END 
 GO 
--CREATE   PROCEDURE dbo.usp_UDLSalesForce_ByStatus @IsBooker bit,@IsSupplier bit,@Status varchar(100) AS  

DECLARE @IsBooker bit,@IsSupplier bit,@LocationId  varchar(100) ,@Status varchar(100)  
SET @IsBooker=1  
SET @IsSupplier=1
SET @LocationId='14'  
SET @Status=''  
  
SELECT DISTINCT uf.UDLSalesForceId, uf.Name  
FROM   UDLSalesForceCategoryTagging ufct  
INNER JOIN UDLSalesForce uf ON uf.UDLSalesForceId = ufct.UDLSalesForceId  
INNER JOIN UDLSalesForceCategory ufc ON ufc.UDLSalesForceCategoryId = ufct.UDLSalesForceCategoryId  
INNER JOIN  DBO.Split(@LocationId, ',') Loc ON  (Loc.Data = uf.LocationId OR @LocationId = '')
WHERE (((@IsBooker=1 AND ufc.IsBooker = @IsBooker )OR (@IsSupplier=1 AND  ufc.IsSupplier=@IsSupplier)) OR ufct.UDLSalesForceCategoryId IN (8,9))
AND   @Status = ''  
   OR  (  
           @Status = '0'  
      AND  DATEDIFF(day,uf.EffectiveDate,GETDATE())>= 0  
      AND  DATEDIFF(day,GETDATE(),ISNULL(uf.EndDate, GETDATE()+1))>0  
      AND  DATEDIFF(day,ufct.EffectiveDate,GETDATE())>= 0  
      AND  DATEDIFF(day,GETDATE(),ISNULL(ufct.EndDate,GETDATE()+1))>0  
       )  
   OR  (  
           @Status = '1'  
      AND  DATEDIFF(day,uf.EndDate,ISNULL(GETDATE(), GETDATE()+1))>0          
  AND  DATEDIFF(day,GETDATE(),ISNULL(ufct.EndDate,GETDATE()+1))>0  
   )  
     
ORDER BY uf.Name

 GO 

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'usp_Insert_BankAccountSequence')AND type in (N'P', N'PC'))
DROP PROCEDURE usp_Insert_BankAccountSequence
GO

 CREATE PROCEDURE usp_Insert_BankAccountSequence
@out_error_number INT = 0 OUTPUT,
@LocationId int,
@BankAccountId int,
@SequenceId int,
@IsDefault bit,
@InsertDate datetime,
@UserId int
AS

SET @SequenceId  = (SELECT MAX(SequenceId)+ 1 FROM BankAccountSequence WHERE LocationId = @LocationId )
BEGIN
BEGIN TRY
	Insert into BankAccountSequence (LocationId,BankAccountId,SequenceId,IsDefault,InsertDate,InsertedBy)
	values(@LocationId,@BankAccountId,@SequenceId,@IsDefault,@InsertDate,@UserId)
END TRY
BEGIN CATCH
	SELECT @out_error_number=ERROR_NUMBER()
END CATCH
END
GO

 GO 
--CREATE PROC [dbo].[usp_Report_CustomerPeriodicalSale] 
--	@LocationIds varchar(200), 
--	@CompanyIds varchar(20),  
--	@PBLIds varchar(100),   
--	@SaleTypeIds varchar(100),   
--	@MainAreaIds varchar(MAX),  
--	@SubAreaIds varchar(MAX),  
--	@CustomerIds varchar(MAX),  
--	@ProductIds varchar(MAX), 
--	@FromDate datetime, 
--	@ToDate datetime,   	   
--	@IsCash bit,
--	@IsCredit bit,
--	@CustStatus int
--AS 

DECLARE 
	@LocationIds varchar(1000), 
	@CompanyIds varchar(1000),  
	@PBLIds varchar(1000),   
	@SaleTypeIds varchar(1000),   
	@MainAreaIds varchar(1000),  
	@SubAreaIds varchar(1000),  
	@CustomerIds varchar(1000),  
	@ProductIds varchar(1000),   
	@FromDate datetime, 
	@ToDate datetime,   		      
    @IsCash bit,
	@IsCredit bit,
	@CustStatus INT,
	@Period INT
SET @LocationIds = ''--'11,14'--'11,18,23,28,30,35,37,42,44'  
SET @CompanyIds= '1'
SET @PBLIds = ''--3,4,'--'7,3,5,28,40,4,33,37,38,20,35,41,43,44,45,47,48,49,50,55,57,58,59,60,61,62'
SET @SaleTypeIds = ''--'1,2,3,4,5'
SET @MainAreaIds = ''--'24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43'
SET @SubAreaIds = ''--'149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238'
SET @ProductIds = '' --'2545'
SET @CustomerIds= ''--'2780,2781'
SET @FromDate = '2014-04-01'  
SET @ToDate = GETDATE() 
SET @IsCash= 1
SET @IsCredit= 1
SET @CustStatus = 0
SET @Period  = 0
SELECT 
	L.SequenceId AS [LocationSequence],	
	l.ShortName AS [LOCATION NAME], 	
	A.[SALE DATE],
	Case When @Period = 0 then LEFT(RIGHT(convert(varchar(20),[SALE DATE],06),6),3)+'-'+RIGHT(convert(varchar(20),[SALE DATE],06),2)
	ELSE LEFT(CONVERT(VARCHAR(7), [SALE DATE], 111),4) END 
	AS [PERIOD],            
	A.CustomerId AS [CODE],
	csa.[Customer Name] AS [CUSTOMER NAME],
	csa.[Main Area] AS [MAIN AREA],
	csa.[Sub Area] AS [SUB AREA],
	a.[SALE NATURE] AS [SALE NATURE],	
	up.PBLShortName AS [PBL],
	A.ProductId  AS [PROD ID], 	
	UP.Name  AS [PRODUCT NAME], 		
	sum(a.[TP Value]) [TP VALUE]
	INTO #temp
FROM 
(
	SELECT 
		so.LocationId, 
		SO.SalePassDate AS [SALE DATE],	
		SO.CustomerId,
		sop.PrincipalBusinessLineId, 
		sop.ProductId,  
		CASE WHEN SO.IsCash=1 THEN 'CASH' ELSE 'CREDIT' END AS [SALE NATURE], 			
		ISNULL(sop.SoldQuantity * sop.TP,0)  [TP Value]
	FROM SaleOrder SO INNER JOIN SaleOrderProduct sop ON   sop.LocationId = SO.LocationId 
		 AND   sop.SaleOrderId = SO.SaleOrderId 				
		INNER JOIN   DBO.Split(@CompanyIds, ',' ) Company ON ( Company.Data = SO.CompanyId OR @CompanyIds = '' )	
		INNER JOIN   DBO.Split(@LocationIds, ',' ) Loc ON  ( Loc.Data = SO.LocationId OR @LocationIds = '' )
		INNER JOIN   DBO.Split(@CustomerIds, ',' ) Customer ON ( Customer.Data = SO.CustomerId OR @CustomerIds = '' )						
		INNER JOIN   DBO.Split(@PBLIds, ',' ) PBL ON (PBL.Data = sop.PrincipalBusinessLineId OR @PBLIds = '' )
		INNER JOIN   DBO.Split(@ProductIds, ',' ) Product ON ( Product.Data = sop.ProductId OR @ProductIds = '' )			 
		INNER JOIN   DBO.Split(@SaleTypeIds, ',' ) SaleTypes ON ( SaleTypes.Data = so.SaleTypeId OR @SaleTypeIds = '' )			 
	
	WHERE  SO.IsRollbacked = 0
		AND sop.EndDate IS NULL 
		AND ( DATEDIFF(DAY,SO.SalePassDate,@FromDate) <= 0 AND  DATEDIFF(DAY,SO.SalePassDate,@ToDate) >= 0)                                              	
		AND((@IsCash=1 AND SO.IsCash=1)  OR (@IsCredit=1 AND SO.IsCash=0)) 
			
	UNION ALL
	
	SELECT 
		S.LocationId, 
		S.TransactionDate AS [SALE DATE],	
		s.CustomerId,
		s.PrincipalBusinessLineId, 
		s2.ProductId, 
		CASE WHEN s.IsCash=1 THEN 'CASH' ELSE 'CREDIT' END  AS [SALE NATURE],		
		-1*s2.Quantity * pc.TP  [TP Value]
	FROM SLN s
		INNER JOIN SLNProduct s2 ON s2.LocationId = s.LocationId AND s2.SLNId = s.SLNId   
		INNER JOIN PriceCatalog pc ON  pc.PriceCatalogId=s2.PriceId
		INNER JOIN   DBO.Split(@CompanyIds, ',' ) Company ON ( Company.Data = s.CompanyId OR @CompanyIds = '' )	
		INNER JOIN   DBO.Split(@LocationIds, ',' ) Loc ON  ( Loc.Data = s.LocationId OR @LocationIds = '' )
		INNER JOIN   DBO.Split(@CustomerIds, ',' ) Customer ON ( Customer.Data = s.CustomerId OR @CustomerIds = '' )						
		INNER JOIN   DBO.Split(@PBLIds, ',' ) PBL ON (PBL.Data = s.PrincipalBusinessLineId OR @PBLIds = '' )			 
		INNER JOIN   DBO.Split(@ProductIds, ',' ) Product ON ( Product.Data = s2.ProductId OR @ProductIds = '' )			
		
	WHERE s2.Quantity > 0 
		AND (DATEDIFF(DAY,s.TransactionDate,  @FromDate) <= 0 AND DATEDIFF(DAY,s.TransactionDate,  @ToDate) >= 0)
		AND((@IsCash=1 AND s.IsCash=1)  OR (@IsCredit=1 AND s.IsCash=0)) 
		AND s2.IsFree=0
		AND S.IsRollbacked = 0	
) A 
INNER JOIN  uv_Product up ON  up.ProductId = A.ProductId
INNER JOIN  Location l ON  l.LocationId = A.LocationId
INNER JOIN  uv_CustomerSalesArea csa ON csa.LocationId=A.LocationId AND csa.CustomerId=A.CustomerId
INNER JOIN   DBO.Split(@MainAreaIds, ',' ) MainArea ON ( MainArea.Data = csa.MainAreaId OR @MainAreaIds = '' )
INNER JOIN   DBO.Split(@SubAreaIds, ',' ) SubArea ON ( SubArea.Data = csa.SubAreaId OR @SubAreaIds = '' )

WHERE
		( @CustStatus = 0 OR ( @CustStatus = 1 AND ( DATEDIFF(day, csa.[Cus Effective Date],GETDATE())>= 0 AND DATEDIFF(day,GETDATE(), isnull( csa.[Cus End Date],GETDATE()+1))> 0))
	OR ( @CustStatus = 2 AND  DATEDIFF(day,csa.[Cus End Date],ISNULL(GETDATE(), GETDATE()+1))>0 ))
 	
GROUP BY L.SequenceId ,	
	l.ShortName , 	
	A.[SALE DATE],            
	A.CustomerId,
	csa.[Customer Name] ,
	csa.[Main Area] ,
	csa.[Sub Area] ,
	a.[SALE NATURE],
	up.PBLShortName,
	A.ProductId,   	
	UP.Name    
	
DECLARE @pvtPERIOD NVARCHAR(MAX)
SET @pvtPERIOD = (SELECT DISTINCT '[' +PERIOD+  '], '
					FROM #TEMP 
                    FOR XML PATH(''), root('MyString'), type).value('/MyString[1]','varchar(max)')               
SET @pvtPERIOD= LEFT( @pvtPERIOD,LEN(@pvtPERIOD)-1 )  
--SELECT @pvtPERIOD
DECLARE @Query NVARCHAR(MAX)
SET @Query = '
SELECT [LocationSequence],[LOCATION NAME],[CODE],[CUSTOMER NAME],[MAIN AREA],[SUB AREA],[SALE NATURE],[PBL],[PROD ID],[PRODUCT NAME],'+@pvtPERIOD+'
FROM
(	SELECT	[LocationSequence],[LOCATION NAME],[CODE],[CUSTOMER NAME],[MAIN AREA],[SUB AREA],[SALE NATURE],[PBL],[PROD ID],[PRODUCT NAME],Isnull([TP VALUE],0) as [TP VALUE],PERIOD
	FROM #TEMP 
 	Where [LocationSequence]= 52
)a
PIVOT(SUM([TP VALUE])  FOR a.PERIOD IN ('+@pvtPERIOD+')) as PVT '
 
--SELECT Distinct PERIOD,CONVERT(Date,'01-'+Period,112) AS sodate
--INTO #tblLoop 
--FROM #TEMP
--ORDER BY 
--CONVERT(Date,'01-'+Period,112)

DECLARE @PeriodCount INT
SET @PeriodCount =  1

--WHILE @PeriodCount <= (SELECT COUNT(*) FROM #tblLoop) 
BEGIN
  EXEC(@Query)
  PRINT(@Query)
--SET @PeriodCount = @PeriodCount + 1
END




 GO 
CREATE PROC [dbo].[usp_Report_CustomerPeriodicalSale] 
	@CompanyIds varchar(20), 
	@LocationIds varchar(200), 
	@PBLIds varchar(100),
	@ProductIds varchar(MAX), 
	@MainAreaIds varchar(MAX),  
	@SubAreaIds varchar(MAX),  
	@CustomerIds varchar(MAX),
	@SaleTypeIds varchar(100),   
	@SaleCriteria int, 
	@FromDate datetime, 
	@ToDate datetime,   	   
	@IsCash bit,
	@IsCredit bit,
	@CustStatus int
AS 
--DECLARE @PBLIds varchar(100),
--@ProductIds nvarchar(MAX),
--        @LocationIds varchar(100),@MainAreaIds NVARCHAR(MAX), @SubAreaIds NVARCHAR(MAX),
--        @CustomerIds varchar(100),
--        @SaleCriteria int,
--        @SaleTypeIds varchar(100),
--        @IsCash bit,
--        @IsCredit bit,
--        @FromDate datetime,
--        @ToDate datetime,@CustStatus int  
--SET @PBLIds =''
--SET @LocationIds = ''
--SET @CustomerIds =''
--SET @MainAreaIds  = '' 
--set @SubAreaIds=''
--SET @SaleCriteria =1
--SET @SaleTypeIds = ''--'1,2,3,4,5'
--SET @IsCash = 1
--SET @IsCredit =1
--SET @FromDate = '2014-04-01 00:00:00'
--SET @ToDate = '2014-06-17 00:00:00'
--SET @CustStatus =0
--SET @ProductIds = ''
/*
Sale Criteria 
0-Gross Sale --Only Value
1-Net Sale -- Value-SLN
2-SLN--Only SLN
*/

SELECT 
    [tbl].LocationId,  
	l.ShortName AS [Location Name], 
	l.SequenceId AS [Loc Seq],
	[tbl].IsCash, 
	[tbl].CustomerId,
	c.[Customer Name],
	c.[Main Area],
	c.[Sub Area],
	[tbl].[Date],
	sum([Amount]) AS [Amount]
	INTO #TEMP
FROM 
(
	SELECT 
	SO.LocationId AS LocationId,  
	so.IsCash,
	so.CustomerId,
	so.PrincipalBusinessLineId, 
	so.ProductId,
	RIGHT(CONVERT(char(11),so.SalePassDate,13),8) AS [Date],
	so.SalePassDate AS TransactionDate,
	so.TP* so.SoldQuantity AS [Amount]
	FROM uv_Sales_SaleOrder so
		INNER JOIN   DBO.Split(@LocationIds, ',' ) Loc ON   ( Loc.Data = so.LocationId OR @LocationIds = '' )
		INNER JOIN   DBO.Split(@PBLIds, ',' ) PBL ON   ( PBL.Data = so.PrincipalBusinessLineId OR @PBLIds = '' )
		INNER JOIN 	 DBO.Split(@ProductIds, ',' ) Product ON   ( Product.Data = so.ProductId OR @ProductIds= '' )
		INNER JOIN   DBO.Split(@CustomerIds, ',' ) Cus ON   ( Cus.Data = so.CustomerId OR @CustomerIds = '' )
		INNER JOIN   DBO.Split(@SaleTypeIds, ',' ) SaleType ON   ( SaleType.Data = so.SaleTypeId OR @SaleTypeIds = '' )
	WHERE  
		DATEDIFF(DAY, so.SalePassDate,  @FromDate ) <= 0 
		AND  DATEDIFF(DAY,  so.SalePassDate,  @ToDate ) >= 0 	
		AND so.IsRollbacked = 0
		AND ((@IsCash=1 AND so.IsCash=1)  OR (@IsCredit=1 AND so.IsCash=0))
		AND @SaleCriteria <> 2 /*--to show Only SLN--*/
		
		
	/*------ SLN PRODUCT ------*/
	UNION ALL 

	SELECT 
		S.LocationId AS LocationId, 
		S.IsCash,
		s.CustomerId,
		S.PrincipalBusinessLineId,
		s.ProductId, 
		RIGHT(CONVERT(char(11),s.TransactionDate,13),8) AS [Date],
		s.TransactionDate, 
		CASE WHEN s.IsFree=0 THEN (PC.TP * CASE WHEN @SaleCriteria=1 THEN  -1 * s.Quantity ELSE s.Quantity END)	ELSE 0 END  AS [Amount]
	FROM uv_Sales_SLN s
		INNER JOIN   PriceCatalog pc ON   pc.PriceCatalogId = s.PriceId
		INNER JOIN   DBO.Split(@LocationIds, ',' ) Loc ON   ( Loc.Data = S.LocationId OR @LocationIds = '' )
		INNER JOIN   DBO.Split(@PBLIds, ',' ) PBL ON   ( PBL.Data = S.PrincipalBusinessLineId OR @PBLIds = '' )
		INNER JOIN 	 DBO.Split(@ProductIds, ',' ) Product ON   ( Product.Data = S.ProductId OR @ProductIds= '' )
		INNER JOIN   DBO.Split(@CustomerIds, ',' ) Cus ON   ( Cus.Data = S.CustomerId OR @CustomerIds = '' )
		
	WHERE  
		DATEDIFF(DAY, S.TransactionDate,  @FromDate ) <= 0 
		AND  DATEDIFF(DAY, S.TransactionDate,  @ToDate ) >= 0
		AND s.IsFree = 0
		AND  s.IsRollbacked = 0
		AND @SaleCriteria <> 0
		
			
)AS [tbl]
INNER JOIN Location l ON   l.LocationId = [tbl].LocationId
INNER JOIN uv_CustomerSalesArea c ON c.LocationId=[tbl].LocationId AND c.CustomerId=[tbl].CustomerId
INNER JOIN   DBO.Split(@MainAreaIds, ',' ) MainArea ON ( MainArea.Data = c.MainAreaId OR @MainAreaIds = '' )
INNER JOIN   DBO.Split(@SubAreaIds, ',' ) SubArea ON ( SubArea.Data = c.SubAreaId OR @SubAreaIds = '' )
WHERE 
 
		(
			   @CustStatus = 0
		   OR  (
				   @CustStatus = 1
			  AND  (
					   DATEDIFF(day, c.[Cus Effective Date],GETDATE())>= 0
					AND  DATEDIFF(day,GETDATE(), isnull( c.[CSA EndDate],GETDATE()+1))> 0
				   )
			   )
		   OR  (
				   @CustStatus = 2
				   AND  DATEDIFF(day,c.[CSA EndDate],ISNULL(GETDATE(), GETDATE()+1))>0               
			   )
		)	

GROUP BY	
    [tbl].LocationId,  
	l.ShortName , 
	l.SequenceId ,
	[tbl].IsCash, 
	[tbl].CustomerId,
	c.[Customer Name],
	c.[Main Area],
	c.[Sub Area],
	[tbl].[Date]

DECLARE @QUERY VARCHAR(8000),@pvtSumIsNullAmount VARCHAR(MAX),@pvtNonZeroAmountDate VARCHAR(MAX)
		
		SET @pvtNonZeroAmountDate = 
		( 
			SELECT  '[' + A.[Date] + '] , '
			FROM
			(
				SELECT DISTINCT t.[Date]
				FROM 
				#TEMP T
			) A
			ORDER BY Year(A.[Date]), Month(A.[Date])
			FOR XML PATH('' ) 
		)                            
		SET @pvtNonZeroAmountDate = LEFT( @pvtNonZeroAmountDate, LEN(@pvtNonZeroAmountDate )-1 )                          
	
		SET @pvtSumIsNullAmount = 
		( 
			SELECT  'ISNULL(SUM([' + A.[Date] + ']), 0) AS ['+A.[Date] +'],'
			FROM
			(
				SELECT DISTINCT t.[Date]
				FROM #TEMP T
			) A
			ORDER BY Year(A.[Date]), Month(A.[Date])
			FOR XML PATH('' ) 
		)                            
		SET @pvtSumIsNullAmount = LEFT( @pvtSumIsNullAmount, LEN(@pvtSumIsNullAmount )-1 )
		
		SET @QUERY = 
			'
			
				SELECT [Loc Seq],[Location Name],[Main Area],[Sub Area],CustomerId,[Customer Name], '+@pvtSumIsNullAmount+' FROM
				(
					SELECT t.[Loc Seq],t.[Location Name],t.[Main Area],t.[Sub Area],t.CustomerId,t.[Customer Name],  T.[Date], isnull(Amount,0) as [Amount] 
					FROM #TEMP T 
				)ST
				PIVOT
				(SUM(Amount) FOR [Date] IN ('+@pvtNonZeroAmountDate+')) AS PVT	
				GROUP BY [Loc Seq],[Location Name],[Main Area],[Sub Area],CustomerId,[Customer Name]
				Order BY [Loc Seq],[Main Area],[Sub Area],[Customer Name]						
			'
			EXEC (@QUERY)
			PRINT (@QUERY)										
DROP TABLE  #TEMP

 GO 
/*
 AUTHOR: SIDRA ASIF
 DATED : 14 January
 PURPOSE :  Update New Product Sequence 
*/

CREATE  PROC [dbo].[usp_Update_ProductSequence]
( @tvpTable utt_ProductSequence_TableType READONLY ,@UpdatedBy int, @EditStartTime DATETIME )
 AS 
BEGIN
	IF DATEDIFF(DAY, @EditStartTime, '1900-01-01') <> 0
	AND DATEDIFF(SECOND, ISNULL(( SELECT MAX(ISNULL(T.UpdateDate,@EditStartTime)) FROM Product AS T INNER JOIN @tvpTable AS TVP ON (T.ProductId=TVP.ProductId) ), @EditStartTime), @EditStartTime) < 0	
	--IF DATEDIFF(SECOND, ISNULL(( SELECT MAX(T.UpdateDate) FROM Product AS T INNER JOIN  @tvpTable AS TVP ON   (T.ProductId = TVP.ProductId )), @EditStartTime), @EditStartTime) < 0
	BEGIN 
		RAISERROR('Error On Update! The record cannot be updated because it has been modified by some other user after it was opened for editing by this user.', 16, 1)
	END
	
    
		UPDATE T
		SET    T.ProductSequence = TVP.ProductSequence,
			   T.UpdateDate = GETDATE(),
			   T.UpdatedBy = @UpdatedBy,
			   T.CommunicationId = NULL,
			   T.ToSend = 1
		FROM   Product AS T
		INNER JOIN   @tvpTable AS TVP
		  ON   (T.ProductId = TVP.ProductId )
		
		SELECT @@ROWCOUNT
    
END

 GO 
DECLARE @CompanyIds varchar(1000),@PBLIds  varchar(1000),@LocationIds  varchar(1000),@SelectAll int,@FromDate datetime, @ToDate datetime
SET @CompanyIds='1' 
SET @PBLIds='28'
SET @LocationIds='14' 
SET @SelectAll=2
SET @FromDate='2013-11-23 00:00:00'
SET @ToDate='2013-11-26 00:00:00'

DECLARE @pvtTotalSaleColumns VARCHAR(MAX),
        @pvtTotalSaleNonZeroColumns VARCHAR(MAX),
        @pvtTotalCreditColumns VARCHAR(MAX),
        @pvtTotalCreditNonZeroColumns VARCHAR(MAX),
        @pvtTotalPercColumns VARCHAR(MAX),
        @pvtTotalPercNonZeroColumns VARCHAR(MAX),
        @pvtMAXColumns VARCHAR(MAX)
        
SELECT
a.LocationId,l.ShortName AS [Location Name],a.PrincipalBusinessLineId,upbla.Name AS [Principal Business Line],
upbla.Name + '!Total Sale' AS [Principal Business Line Total Sale],
upbla.Name + '!Total Credit Sale' AS [Principal Business Line Total Credit Sale],
upbla.Name + '!Total Percentage' AS [Principal Business Line Total Percentage],

--sum(A.[Total Sale]) AS [Total Sale],
--sum(A.[Credit Total Net]) AS [Total Credit Net],
--CASE WHEN isnull(sum(A.[Total Sale]),sum(a.[Credit Total Net])) = 0 THEN 0 ELSE
--Sum(A.[Credit Total Net]) / isnull(sum(A.[Total Sale]),sum(a.[Credit Total Net])) END  AS [Total Percentage]
--INTO #TEMP  
FROM 
(
	SELECT udes.LocationId, udes.Date, udes.CompanyId,up.PrincipalBusinessLineId,udes.
       isnull((udes.GrossValue - udes.SLNCash-udes.SLNCredit),0)*udes.TP AS [Total Sale],
       isnull((udes.BookedLocalCredit+udes.BookedOSCredit - udes.SLNCredit),0)*udes.TP  AS [Credit Total Net]       
	FROM uv_DayEndSale udes
	INNER JOIN uv_Product up ON up.ProductId = udes.ProductId 

	UNION ALL

	SELECT s.LocationId, s.TransactionDate AS [Date],s.CompanyId, s.PrincipalBusinessLineId,
			s.[Total Net] AS [Total Sale],s.[Credit Total Net]
	FROM UV_SLN S	
) A 
	INNER JOIN DBO.Split(@CompanyIds, ',') Company ON   (Company.Data = A.CompanyId OR @CompanyIds = '')  
	INNER JOIN DBO.Split(@LocationIds, ',') LOC ON   (LOC.Data = A.LocationId OR @LocationIds = '')  
	INNER JOIN DBO.Split(@PBLIds, ',') PBL  ON   (PBL.Data = A.PrincipalBusinessLineId OR @PBLIds = '')  
	INNER JOIN uv_PrincipalBusinessLine_All upbla ON upbla.PrincipalBusinessLineId =A.PrincipalBusinessLineId
	INNER JOIN Location l ON l.LocationId=a.LocationId
WHERE
(
	@SelectAll=0 OR
	(
		@SelectAll=2 
		AND (DATEDIFF(DAY, A.Date,  @FromDate) <= 0   AND DATEDIFF(DAY,A.Date,  @ToDate) >= 0)
	)	
)
	
GROUP BY
A.CompanyId,a.LocationId,l.ShortName, A.PrincipalBusinessLineId,upbla.Name--,A.Date

HAVING sum(a.[Total Sale])>0

--SELECT * FROM #TEMP
-----------------------------------Total Sale-------------------------------------
SET @pvtTotalSaleColumns =( SELECT DISTINCT '0 [' +  [Principal Business Line Total Sale] + '], ' FROM   #TEMP FOR XML PATH(''), root('MyString'), type).value('/MyString[1]','varchar(max)')                            
SET @pvtTotalSaleColumns = LEFT(@pvtTotalSaleColumns, LEN(@pvtTotalSaleColumns )-1)

SET @pvtTotalSaleNonZeroColumns =( SELECT DISTINCT '[' +  [Principal Business Line Total Sale] + '], ' FROM   #TEMP FOR XML PATH(''), root('MyString'), type).value('/MyString[1]','varchar(max)')
SET @pvtTotalSaleNonZeroColumns = LEFT(@pvtTotalSaleNonZeroColumns, LEN(@pvtTotalSaleNonZeroColumns )-1)

-----------------------------------Total Credit-----------------------------------
SET @pvtTotalCreditColumns =( SELECT DISTINCT '0 [' + [Principal Business Line Total Credit Sale] + '], ' FROM   #TEMP  FOR XML PATH(''), root('MyString'), type).value('/MyString[1]','varchar(max)')
SET @pvtTotalCreditColumns = LEFT(@pvtTotalCreditColumns, LEN(@pvtTotalCreditColumns )-1)
                           
SET @pvtTotalCreditNonZeroColumns =( SELECT DISTINCT '[' + [Principal Business Line Total Credit Sale] + '], 'FROM   #TEMP FOR XML PATH(''), root('MyString'), type).value('/MyString[1]','varchar(max)')
SET @pvtTotalCreditNonZeroColumns = LEFT(@pvtTotalCreditNonZeroColumns, LEN(@pvtTotalCreditNonZeroColumns )-1)

---------------------------------------Total Discount-----------------------------
SET @pvtTotalPercColumns =(SELECT DISTINCT '0 [' + [Principal Business Line Total Percentage] + '], ' FROM   #TEMP  FOR XML PATH(''), root('MyString'), type).value('/MyString[1]','varchar(max)')
SET @pvtTotalPercColumns = LEFT(@pvtTotalPercColumns, LEN(@pvtTotalPercColumns )-1)
                           
SET @pvtTotalPercNonZeroColumns =(SELECT DISTINCT '[' + [Principal Business Line Total Percentage] + '], 'FROM   #TEMP FOR XML PATH(''), root('MyString'), type).value('/MyString[1]','varchar(max)')
SET @pvtTotalPercNonZeroColumns = LEFT( @pvtTotalPercNonZeroColumns, LEN(@pvtTotalPercNonZeroColumns )-1)                                                                                                                             
----------------------------------------------------------------------------------

SET @pvtMAXColumns = 
(	
	SELECT DISTINCT 
	'SUM(A.[' + [Principal Business Line] + A + ']) [' + [Principal Business Line] + A + '], ',
	'SUM(A.[' + [Principal Business Line] + B + ']) [' + [Principal Business Line] + B + '], ', 
	'SUM(A.[' + [Principal Business Line] + C + ']) [' + [Principal Business Line] + C + '], '
	FROM #TEMP T
	CROSS JOIN (SELECT '!Total Sale' A, '!Total Credit Sale' B, '!Total Percentage' C) A FOR XML PATH(''), root('MyString'), type).value('/MyString[1]','varchar(max)')
SET @pvtMAXColumns = LEFT( @pvtMAXColumns, LEN(@pvtMAXColumns )-1 )
----------------------------------------------
DECLARE @Query varchar(max)
SET @Query ='
       SELECT  A.[Location Name],  '+@pvtMAXColumns+
       '
       FROM 
       (
		   SELECT  [Location Name],'+@pvtTotalSaleNonZeroColumns+', '+@pvtTotalCreditColumns+', '+@pvtTotalPercColumns+'
		   FROM #TEMP  ST
		   PIVOT
		   (SUM([Total Sale]) FOR [Principal Business Line Total Sale] IN ('+@pvtTotalSaleNonZeroColumns+')) AS PVT       	
		   
		   UNION ALL
		   
		   SELECT  [Location Name],'+@pvtTotalSaleColumns+', '+@pvtTotalCreditNonZeroColumns+', '+@pvtTotalPercColumns+'
		   FROM #TEMP  ST
		   PIVOT
		   (SUM([Total Credit Net]) FOR [Principal Business Line Total Credit--CREATE PROCEDURE usp_Report_MonthlyManagementReport @CompanyIds INT, @LocationIds VARCHAR(250),@PBLIds VARCHAR(250),@SelectAll INT,@FromDate DATETIME,@ToDate DATETIME

DECLARE @CompanyIds INT, @LocationIds VARCHAR(250),@PBLIds VARCHAR(250),@SelectAll INT,@FromDate DATETIME,@ToDate DATETIME
SET @CompanyIds = 1
SET @LocationIds = '14'
SET @PBLIds = '28'
SET @SelectAll = 2
SET @FromDate = '2014-04-01 00:00:00.000'
SET @ToDate = '2014-04-19 00:00:00.000'

SELECT
l.SequenceId,
a.[LocationId],
l.[Name] AS [Location],
upbla.PBLSequenceId,
a.PrincipalBusinessLineId,
upbla.[Principal ShortName] AS [PBL],
a.[Gross Sale Cash],
a.[Gross Sale Cr],
--a.[Gross UDL Discount Cash],
--a.[Gross PBL Discount Cash],
--a.[Gross UDL Discount Cr],
--a.[Gross PBL Discount Cr],
a.[SLN Cash],
a.[SLN Cr], 
a.[SLN UDL Discount Cash], 
a.[SLN PBL Discount Cash],
a.[SLN UDL Discount Cr],
a.[SLN PBL Discount Cr],
a.[Gross Sale Cash] - 0/*a.[UDL Discount Cash] - a.[PBL Discount Cash]*/ AS [Cash Sale],
a.[Gross Sale Cr] - 0/*a.[UDL Discount Credit] - a.[PBL Discount Credit]*/ AS [Credit Sale],
a.[SLN Cash] - a.[SLN UDL Discount Cash] - a.[SLN PBL Discount Cash] AS [Cash Sales Return],
a.[SLN Cr] - a.[SLN UDL Discount Cr] - a.[SLN PBL Discount Cr] AS [Credit Sales Return],
((a.[Gross Sale Cash] - 0/*a.[UDL Discount Cash] - a.[PBL Discount Cash]*/ ) + (a.[Gross Sale Cr] - 0/*a.[UDL Discount Cr] - a.[PBL Discount Cr]*/ ) -
(a.[SLN Cash] - a.[SLN UDL Discount Cash] - a.[SLN PBL Discount Cash]) - (a.[SLN Cr] - a.[SLN UDL Discount Cr] - a.[SLN PBL Discount Cr])) 
AS [Net Sale],
--a.[Gross UDL Discount Cash] + a.[Gross UDL Discount Cr] - a.[SLN UDL Discount Cash] - a.[SLN UDL Discount Cr] AS [UDL Discount],
--a.[Gross PBL Discount Cash] + a.[Gross PBL Discount Cr] - a.[SLN PBL Discount Cash] - a.[SLN PBL Discount Cr] AS [PBL Discount],
a.[Gross Sale Cash] + a.[Gross Sale Cr] - a.[SLN Cash] - a.[SLN Cr] AS [DSP Net Sale]
FROM

(
	SELECT
		usso.LocationId,
		usso.PrincipalBusinessLineId,
		usso.IsCash,
		case when usso.IsCash = 1 then SUM(usso.soldquantity*usso.tp) else 0 end AS [Gross Sale Cash],
		case when usso.IsCash = 1 then 0 else SUM(usso.soldquantity*usso.tp) end AS [Gross Sale Cr],
		--(case when usso.IsCash = 1 then (usso.udldiscount) else 0 end) AS [Gross UDL Discount Cash],
		--(case when usso.IsCash = 1 then (usso.pbldiscount) else 0 end) AS [Gross PBL Discount Cash],
		--(case when usso.IsCash = 1 then 0 else (usso.udldiscount) end) AS [Gross UDL Discount Cr],
		--(case when usso.IsCash = 1 then 0 else (usso.pbldiscount) end) AS [Gross PBL Discount Cr]  
		0 AS [SLN Cash],
		0 AS [SLN Cr], 
		0 AS [SLN UDL Discount Cash], 
		0 AS [SLN PBL Discount Cash],
		0 AS [SLN UDL Discount Cr],
		0 AS [SLN PBL Discount Cr] 
	FROM uv_Sales_SaleOrder usso
	INNER JOIN   DBO.Split(@PBLIds, ',') PBL ON  (PBL.Data = usso.PrincipalBusinessLineId OR @PBLIds = '')
	INNER JOIN   DBO.Split(@LocationIds, ',') Location ON  (Location.Data = usso.LocationId OR @LocationIds = '')
	
	WHERE usso.CompanyId = @CompanyIds
	AND (@SelectAll = 0 
		OR ( @SelectAll = 1 AND DATEDIFF(DAY,usso.SalePassDate,@FromDate)=0) 
		OR ( @SelectAll = 2 AND DATEDIFF(DAY,usso.SalePassDate,@FromDate)<=0 AND DATEDIFF(DAY,usso.SalePassDate,@ToDate)>=0))
	
	GROUP BY usso.IsCash,usso.PrincipalBusinessLineId,usso.LocationId
 
UNION ALL

	SELECT 
		sln.LocationId,
		sln.PrincipalBusinessLineId,
		sln.IsCash,
		0 AS [Gross Sale Cash],
		0 AS  [Gross Sale Cr],
		--0 AS [Gross UDL Discount Cash],
		--0 AS [Gross PBL Discount Cash],
		--0 AS [Gross UDL Discount Cr],
		--0 AS [Gross PBL Discount Cr],  
		(case when sln.IsCash = 1 then SUM(sln.Quantity * pc.TP) else 0 end) AS [SLN Cash],
		(case when sln.IsCash = 1 then 0 else SUM(sln.Quantity * pc.TP) end) AS [SLN Cr], 
		(case when sln.IsCash = 1 then SUM(sln.DiscountUDLPart) else 0 end) AS [SLN UDL Discount Cash], 
		(case when sln.IsCash = 1 then SUM(sln.DiscountPrincipalPart) else 0 end) AS [SLN PBL Discount Cash],
		(case when sln.IsCash = 1 then 0 else SUM(sln.DiscountUDLPart) end) AS [SLN UDL Discount Cr],
		(case when sln.IsCash = 1 then 0 else SUM(sln.DiscountPrincipalPart) end) AS [SLN PBL Discount Cr] 
	FROM uv_Sales_SLN sln
	INNER JOIN PriceCatalog pc ON pc.PriceCatalogId = sln.PriceId
	INNER JOIN   DBO.Split(@PBLIds, ',') PBL ON  (PBL.Data = sln.PrincipalBusinessLineId OR @PBLIds = '')
    INNER JOIN   DBO.Split(@LocationIds, ',') Location ON  (Location.Data = sln.LocationId OR @LocationIds = '')
	
	WHERE sln.CompanyId = @CompanyIds
	AND (@SelectAll = 0 
		OR ( @SelectAll = 1 AND DATEDIFF(DAY,sln.TransactionDate,@FromDate)=0) 
		OR ( @SelectAll = 2 AND DATEDIFF(DAY,sln.TransactionDate,@FromDate)<=0 AND DATEDIFF(DAY,sln.TransactionDate,@ToDate)>=0))
	
	GROUP BY sln.IsCash,sln.PrincipalBusinessLineId,sln.LocationId

) a
INNER JOIN Location l ON A.LocationId = l.LocationId
INNER JOIN uv_PrincipalBusinessLine_All upbla ON a.PrincipalBusinessLineId = upbla.PrincipalBusinessLineId

 GO 
SELECT ccl.LocationId,
		ccl.CustomerId,
		ccl.PrincipalBusinessLineId,
		pbl.[Name],
		ccl.CreditDays,
		ccl.CreditLimit
		
 FROM CustomerCreditLimit ccl 
INNER JOIN uv_PrincipalBusinessLine_all pbl ON ccl.PrincipalBusinessLineId = pbl.PrincipalBusinessLineId
WHERE ccl.LocationId = 14 AND ccl.CustomerId = 288 

 GO 
CREATE PROCEDURE usp_Report_CustomerWiseSales @LocationId VARCHAR(200),@PBLId VARCHAR(200),
@FromDate DATETIME,@ToDate DATETIME,
@TPValue DECIMAL,@Discount DECIMAL AS
 
--DECLARE @LocationId VARCHAR(200),@PBLId VARCHAR(200),
--@FromDate DATETIME,@ToDate DATETIME,
--@TPValue DECIMAL,@Discount DECIMAL 

SET @LocationId = '14'
SET @PBLId = '28,3'
SET @FromDate = '01/12/2012'
SET @ToDate = '01/3/2014'
SET @TPValue = 1000.00
SET @Discount = 5.00

SELECT l.SequenceId,ucws.LocationId,l.[Name] AS [Location Name],
	   upbla.PBLSequenceId,ucws.PrincipalBusinessLineId,upbla.[NAME] AS [PBL],
	   ucws.CustomerId,
	   ucws.CustomerName,
	   --ucws.TransactionDate,	   
	   SUM(ucws.SaleValue - ucws.SaleReturnValue) AS [SALES VALUE],
	   SUM(ucws.SaleValue - ucws.SaleReturnValue)*(@Discount/100) AS [DISCOUNT],
	   SUM(
	   		(ucws.SaleValue - ucws.SaleReturnValue)
	   		-
	   		(
	   			(ucws.SaleValue - ucws.SaleReturnValue)*(@Discount/100)
	   		)
	   )AS [AFTER Discount]
FROM 
dbo.uv_CustomerWiseSale ucws
INNER JOIN uv_PrincipalBusinessLine_All upbla ON ucws.PrincipalBusinessLineId = upbla.PrincipalBusinessLineId
INNER JOIN dbo.Location l ON ucws.LocationId = l.LocationId
INNER JOIN Dbo.[Split](@LocationId,',')LOC ON LOC.[Data] = ucws.LocationId OR (@LocationId = '')
INNER JOIN dbo.[Split](@PBLId,',')PBL ON PBL.[Data] =  ucws.PrincipalBusinessLineId OR (@PBLId = '')

WHERE (DATEDIFF(DAY,ucws.TransactionDate,  @FromDate) <= 0 
AND  DATEDIFF(DAY,ucws.TransactionDate,  @ToDate) >= 0)
--and ucws.CustomerId = 6156
GROUP BY l.SequenceId,ucws.LocationId,l.[Name],
	   upbla.PBLSequenceId,ucws.PrincipalBusinessLineId,upbla.[NAME],
	   ucws.CustomerId,
	   ucws.CustomerName
	   --ucws.TransactionDate	   
HAVING Sum(ucws.SaleValue - ucws.SaleReturnValue) >= @TPValue


 GO 
SELECT * FROM Employees e

BEGIN trans 
CREATE TABLE SAMPLE_PAYROLL(
	EMPLOYEEID   INT              NOT NULL,
   ENAME VARCHAR (20)     NOT NULL,
   HOURLYWAGE MONEY NOT NULL,
   WORKINGHOUR INT NOT NULL,
   --GROSSPAY MONEY NOT NULL,
   --FEDERALALLOW INT NOT NULL,
   --StateTax MONEY NOT NULL,
   --FederalIncomeTax MONEY NOT NULL,
   --SocialSecurity MONEY NOT NULL,
   --Medicare MONEY NOT NULL,
   --TotalTaxWithheld MONEY NOT NULL,
   --InsuranceDeduction MONEY NOT NULL,
   NetPay MONEY NOT NULL
);
SELECT * FROM targeted
INSERT INTO SAMPLE_PAYROLL
(
	EMPLOYEEID,
	ENAME,
	HOURLYWAGE,
	WORKINGHOUR,
	NetPay
)
SELECT * FROM targeted
COMMIT trans
 GO 
select left(right(convert(varchar(20),getdate(),06),6),3)+'-'+right(convert(varchar(20),getdate(),06),2), DATEADD(dd, DATEDIFF(dd, 0, getdate()), 0),convert(varchar(20),getdate(),06)
 GO 
CREATE PROCEDURE usp_Report_GrossSaleAndMargin @CompanyId INT,@LocationIds NVARCHAR(250),@PBLIds NVARCHAR(500),@ProductIds NVARCHAR(1000),@SelectAll INT,@FromDate DATETIME,@ToDate DATETIME,@SalesCriteria INT as
--DECLARE @CompanyId INT,@LocationIds NVARCHAR(250),@PBLIds NVARCHAR(500),@ProductIds NVARCHAR(1000),@SelectAll INT,@FromDate DATETIME,@ToDate DATETIME,@SalesCriteria INT 
--SET @CompanyId = '1'
--SET @LocationIds = '11'
--SET @PBLIds = '37'
--SET @ProductIds = '896'
--SET @FromDate = '2014-04-01'
--SET @ToDate = '2014-04-04'
--SET @SalesCriteria = 1
--SET @SelectAll = 2
/*0-Gross Sale
* 1-Net Sale
* 2-SLN
* */
SELECT l.SequenceId,
		A.LocationId,
		l.ShortName,
		up.PBLSequenceId,
		A.PrincipalBusinessLineId,
		up.ShortName,
		up.ProductSequence,
		A.ProductId,
		up.[Name] AS ProductName,
		SUM(A.Quantity) AS Quantity,
		A.PP,
		SUM(A.Quantity) * A.PP AS [PPValue],
		--a.InputTaxAmount,
		A.TP, 
		SUM(A.Quantity) * A.TP AS [TPValue],
		--a.[OUTPUT TAX],
		A.TP-A.PP AS [Margin],
		(SUM(A.Quantity)* A.TP) - (SUM(A.Quantity) * A.PP) AS [MarginValue],
		((SUM(A.Quantity) * A.TP)-(SUM(A.Quantity)* A.PP)) / (SUM(A.Quantity) * A.PP) * 100 AS  [MarginPercentage]
FROM (
			SELECT
				ussl.LocationId,
				ussl.PrincipalBusinessLineId,
				ussl.ProductId,
				CASE WHEN @SalesCriteria = 0 THEN 0--SUM(ussl.Quantity) 
				     When @SalesCriteria = 1 THEN -SUM(ussl.Quantity)
				     When @SalesCriteria  = 2 THEN SUM(ussl.Quantity) END 
				 AS [Quantity],
				ussl.TransactionDate AS [Date],
				pc.PP,
				ussl.InputTaxAmount,
				pc.TP,
				ussl.OutputTaxAmount AS [OUTPUT TAX]
		    FROM uv_Sales_SLN ussl
		    INNER JOIN PriceCatalog pc ON ussl.PriceId = pc.PriceCatalogId
		    INNER JOIN   DBO.Split(@ProductIds, ',') Product ON  (Product.Data = ussl.ProductId OR @ProductIds = '')
			INNER JOIN   DBO.Split(@PBLIds, ',') PBL ON  (PBL.Data = ussl.PrincipalBusinessLineId OR @PBLIds = '')
			INNER JOIN   DBO.Split(@LocationIds, ',') Location ON  (Location.Data = ussl.LocationId OR @LocationIds = '')
			WHERE (  @SelectAll = 0	  
					OR  (@SelectAll = 1 AND ( DATEDIFF(DAY,ussl.TransactionDate,  @FromDate) = 0 ))
				    OR  (@SelectAll = 2 AND ( DATEDIFF(DAY, ussl.TransactionDate,  @FromDate) <= 0 AND DATEDIFF(day, ussl.TransactionDate, @ToDate) >= 0 ))   
			) and ussl.IsRollbacked = 0
		    GROUP BY 
				ussl.LocationId,
				ussl.PrincipalBusinessLineId,
				ussl.ProductId,
				ussl.TransactionDate,
				pc.PP,
				ussl.InputTaxAmount,
				pc.TP,
				ussl.OutputTaxAmount  
				
				UNION ALL
				
			SELECT
				usso.LocationId,
				usso.PrincipalBusinessLineId,
				usso.ProductId,
				Case When @SalesCriteria  = 0 then SUM(usso.SoldQuantity) 
				     When @SalesCriteria  = 1 then SUM(usso.SoldQuantity)
				     When @SalesCriteria  = 2 then 0 END 
				AS [Quantity],
				usso.SalePassDate AS [Date],
				pc.PP,
				0 InputTaxAmount ,
				pc.TP,
				usso.TotalOutputTax AS [OUTPUT TAX]
			FROM uv_Sales_SaleOrder usso
			INNER JOIN PriceCatalog pc ON usso.PriceId = pc.PriceCatalogId
			INNER JOIN   DBO.Split(@ProductIds, ',') Product ON  (Product.Data = usso.ProductId OR @ProductIds = '')
			INNER JOIN   DBO.Split(@PBLIds, ',') PBL ON  (PBL.Data = usso.PrincipalBusinessLineId OR @PBLIds = '')
			INNER JOIN   DBO.Split(@LocationIds, ',') Location ON  (Location.Data = usso.LocationId OR @LocationIds = '')
			WHERE 
			(  @SelectAll = 0	  
			 OR  (@SelectAll = 1 AND ( DATEDIFF(DAY, usso.SalePassDate,  @FromDate) = 0 ))
			 OR  (@SelectAll = 2 AND ( DATEDIFF(DAY, usso.SalePassDate,  @FromDate) <= 0 AND DATEDIFF(day, usso.SalePassDate, @ToDate) >= 0 ))   
			) AND usso.IsRollbacked = 0
		    GROUP BY 
				usso.LocationId,
				usso.PrincipalBusinessLineId,
				usso.ProductId,
				usso.SalePassDate,
				pc.PP,
				
				pc.TP,
				usso.TotalOutputTax
)A

--INNER JOIN PriceCatalog pc ON A.PriceId = pc.PriceCatalogId
INNER JOIN Location l ON A.LocationId = l.LocationId
INNER JOIN uv_Product up ON A.ProductId = up.ProductId
--INNER JOIN   DBO.Split(@ProductIds, ',') Product ON  (Product.Data = A.ProductId OR @LocationIds = '')
--INNER JOIN   DBO.Split(@PBLIds, ',') PBL ON  (PBL.Data = A.PrincipalBusinessLineId OR @PBLIds = '')
--INNER JOIN   DBO.Split(@LocationIds, ',') Location ON  (Location.Data = A.LocationId OR @LocationIds = '')


GROUP BY 
		l.SequenceId,  
		A.LocationId,
		l.ShortName,
		up.PBLSequenceId,
		A.PrincipalBusinessLineId,
		up.ShortName,
		up.ProductSequence,
		A.ProductId,
		up.[Name] ,
		A.PP,A.TP
		
HAVING  SUM(A.Quantity)<>0
 GO 
DECLARE @CompanyId INT,@LocationIds NVARCHAR(250),@PBLIds NVARCHAR(500),@ProductIds NVARCHAR(1000),@SelectAll INT,@FromDate DATETIME,@ToDate DATETIME,@SalesCriteria INT 
SET @CompanyId = '1'
SET @LocationIds = '11'
SET @PBLIds = '3'
SET @ProductIds = '172'
SET @FromDate = '2014-04-04'
SET @ToDate = '2014-04-15'
SET @SalesCriteria = 2
SET @SelectAll = 1
/*0-Gross Sale
* 1-Net Sale
* 2-SLN
* */	  

	----------------------------SALE---------------------------
	SELECT
	usso.LocationId,
	l.ShortName AS [Location Name],
	--up.PBLSequenceId,
	usso.PrincipalBusinessLineId,
	up.PBLShortName,
	--up.ProductSequence,
	--usso.SaleOrderId, 
	usso.ProductId,
	up.[Name] AS [Product Name],
	CASE WHEN @SalesCriteria=0 THEN sum(usso.SoldQuantity)
		 WHEN @SalesCriteria=1 THEN sum(usso.SoldQuantity) - SUM(ussln.[SLNQuantity])
		 WHEN @SalesCriteria=2 THEN -SUM(ussln.[SLNQuantity])
	END 
	AS [Sale Qty],	
	pc.PP,
	CASE WHEN @SalesCriteria=0 THEN sum(usso.SoldQuantity * pc.PP)
		 WHEN @SalesCriteria=1 THEN sum(usso.SoldQuantity * pc.PP)- SUM(ussln.[SLNQuantity] * pc.PP)
		 WHEN @SalesCriteria=2 THEN -SUM(ussln.[SLNQuantity] * pc.PP)
	END 
	AS [PPValue],	
	pc.TP,
	CASE WHEN @SalesCriteria=0 THEN sum(usso.SoldQuantity * pc.TP)
		 WHEN @SalesCriteria=1 THEN sum(usso.SoldQuantity * pc.TP) - SUM(ussln.[SLNQuantity] * pc.TP)
		 WHEN @SalesCriteria=2 THEN -sum(ussln.[SLNQuantity] * pc.TP)
	END 
	AS [TPValue]
	INTO TEMPSale
FROM uv_Sales_SaleOrder usso
--INNER JOIN SaleOrderTax sot ON usso.LocationId = sot.LocationId AND usso.SaleOrderId = sot.SaleOrderId
INNER JOIN uv_Product up ON usso.ProductId = up.ProductId 
INNER JOIN PriceCatalog pc ON usso.PriceId = pc.PriceCatalogId
INNER JOIN   DBO.Split(@LocationIds, ',') Location ON  (Location.Data = usso.LocationId OR @LocationIds = '')
INNER JOIN   DBO.Split(@PBLIds, ',') PBL ON  (PBL.Data = usso.PrincipalBusinessLineId OR @PBLIds = '')
INNER JOIN   DBO.Split(@ProductIds, ',') Product ON  (Product.Data = usso.ProductId OR @LocationIds = '')
INNER JOIN Location l ON usso.LocationId = l.LocationId

	WHERE (  @SelectAll = 0	  
		   OR  (@SelectAll = 1 AND ( DATEDIFF(DAY, usso.SalePassDate,  @FromDate) = 0 ))
		   OR  (@SelectAll = 2 AND ( DATEDIFF(DAY, usso.SalePassDate,  @FromDate) <= 0 AND DATEDIFF(day, usso.SalePassDate, @ToDate) >= 0 ))   
		  )  
		  AND usso.SalePassDate IS NOT NULL
		  AND usso.IsRollbacked  = 0

	GROUP BY 
	l.ShortName,
	l.SequenceId,
	usso.LocationId,
	up.PBLSequenceId,
	usso.PrincipalBusinessLineId, 
	up.PBLShortName,
	--usso.SaleOrderId,
	up.ProductSequence,
	usso.ProductId,
	up.[Name],
	pc.PP,
	pc.TP
	
ORDER BY 
	l.SequenceId,
	up.PBLSequenceId,
	up.ProductSequence  



/*
	SELECT SUM(Quantity) FROM uv_Sales_SLN usso  WHERE usso.LocationId = 11 AND usso.ProductId = 172 
	SELECT sum(SOLDQUANTITY) FROM uv_Sales_SaleOrder usso  WHERE usso.LocationId = 11 AND usso.ProductId = 172 AND usso.SalePassDate BETWEEN '2014-04-04' AND '2014-04-05'
*/	
	
SELECT
	usso.LocationId,
	l.ShortName AS [Location Name],
	--up.PBLSequenceId,
	usso.PrincipalBusinessLineId,
	up.PBLShortName,
	--up.ProductSequence,
	--usso.SaleOrderId, 
	usso.ProductId,
	up.[Name] AS [Product Name],
	CASE WHEN @SalesCriteria=0 THEN sum(usso.SoldQuantity)
		 WHEN @SalesCriteria=1 THEN sum(usso.SoldQuantity) - SUM(ussln.[SLNQuantity])
		 WHEN @SalesCriteria=2 THEN -SUM(ussln.[SLNQuantity])
	END 
	AS [Sale Qty],	
	pc.PP,
	CASE WHEN @SalesCriteria=0 THEN sum(usso.SoldQuantity * pc.PP)
		 WHEN @SalesCriteria=1 THEN sum(usso.SoldQuantity * pc.PP)- SUM(ussln.[SLNQuantity] * pc.PP)
		 WHEN @SalesCriteria=2 THEN -SUM(ussln.[SLNQuantity] * pc.PP)
	END 
	AS [PPValue],	
	pc.TP,
	CASE WHEN @SalesCriteria=0 THEN sum(usso.SoldQuantity * pc.TP)
		 WHEN @SalesCriteria=1 THEN sum(usso.SoldQuantity * pc.TP) - SUM(ussln.[SLNQuantity] * pc.TP)
		 WHEN @SalesCriteria=2 THEN -sum(ussln.[SLNQuantity] * pc.TP)
	END 
	AS [TPValue]
FROM uv_Sales_SLN ussl
GROUP BY 
				ussl.LocationId,
				ussl.PrincipalBusinessLineId,
				ussl.ProductId


	

 GO 
SELECT ptp.PrincipalBusinessLineId,up.PBLShortName ,pt.Name AS PrincipalTeam,
 ptp2.ProductId , up.[Name] AS ProductName
 INTO #Temp
 FROM PrincipalTeam pt 
INNER JOIN PrincipalTeamPBL ptp ON pt.PrincipalTeamId = ptp.PrincipalTeamId
INNER JOIN uv_Product up ON ptp.PrincipalBusinessLineId = up.PrincipalBusinessLineId
INNER JOIN PrincipalTeamProduct ptp2 ON pt.PrincipalTeamId = ptp2.PrincipalTeamId AND up.ProductId = ptp2.ProductId 

 GO 
ALTER PROC [dbo].[usp_Report_GenericDataSetSales] 
	@LocationIds varchar(200), 
	@CompanyIds varchar(20),  
	@PBLIds varchar(100),   
	@SaleTypeIds varchar(100),   
	@MainAreaIds varchar(MAX),  
	@SubAreaIds varchar(MAX),  
	@CustomerIds varchar(MAX),  
	@ProductIds varchar(MAX),  	
	@BatchNo varchar(50), 
	@SelectAll int,
	@FromDate datetime, 
	@ToDate datetime,   	   
	@IsCash bit,
	@IsCredit bit,
	@CustStatus int ,
	@MAreaStatus INT,
	@SAreaStatus INT,
	@BookerStatus INT,
	@SupplierStatus INT,
    @IsinvoiceDate BIT,
    @PBLWise BIT
AS 

--DECLARE 
--	@LocationIds varchar(1000), 
--	@CompanyIds varchar(1000),  
--	@PBLIds varchar(1000),   
--	@SaleTypeIds varchar(1000),   
--	@MainAreaIds varchar(1000),  
--	@SubAreaIds varchar(1000),  
--	@CustomerIds varchar(1000),  
--	@ProductIds varchar(1000),   
--	@BatchNo varchar(10),  
--	@SelectAll int, 
--	@FromDate datetime, 
--	@ToDate datetime,   		      
--    @IsCash bit,
--	@IsCredit bit,
--	@MAreaStatus INT,
--	@SAreaStatus INT,
--	@BookerStatus INT,
--	@SupplierStatus INT,
--	@CustStatus INT,
--	@IsinvoiceDate  BIT ,
--  @PBLWise BIT 
--SET @LocationIds = '11'--'11,14'--'11,18,23,28,30,35,37,42,44'  
--SET @CompanyIds= '1'
--SET @PBLIds = '3'--3,4,'--'7,3,5,28,40,4,33,37,38,20,35,41,43,44,45,47,48,49,50,55,57,58,59,60,61,62'
--SET @SaleTypeIds = ''--'1,2,3,4,5'
--SET @MainAreaIds = ''--'24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43'
--SET @SubAreaIds = ''--'149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238'
--SET @ProductIds = '' --'2545'
--SET @BatchNo = ''
--SET @CustomerIds= ''--'2780,2781'
--SET @SelectAll=2
--SET @FromDate = '2014-05-01'  
--SET @ToDate = '2014-05-31' 
--SET @IsCash= 1
--SET @IsCredit= 1
--SET @CustStatus = 0
--SET @IsinvoiceDate = 0
--SET @MAreaStatus = 0
--SET @SAreaStatus = 0
--SET @BookerStatus = 0
--SET @SupplierStatus = 0
--SET @PBLWise = 0
--SELECT * 
--INTO #CUSTOMER 
--FROM
--(
--	SELECT so.LocationId,
--		   SO.SaleOrderId,
--		   so.TransactionDate,
--		   SO.SalePassDate,
--		   so.SaleTypeId,
--		   SO.BookerId,
--		   SO.SupplierId,
--		   so.IsCash,
--		   csa.Customerid,
--		   csa.[Customer Name],
--		   csa.[Address],
--		   sa.MainAreaId,
--		   csa.SubAreaId,
--		   csa.[Sub Area]
--	FROM SALEORDER SO 
--	INNER JOIN uv_CustomerSalesArea csa ON SO.LocationId = CSA.LocationId 
--	 AND SO.CustomerId = CSA.CUSTOMERID 
--	INNER JOIN SubArea sa ON sa.SubAreaId = csa.SubAreaId
--	INNER JOIN   DBO.Split(@CompanyIds, ',' ) Company ON ( Company.Data = so.CompanyId OR @CompanyIds = '' )
--	INNER JOIN   DBO.Split(@CustomerIds, ',' ) Customer ON ( Customer.Data = so.CustomerId OR @CustomerIds = '' )
--	INNER JOIN DBO.Split(@LocationIds, ',' ) Loc ON ( Loc.Data = csa.LocationId OR @LocationIds = '')
--	INNER JOIN DBO.Split(@MainAreaIds, ',' ) MainArea ON ( MainArea.Data = csa.MainAreaId OR @MainAreaIds = '')
--	INNER JOIN DBO.Split(@SubAreaIds, ',' )  SubArea  ON ( SubArea.Data = csa.SubAreaId   OR @SubAreaIds = '' )


--	WHERE SO.IsRollbacked = 0 AND  so.CustomerToBeOpenedSubAreaId IS NULL AND 
--	(
--		@MAreaStatus = 0
--		OR (
--			   @MAreaStatus = 1
--			   AND (
--					   DATEDIFF(DAY, csa.[Main Area EffectiveDate], GETDATE()) >= 0
--					   AND DATEDIFF(DAY, GETDATE(), ISNULL(csa.[Main Area EndDate], GETDATE() + 1)) > 0
--				   )
--		   )
--		OR (
--			   @MAreaStatus = 2
--			   AND DATEDIFF(DAY, csa.[Main Area EndDate], ISNULL(GETDATE(), GETDATE() + 1)) > 0
--		   )
--	)	
--		AND 
--	(
--		@SAreaStatus = 0
--		OR (
--			   @SAreaStatus = 1
--			   AND (
--					   DATEDIFF(DAY, sa.EffectiveDate, GETDATE()) >= 0
--					   AND DATEDIFF(DAY, GETDATE(), ISNULL(sa.EndDate, GETDATE() + 1)) > 0
--				   )
--		   )
--		OR (
--			   @SAreaStatus = 2
--			   AND DATEDIFF(DAY, sa.EndDate, ISNULL(GETDATE(), GETDATE() + 1)) > 0
--		   )
--	)
--		AND 
--	(
--		@CustStatus = 0
--		OR (
--			   @CustStatus = 1
--			   AND (
--					   DATEDIFF(DAY, csa.[Cus Effective Date], GETDATE()) >= 0
--					   AND DATEDIFF(DAY, GETDATE(), ISNULL(csa.[Cus End Date], GETDATE() + 1)) > 0
--				   )
--		   )
--		OR (
--			   @CustStatus = 2
--			   AND DATEDIFF(DAY, csa.[Cus End Date], ISNULL(GETDATE(), GETDATE() + 1)) > 0
--		   )
--	)

--	UNION ALL

--	SELECT so.LocationId,
--		   SO.SaleOrderId,
--		   so.TransactionDate,
--		   SO.SalePassDate,
--		   so.SaleTypeId,
--		   SO.BookerId,
--		   SO.SupplierId,
--		   so.IsCash,
--		   csa.Customerid,
--		   SO.CustomerToBeOpenedName [Customer Name],
--		   so.CustomerToBeOpenedAddress [Address],
--		   sa.MainAreaId,
--		   sa.SubAreaId,
--		   sa.[Name] [Sub Area]
--	FROM SaleOrder so 
--	INNER JOIN  Customer csa ON so.LocationId = csa.LocationId 
--	 AND so.CustomerId = csa.CustomerId
--	INNER JOIN SubArea sa ON sa.SubAreaId = so.CustomerToBeOpenedSubAreaId
--	INNER JOIN MainArea ma ON ma.MainAreaId = sa.MainAreaId
--	INNER JOIN location l ON csa.LocationId = l.LocationId
--	INNER JOIN DBO.Split(@LocationIds, ',' ) Loc ON ( Loc.Data = csa.LocationId OR @LocationIds = '')
--	INNER JOIN DBO.Split(@MainAreaIds, ',' ) MainArea ON ( MainArea.Data = sa.MainAreaId OR @MainAreaIds = '')
--	INNER JOIN DBO.Split(@SubAreaIds, ',' )  SubArea  ON ( SubArea.Data = sa.SubAreaId   OR @SubAreaIds = '' )

--	WHERE SO.IsRollbacked = 0   
--	AND so.CustomerToBeOpenedSubAreaId IS NOT NULL 
--	AND 
--	(
--		@MAreaStatus = 0
--		OR (
--			   @MAreaStatus = 1
--			   AND (
--					   DATEDIFF(DAY, ma.EffectiveDate, GETDATE()) >= 0
--					   AND DATEDIFF(DAY, GETDATE(), ISNULL(ma.EndDate, GETDATE() + 1)) > 0
--				   )
--		   )
--		OR (
--			   @MAreaStatus = 2
--			   AND DATEDIFF(DAY, ma.EndDate, ISNULL(GETDATE(), GETDATE() + 1)) > 0
--		   )
--	)	
--		AND 
--	(
--		@SAreaStatus = 0
--		OR (
--			   @SAreaStatus = 1
--			   AND (
--					   DATEDIFF(DAY, sa.EffectiveDate, GETDATE()) >= 0
--					   AND DATEDIFF(DAY, GETDATE(), ISNULL(sa.EndDate, GETDATE() + 1)) > 0
--				   )
--		   )
--		OR (
--			   @SAreaStatus = 2
--			   AND DATEDIFF(DAY, sa.EndDate, ISNULL(GETDATE(), GETDATE() + 1)) > 0
--		   )
--	)
--		AND 
--	(
--		@CustStatus = 0
--		OR (
--			   @CustStatus = 1
--			   AND (
--					   DATEDIFF(DAY, csa.EffectiveDate, GETDATE()) >= 0
--					   AND DATEDIFF(DAY, GETDATE(), ISNULL(csa.EndDate, GETDATE() + 1))
--						   > 0
--				   )
--		   )
--		OR (
--			   @CustStatus = 2
--			   AND DATEDIFF(DAY, csa.EndDate, ISNULL(GETDATE(), GETDATE() + 1)) > 0
--		   )
--	)
--)C


SELECT 	
	l.ShortName AS [LOCATION NAME], 	
	A.SaleOrderId AS [SO NO],
	a.[SO DATE] ,
	convert(VARCHAR(10),A.[SALE DATE],103) AS [SALE DATE],
	right(convert(varchar(20),[SALE DATE],06), len(convert(varchar(20),[SALE DATE],06)) -3)AS [PERIOD],            
	A.CustomerId AS [CODE],
	csa.[Customer Name] AS [CUSTOMER NAME],
	csa.Address AS [ADDRESS],
	csa.[Main Area] AS [MAIN AREA],
	csa.[Sub Area] AS [SUB AREA],
	a.[SALE NATURE] AS [SALE NATURE],
	a.SaleTypeId,
	A.[SALE TYPE],	
	us.Name AS [BOOKER],	
	US1.Name AS [SUPPLIER],
	up.PBLShortName AS [PBL],
	Case when @PBLWise = 0 then  pl.[Description] ELSE '' END AS [PRODUCT LINE],
	Case when @PBLWise = 0 then A.ProductId ELSE '' END AS [PROD ID], 	
	Case when @PBLWise = 0 then UP.Name ELSE '' END AS [PRODUCT NAME], 		
	Case when @PBLWise = 0 then A.BatchNumber ELSE '' END AS [BATCH NO],
	Case when @PBLWise = 0 then B.ExpiryDate ELSE '1900-01-01' END AS [BATCH EXPIRY],
	Case when @PBLWise = 0 then isnull(A.[ORDER Quantity],0) ELSE 0 END AS [ORDER QUANTITY],
	Case when @PBLWise = 0 then isnull(A.[Invoice Quantity],0) ELSE 0 END AS [INVOICE QUANTITY],
	Case when @PBLWise = 0 then A.TP ELSE 0 END AS [TP],  
	-- pl.[Description] [PRODUCT LINE],
	--A.ProductId [PROD ID], 	
	--UP.Name AS [PRODUCT NAME], 		
	--A.BatchNumber AS [BATCH NO],
	--B.ExpiryDate AS [BATCH EXPIRY],
	--isnull(A.[ORDER Quantity],0) AS [ORDER QUANTITY],
	--isnull(A.[Invoice Quantity],0) AS [INVOICE QUANTITY],
	--A.TP AS [TP], 
	CONVERT(DECIMAL(18, 4),CASE WHEN ST.IsFree = 1 THEN 0 ELSE a.[TP Value] END) [TP VALUE],
	A.[Discount Value], 
	A.[Tax Value]
	INTO #temp
FROM 
(
	SELECT 
		so.LocationId, 
		CONVERT(VARCHAR(10),SO.SaleOrderId) AS SaleOrderId,
		SO.TransactionDate AS [SO DATE],
		SO.SalePassDate AS [SALE DATE],
		SO.SaleTypeId, 	
		st1.Name AS [SALE TYPE],			
--		C.MainAreaId,
--		C.SubAreaId,	
--		C.[Sub Area] AS [Sub Area],	
		SO.BookerId, 
		SO.SupplierId,
		SO.CustomerId,
--		C.[Customer Name] AS [Customer],
--		C.Address AS [Address],
		sop.PrincipalBusinessLineId, 
		sop.ProductId, 
		sop.StockTypeId, 
		sop.BatchNumber, 
		sop.TP,
		CASE WHEN SO.IsCash=1 THEN 'CASH' ELSE 'CREDIT' END AS [SALE NATURE], 
		sop.OrderQuantity  AS [ORDER Quantity],
		sop.SoldQuantity AS [Invoice Quantity],			
		ISNULL(sop.SoldQuantity * sop.TP,0)  [TP Value],
		sop.TotalOutputTaxGST + sop.TotalOutputTaxOther AS [Tax],
		(sop.SoldQuantity * sop.TP) + (sop.TotalOutputTaxGST + sop.TotalOutputTaxOther) [Amount],
		CASE WHEN ((sop.SoldQuantity * sop.TP) = 0) THEN 0 ELSE ISNULL(sop.Discount,0)/*/(sop.SoldQuantity * sop.TP) END * 100 */ END AS [Discount Value],
		CASE WHEN ((sop.SoldQuantity * sop.TP) = 0) THEN 0 ELSE (isnull(sop.TotalOutputTaxGST,0) + isnull(sop.TotalOutputTaxOther,0)) /*/ (sop.SoldQuantity * sop.TP)   END * 100 */ END [Tax Value],
		SO.SaleOrderId AS [SO]
	FROM SaleOrder SO INNER JOIN SaleOrderProduct sop ON   sop.LocationId = SO.LocationId 
		 AND   sop.SaleOrderId = SO.SaleOrderId 				
		INNER JOIN SaleType st1 ON st1.SaleTypeId = SO.SaleTypeId 
		INNER JOIN   DBO.Split(@CompanyIds, ',' ) Company ON ( Company.Data = SO.CompanyId OR @CompanyIds = '' )	
		INNER JOIN   DBO.Split(@LocationIds, ',' ) Loc ON  ( Loc.Data = SO.LocationId OR @LocationIds = '' )
		INNER JOIN   DBO.Split(@CustomerIds, ',' ) Customer ON ( Customer.Data = SO.CustomerId OR @CustomerIds = '' )						
		INNER JOIN   DBO.Split(@PBLIds, ',' ) PBL ON (PBL.Data = sop.PrincipalBusinessLineId OR @PBLIds = '' )
		INNER JOIN   DBO.Split(@ProductIds, ',' ) Product ON ( Product.Data = sop.ProductId OR @ProductIds = '' )			 
		INNER JOIN   DBO.Split(@SaleTypeIds, ',' ) SaleTypes ON ( SaleTypes.Data = so.SaleTypeId OR @SaleTypeIds = '' )			 
	
	WHERE  SO.IsRollbacked = 0
		AND sop.EndDate IS NULL 
		AND (@SelectAll = 0 OR (@SelectAll = 1 AND ( DATEDIFF(DAY,CASE WHEN @IsinvoiceDate = 1 THEN SO.TransactionDate ELSE SO.SalePassDate END ,  @FromDate) = 0))
        OR (@SelectAll = 2 AND ( DATEDIFF(DAY,CASE WHEN @IsinvoiceDate = 1 THEN SO.TransactionDate ELSE SO.SalePassDate END ,  @FromDate) <= 0
              AND  DATEDIFF(DAY,CASE WHEN @IsinvoiceDate = 1 THEN SO.TransactionDate ELSE SO.SalePassDate END ,  @ToDate) >= 0)))
		                                              	
		AND((@IsCash=1 AND SO.IsCash=1)  OR (@IsCredit=1 AND SO.IsCash=0)) 
		AND (@BatchNo = '' OR SOP.BatchNumber = @BatchNo)		


		
	UNION ALL
	
	SELECT 
		S.LocationId, 
		'SLN-'+ CONVERT(VARCHAR(10),s.SLNId) AS SaleOrderId,
		s.TransactionDate AS [SO DATE],
		S.TransactionDate AS [SALE DATE],
		NULL AS SaleTypeId, 
		'' [SALE TYPE],			
--		sa.MainAreaId, 
--		SA.SubAreaId,
--		sa.Name AS [Sub Area],
		s.UDLSalesForceId AS [BookerId], 
		s.UDLSalesForceId AS SupplierId,
		s.CustomerId,
--		csa.[Customer Name] AS [Customer],
--		csa.Address AS [Address],
		s.PrincipalBusinessLineId, 
		s2.ProductId, 
		s2.StockTypeId, 
		s2.BatchNumber, 
		pc.TP, 
		CASE WHEN s.IsCash=1 THEN 'CASH' ELSE 'CREDIT' END  AS [SALE NATURE],
		-1*s2.Quantity AS [ORDER Quantity],
		-1*s2.Quantity AS [Invoice Quantity],		
		-1*s2.Quantity * pc.TP  [TP Value],
		-1*S2.OutputTaxAmount AS [Tax],
		-1*(S2.Quantity * pc.TP) + S2.OutputTaxAmount [Amount],		
		CASE WHEN (s2.Quantity * pc.TP) = 0 THEN 0 ELSE (s.DiscountUDLPart + s.DiscountPrincipalPart)/*/(s.TotalTP) END  * 100 */ END AS [Discount],
		CASE WHEN (s2.Quantity * pc.TP) = 0 THEN 0 ELSE (S2.OutputTaxAmount/*/(s2.Quantity * pc.TP)) END * 100 */ ) END AS [Tax],		
		9999999 AS [SO]
	FROM SLN s
		INNER JOIN SLNProduct s2 ON s2.LocationId = s.LocationId AND s2.SLNId = s.SLNId   
--		INNER JOIN uv_CustomerSalesArea csa ON csa.CustomerId=S.CustomerId AND csa.LocationId=S.LocationId
--		INNER JOIN SubArea sa ON sa.SubAreaId=csa.SubAreaId
		INNER JOIN PriceCatalog pc ON  pc.PriceCatalogId=s2.PriceId
		INNER JOIN   DBO.Split(@CompanyIds, ',' ) Company ON ( Company.Data = s.CompanyId OR @CompanyIds = '' )	
		INNER JOIN   DBO.Split(@LocationIds, ',' ) Loc ON  ( Loc.Data = s.LocationId OR @LocationIds = '' )
		INNER JOIN   DBO.Split(@CustomerIds, ',' ) Customer ON ( Customer.Data = s.CustomerId OR @CustomerIds = '' )						
		INNER JOIN   DBO.Split(@PBLIds, ',' ) PBL ON (PBL.Data = s.PrincipalBusinessLineId OR @PBLIds = '' )			 
		INNER JOIN   DBO.Split(@ProductIds, ',' ) Product ON ( Product.Data = s2.ProductId OR @ProductIds = '' )			
--		INNER JOIN   DBO.Split(@MainAreaIds, ',' ) MainArea ON ( MainArea.Data = sa.MainAreaId OR @MainAreaIds = '' )
--		INNER JOIN   DBO.Split(@SubAreaIds, ',' ) SubArea ON ( SubArea.Data = sa.SubAreaId OR @SubAreaIds = '' )
	WHERE s2.Quantity > 0 AND
		(
           @SelectAll = 0
       OR  (
               @SelectAll = 1
          AND  (   
                   DATEDIFF(DAY,s.TransactionDate,  @FromDate) = 0
               )
           )
       OR  (
               @SelectAll = 2
          AND  (
                   DATEDIFF(DAY,s.TransactionDate,  @FromDate) <= 0
              AND  DATEDIFF(DAY,s.TransactionDate,  @ToDate) >= 0
               )
           )
		)	
	
		AND((@IsCash=1 AND s.IsCash=1)  OR (@IsCredit=1 AND s.IsCash=0)) 
		AND (@BatchNo = '' OR s2.BatchNumber = @BatchNo )
		AND s2.IsFree=0
		AND S.IsRollbacked = 0	
)
 AS A 
INNER JOIN  Batch b ON ( b.BatchNumber = A.BatchNumber AND   b.ProductId = A.ProductId )
INNER JOIN  uv_Product up ON  up.ProductId = A.ProductId
INNER JOIN ProductLine pl ON up.ProductLineId = pl.ProductLineId
INNER JOIN  Location l ON  l.LocationId = A.LocationId
INNER JOIN  StockType st ON  st.StockTypeId = A.StockTypeId
INNER JOIN uv_CustomerSalesArea csa ON csa.LocationId=A.LocationId AND csa.CustomerId=A.CustomerId
INNER JOIN   DBO.Split(@MainAreaIds, ',' ) MainArea ON ( MainArea.Data = csa.MainAreaId OR @MainAreaIds = '' )
INNER JOIN   DBO.Split(@SubAreaIds, ',' ) SubArea ON ( SubArea.Data = csa.SubAreaId OR @SubAreaIds = '' )

--TO INCLUDE SPOT AND SHOP SALE 
LEFT JOIN  UDLSalesForce us ON US.UDLSalesForceId = a.BookerId AND ( @BookerStatus = 0 OR ( @BookerStatus = 1 AND ( DATEDIFF(day, us.EffectiveDate,GETDATE())>= 0 AND DATEDIFF(day,GETDATE(), isnull( us.EndDate,GETDATE()+1))> 0))
	OR ( @BookerStatus = 2 AND  DATEDIFF(day,us.EndDate,ISNULL(GETDATE(), GETDATE()+1))>0 ))
LEFT JOIN  UDLSalesForce us1 ON US1.UDLSalesForceId = a.SupplierId AND ( @SupplierStatus = 0 OR ( @SupplierStatus = 1 AND ( DATEDIFF(day, us1.EffectiveDate,GETDATE())>= 0 AND DATEDIFF(day,GETDATE(), isnull( us1.EndDate,GETDATE()+1))> 0))
	OR ( @SupplierStatus = 2 AND  DATEDIFF(day,us1.EndDate,ISNULL(GETDATE(), GETDATE()+1))>0 ))
WHERE
		( @CustStatus = 0 OR ( @CustStatus = 1 AND ( DATEDIFF(day, csa.[Cus Effective Date],GETDATE())>= 0 AND DATEDIFF(day,GETDATE(), isnull( csa.[Cus End Date],GETDATE()+1))> 0))
	OR ( @CustStatus = 2 AND  DATEDIFF(day,csa.[Cus End Date],ISNULL(GETDATE(), GETDATE()+1))>0 ))
	AND  
	( @MAreaStatus = 0 OR ( @MAreaStatus = 1 AND ( DATEDIFF(day, csa.[Main Area EffectiveDate],GETDATE())>= 0 AND DATEDIFF(day,GETDATE(), isnull( csa.[Main Area EndDate],GETDATE()+1))> 0))
	OR ( @MAreaStatus = 2 AND  DATEDIFF(day,csa.[Main Area EndDate],ISNULL(GETDATE(), GETDATE()+1))>0 ))	
	AND  
	( @SAreaStatus = 0 OR ( @SAreaStatus = 1 AND ( DATEDIFF(day, csa.[Sub Area EffectiveDate],GETDATE())>= 0 AND DATEDIFF(day,GETDATE(), isnull( csa.EndDate,GETDATE()+1))> 0))
	OR ( @SAreaStatus = 2 AND  DATEDIFF(day,csa.EndDate,ISNULL(GETDATE(), GETDATE()+1))>0 ))

 	
ORDER  BY   
	L.SequenceId ,
	A.LocationId,
	[Location Name],
	a.[SO DATE],	
	A.CustomerId, 
	csa.[Customer Name],
	A.PrincipalBusinessLineId, 	 	
	A.ProductId
	
	
--DECLARE @PBLWise BIT 
--SET @PBLWise = 1
SELECT [LOCATION NAME], 	
	[SO NO],
	[SO DATE],
	[PERIOD],
	[SALE DATE],
	[CODE],
	[CUSTOMER NAME],
	[ADDRESS],
	[MAIN AREA],
	[SUB AREA],
	[SALE NATURE],
	SaleTypeId,
	[SALE TYPE],	
	[BOOKER],	
	[SUPPLIER],
	[PBL], 
	[PRODUCT LINE],
	[PROD ID], 	
	[PRODUCT NAME], 		
	[BATCH NO],
	[BATCH EXPIRY],
	[ORDER QUANTITY],
	[INVOICE QUANTITY],
	[TP],  
	SUM([TP VALUE]) AS [TP VALUE],
	SUM([Discount Value]) AS [Discount Value], 
	SUM([Tax Value]) AS [Tax Value]
FROM #Temp
GROUP BY 
[LOCATION NAME], 	
	[SO NO],
	[SO DATE] ,
	[PERIOD],
	[SALE DATE],
	[CODE],
	[CUSTOMER NAME],
	[ADDRESS],
	[MAIN AREA],
	[SUB AREA],
	[SALE NATURE],
	SaleTypeId,
	[SALE TYPE],	
	[BOOKER],	
	[SUPPLIER],
	[PBL], 
	[PRODUCT LINE],
	[PROD ID], 	
	[PRODUCT NAME], 		
	[BATCH NO],
	[BATCH EXPIRY],
	[ORDER QUANTITY],
	[INVOICE QUANTITY],
	[TP]
--DROP TABLE #Temp
 
 GO 
/************************************************************
 * Code formatted by SoftTree SQL Assistant � v4.6.12
 * Time: 5/19/2014 11:42:15 AM
 ************************************************************/

DECLARE @CompanyId      INT,
        @LocationIds    NVARCHAR(MAX),
        @PBLIds         NVARCHAR(MAX),
        @SelectAll      INT,
        @FromDate       DATETIME,
        @ToDate         DATETIME,
        @IsConsignment  BIT,
        @IsCommercial   BIT,
        @StockTypeIds   NVARCHAR(MAX)
 
SET @CompanyId = '1'
SET @LocationIds = '11'
SET @PBLIds = '28'
SET @StockTypeIds = ''
SET @SelectAll = '0'
SET @FromDate = ''
SET @ToDate = ''
SET @IsConsignment = ''
SET @IsCommercial = 1
  
SELECT ussl.LocationId,
       ussl.PrincipalBusinessLineId ,
       ussl.ProductId,
       -SUM(ussl.Quantity) [SoldQuantity],
       0 GRNQuantity
       --ussl.TransactionDate AS [Date]
FROM   uv_Sales_SLN ussl
       INNER JOIN PriceCatalog pc
            ON  ussl.PriceId = pc.PriceCatalogId
       INNER JOIN DBO.Split(@PBLIds, ',') PBL
            ON  (PBL.Data = ussl.PrincipalBusinessLineId OR @PBLIds = '')
       INNER JOIN DBO.Split(@LocationIds, ',') Location
            ON  (Location.Data = ussl.LocationId OR @LocationIds = '')
WHERE  @CompanyId = ussl.CompanyId
       AND (
               @SelectAll = 0
               OR (
                      @SelectAll = 1
                      AND (DATEDIFF(DAY, ussl.TransactionDate, @FromDate) = 0)
                  )
               OR (
                      @SelectAll = 2
                      AND (
                              DATEDIFF(DAY, ussl.TransactionDate, @FromDate) <=
                              0
                              AND DATEDIFF(DAY, ussl.TransactionDate, @ToDate) >
                                  = 0
                          )
                  )
           )
GROUP BY
       ussl.LocationId,
       ussl.PrincipalBusinessLineId,
       ussl.ProductId,
       ussl.TransactionDate


UNION ALL

SELECT usso.LocationId,
       usso.PrincipalBusinessLineId ,
       usso.ProductId,
       SUM(usso.SoldQuantity) [SoldQuantity],
       0 GRNQuantity
       --usso.SalePassDate AS [Date]
FROM   uv_Sales_SaleOrder usso
       INNER JOIN DBO.Split(@PBLIds, ',') PBL
            ON  (PBL.Data = usso.PrincipalBusinessLineId OR @PBLIds = '')
       INNER JOIN DBO.Split(@LocationIds, ',') Location
            ON  (Location.Data = usso.LocationId OR @LocationIds = '')
WHERE  @CompanyId = usso.CompanyId
       AND (
               @SelectAll = 0
               OR (
                      @SelectAll = 1
                      AND (DATEDIFF(DAY, usso.SalePassDate, @FromDate) = 0)
                  )
               OR (
                      @SelectAll = 2
                      AND (
                              DATEDIFF(DAY, usso.SalePassDate, @FromDate) <= 0
                              AND DATEDIFF(DAY, usso.SalePassDate, @ToDate) >= 0
                          )
                  )
           )
GROUP BY
       usso.LocationId,
       usso.PrincipalBusinessLineId,
       usso.ProductId,
       usso.SalePassDate

UNION ALL   
 
SELECT g.LocationId,
       G.PrincipalBusinessLineId,
       gp.GRNProductId AS ProductId,
       0 SoldQuantity,
       gp.QuantityReceived AS GRNQuantity--,g.TransactionDate
FROM   GRN g
       INNER JOIN DBO.Split(@LocationIds, ',') l
            ON  (l.Data = g.LocationId OR @LocationIds = '')
       INNER JOIN DBO.Split(@PBLIds, ',') pbl
            ON  (pbl.Data = g.PrincipalBusinessLineId OR @PBLIds = '')
       INNER JOIN GRNProduct gp
            ON  gp.GRNId = g.GRNId
            AND gp.LocationId = g.LocationId
WHERE  @CompanyId = g.CompanyId
       AND (
               @SelectAll = 0
               OR (
                      @SelectAll = 1
                      AND (DATEDIFF(DAY, g.TransactionDate, @FromDate) = 0)
                  )
               OR (
                      @SelectAll = 2
                      AND (
                              DATEDIFF(DAY, g.TransactionDate, @FromDate) <= 0
                              AND DATEDIFF(DAY, g.TransactionDate, @ToDate) >= 0
                          )
                  )
           )
       AND g.IsRollbacked = 0
			
			

 GO 
DECLARE @CompanyId INT, @LocationIds NVARCHAR(200), @PBLIds NVARCHAR(200), @SchemeBasedOn BIT, @SchemeIds NVARCHAR(MAX),  @FromDate DATETIME, @ToDate DATETIME,
@Sharing INT,@DateStatus INT 

SET @CompanyId = '1'
SET @LocationIds = '14'
SET @PBLIds = '40'

SET @SchemeBasedOn = ''
SET @SchemeIds = ''

/*0-All
* 1-Specific
* 2-Between*/
SET @DateStatus = '2'
SET @FromDate = '2013-11-23 00:00:00.000'
SET @ToDate = '2013-11-26 00:00:00.000'

SET @Sharing = ''

SELECT so.SaleOrderId,
	so.SalePassDate,
	so.CustomerId,
	ISNULL(so.CustomerToBeOpenedName , c.[Name]) AS CustomerName,
	sop.PrincipalBusinessLineId,sop.ProductId,sop.SoldQuantity,
	sos.SchemeId , s.[Description] AS [Scheme Description]

FROM 
dbo.SaleOrder so 
INNER JOIN dbo.SaleorderProduct sop ON so.LocationId = sop.LocationId AND so.SaleOrderId = sop.SaleOrderId
INNER JOIN dbo.SaleOrderScheme sos ON so.LocationId = sos.LocationId AND so.SaleOrderId = sos.SaleOrderId
INNER JOIN dbo.[Scheme] s ON sos.SchemeId = s.SchemeId
INNER JOIN dbo.Customer c ON so.LocationId = c.LocationId AND so.CustomerId = c.CustomerId
INNER JOIN DBO.[Split](@LocationIds,',')LOC ON LOC.[Data] = so.LocationId OR @LocationIds = ''
INNER JOIN DBO.[Split](@SchemeIds,',')SI ON SI.[Data] = sos.SchemeId OR @SchemeIds = ''

WHERE so.CompanyId = @CompanyId
AND sop.PrincipalBusinessLineId =@PBLIds
AND (@DateStatus = 0
     OR (@DateStatus = 1 AND so.SalePassDate = @FromDate)
     OR (@DateStatus = 2 AND so.salePassDate BETWEEN @FromDate AND @ToDate))
 GO 
CREATE PROC usp_Report_SalesPromotionDiscount @CompanyId INT, @PBLIds VARCHAR(100), @LocationIds VARCHAR(100), @FromDate DATETIME, @ToDate DATETIME, @SchemeGroupIds VARCHAR(1000), 
@ClaimGroupIds VARCHAR(1000), @SchemeIds VARCHAR(1000), @SharingBy INT, @IncludeReturns BIT, @FromBCGId INT, @ToBCGId INT, @FromBCGDate DATETIME, @ToBCGDate DATETIME, 
@SpecificBCGIds VARCHAR(100) AS

--DECLARE @CompanyId INT, @PBLIds VARCHAR(100), @LocationIds VARCHAR(100), @FromDate DATETIME, @ToDate DATETIME, @SharingBy INT, 
--@IncludeReturns BIT, @SchemeGroupIds VARCHAR(1000), @ClaimGroupIds VARCHAR(1000), @SchemeIds VARCHAR(1000), 
--@FromBCGId INT, @ToBCGId INT, @FromBCGDate DATETIME, @ToBCGDate DATETIME
--SET @CompanyId = 4
--SET @PBLIds = '1'--'1,2,3,10,17,19,20,22,23,24,25'--'27,28,21,22,23,26,29'--
--SET @LocationIds = '32'--'63,64,59,58,62,51,60,54,53,47,50,57'--'2,14,16,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54'
--SET @FromDate = '1900-01-01 00:00:00'--'2011-01-01'
--SET @ToDate = '2013-07-13 00:00:00'
--SET @SharingBy = 0 /*0.)ALL;1.)UDL;2.)PRINCIPAL*/
--SET @IncludeReturns = 1
--SET @SchemeGroupIds = ''--'6,8,11,16,17'
--SET @ClaimGroupIds = ''--'7,9,12,14,16,18'
--SET @SchemeIds = ''--'1,3,4,5,7,8,12,14,15,70,71,75,77,85,86,111,113,114,115,116,117,121,123,124,131,132,133'
--SET @FromBCGId = 142--0
--SET @ToBCGId = 142--999999
--SET @FromBCGDate = '1900-01-01 00:00:00'--'2012-12-08 00:00:00.000'
--SET @ToBCGDate = '2013-07-13 00:00:00'


SELECT so.LocationId,
       so.CustomerId,
       so.CustomerToBeOpenedName,
       so.CustomerToBeOpenedAddress,
       so.CustomerToBeOpenedSubAreaId,
       so.SaleOrderId,
       so.TransactionDate,
       DATEADD(DAY, DATEDIFF(DAY, 0, so.SalePassDate), 0) SalePassDate,
       so.SaleTypeId,
       so.IsCash,
	   s.SchemeGroupId,
	   s.ClaimGroupId,
	   s.SchemeId,
	   s.[Description] [SchemeDescription],
	   s.IsInvoiceBased,
	   bc.BranchClaimId [BCG Id], 
	   bc.TransactionDate [BCG Date],
	   s.PrincipalBusinessLineId,
	   s.AppliedProductId [ProductId],
	   s.AppliedStockTypeId [StockTypeId],
	   SUM(sos.AppliedOnTPValue) AppliedOnTPValue,
	   SUM
	   (
   		sos.Discount * 
		   (
   			(
   				CASE 
   				WHEN @SharingBy = 1 THEN s.UDLPercentage 
   				WHEN @SharingBy = 2 THEN (100 - s.UDLPercentage)
   				ELSE 100 
   				END
   			)/100
		   )
	   ) [Discount]
INTO #TempScheme
	   
FROM SaleOrder so
INNER JOIN SaleOrderScheme sos ON sos.LocationId = so.LocationId AND sos.SaleOrderId = so.SaleOrderId
INNER JOIN Scheme s ON s.SchemeId = sos.SchemeId
INNER JOIN dbo.[Split](@LocationIds, ',') fl ON fl.[Data] = so.LocationId
INNER JOIN dbo.[Split](@PBLIds, ',') fp ON fp.[Data] = s.PrincipalBusinessLineId
INNER JOIN dbo.[Split](@SchemeIds, ',') fs ON (fs.[Data] = s.SchemeId OR @SchemeIds = '')
INNER JOIN dbo.[Split](@SchemeGroupIds, ',') fsg ON (fsg.[Data] = s.SchemeGroupId OR @SchemeGroupIds = '')
INNER JOIN dbo.[Split](@ClaimGroupIds, ',') fsc ON (fsc.[Data] = s.ClaimGroupId OR @ClaimGroupIds = '')
LEFT JOIN BranchClaim bc ON bc.LocationId = sos.LocationId
 AND bc.BranchClaimId = sos.BranchClaimId
INNER JOIN dbo.[Split](@SpecificBCGIds, ',') fbn ON (fbn.[Data] = bc.BranchClaimId OR @SpecificBCGIds = '') 
WHERE so.CompanyId = @CompanyId
AND	(DATEDIFF(DAY, @FromDate, so.SalePassDate) >= 0)
AND (DATEDIFF(DAY, @ToDate, so.SalePassDate) <= 0)	
AND	ISNULL(bc.BranchClaimId, 0) >= @FromBCGId 
AND ISNULL(bc.BranchClaimId, 0) <= @ToBCGId	 
AND	(DATEDIFF(DAY, @FromBCGDate, ISNULL(bc.TransactionDate, '1900-01-01 00:00:00')) >= 0) 
AND (DATEDIFF(DAY, @ToBCGDate, ISNULL(bc.TransactionDate, '1900-01-01 00:00:00')) <= 0)	 
AND s.IsDiscountBased = 1
AND sos.EndDate IS NULL
AND 
(
	@SharingBy = 0
	OR
	(
		@SharingBy = 1 
		AND s.UDLPercentage > 0
	) 
	OR 
	(
		@SharingBy = 2
		AND (100 - s.UDLPercentage) > 0 
	)
)
GROUP BY so.LocationId, so.CustomerId, so.CustomerToBeOpenedName, so.CustomerToBeOpenedAddress, 
so.CustomerToBeOpenedSubAreaId, so.SaleOrderId, so.TransactionDate, DATEADD(DAY, DATEDIFF(DAY, 0, so.SalePassDate), 0), 
so.SaleTypeId, so.IsCash, s.SchemeGroupId, s.ClaimGroupId, s.SchemeId, s.[Description], s.IsInvoiceBased,
bc.BranchClaimId, bc.TransactionDate,
s.PrincipalBusinessLineId, s.AppliedProductId, s.AppliedStockTypeId
HAVING SUM
	   (
   		sos.Discount * 
		   (
   			(
   				CASE 
   				WHEN @SharingBy = 1 THEN s.UDLPercentage 
   				WHEN @SharingBy = 2 THEN (100 - s.UDLPercentage)
   				ELSE 100 
   				END
   			)/100
		   )
	   ) > 0




SELECT l.ShortName [Location],
c.CustomerId [Customer Code], 
ISNULL(a.CustomerToBeOpenedName, c.[Name]) [Customer Name],
ISNULL(a.CustomerToBeOpenedAddress, (c.Address1 + ' ' + c.Address2)) [Customer Address],
ma.[Name] [Customer Main Area],
sa.[Name] [Customer Sub Area],
a.SaleOrderId [Sale Order Id],
a.TransactionDate [Sale Order Date],
a.SalePassDate [Sale Pass Date],
slt.Code [Sale Type],
CASE WHEN a.IsCash = 1 THEN 'CASH' ELSE 'CREDIT' END [Sale Nature],

sg.SchemeGroupId [Scheme Group Id], 
sg.[Name] [Scheme Group Name], 
sg.ShortName [Scheme Group Short Name],
cg.ClaimGroupId [Claim Group Id], 
cg.[Name] [Claim Group Name], 
cg.ShortName [Claim Group Short Name],
a.SchemeId [Scheme Code], 
a.[SchemeDescription] [Scheme Description],
CASE WHEN a.IsInvoiceBased = 1 THEN 'YES' ELSE 'NO' END [Invoice Based],
a.SLNId [SLN Id], 
a.[SLNDate] [SLN Date],

a.[BCG Id],
a.[BCG Date],

pbl.[Name] [PBL],

a.ProductId [Product Code],
up.ShortName [Product Name], 
st.[Name] [Stock Type], 
a.Quantity, 
a.Value [Applied On Value],
a.Discount [Discount Amount],
(a.Discount / a.Value) * 100 [Discount %], 
a.Value - a.Discount [Net Value]

FROM
(
	--SELECT 0 [IsReturn],
	--       so.LocationId,
	--       so.CustomerId,
	--       so.CustomerToBeOpenedName,
	--       so.CustomerToBeOpenedAddress,
	--       so.CustomerToBeOpenedSubAreaId,
	--       so.SaleOrderId,
	--       so.TransactionDate,
	--       so.SalePassDate,
	--       so.SaleTypeId,
	--       so.IsCash,
	--       sc.SchemeGroupId,
	--       sc.ClaimGroupId,
	--       sc.SchemeId,
	--       sc.[SchemeDescription],
	--       NULL SLNId,
	--       NULL [SLNDate],
	--       sc.PrincipalBusinessLineId,
	--       so.ProductId,
	--       so.StockTypeId,
	--       so.Quantity,
	--       so.Value,
	--       so.Discount
	--FROM  #TempScheme so
	--INNER JOIN
	--(
		SELECT 0 [IsReturn],
		       sos.LocationId,
		       sos.CustomerId,
		       sos.CustomerToBeOpenedName,
		       sos.CustomerToBeOpenedAddress,
		       sos.CustomerToBeOpenedSubAreaId,
		       sos.SaleOrderId,
		       sos.TransactionDate,
		       sos.SalePassDate,
		       sos.SaleTypeId,
		       sos.IsCash,
		       sos.SchemeGroupId,
		       sos.ClaimGroupId,
		       sos.SchemeId,
		       sos.[SchemeDescription],
		       sos.IsInvoiceBased,
		       NULL SLNId,
		       NULL [SLNDate],
		       sos.[BCG Id],
		       sos.[BCG Date],
		       sos.PrincipalBusinessLineId,
		       NULL ProductId,
		       NULL StockTypeId,
		       NULL Quantity,
		       sos.AppliedOnTPValue VALUE,
		       sos.Discount
		FROM #TempScheme sos
		WHERE sos.IsInvoiceBased = 1

		UNION ALL
					   
		SELECT 0 [IsReturn],
		       sos.LocationId,
		       sos.CustomerId,
		       sos.CustomerToBeOpenedName,
		       sos.CustomerToBeOpenedAddress,
		       sos.CustomerToBeOpenedSubAreaId,
		       sos.SaleOrderId,
		       sos.TransactionDate,
		       sos.SalePassDate,
		       sos.SaleTypeId,
		       sos.IsCash,
		       sos.SchemeGroupId,
		       sos.ClaimGroupId,
		       sos.SchemeId,
		       sos.[SchemeDescription],
		       sos.IsInvoiceBased,
		       NULL SLNId,
		       NULL [SLNDate],
		       sos.[BCG Id],
		       sos.[BCG Date],
		       sos.PrincipalBusinessLineId,
		       sop.ProductId,
		       sop.StockTypeId,
		       sop.Quantity,
		       sop.Value,
		       sos.Discount
		--SUM(sop.Quantity) Quantity, SUM(sop.Value) Value, SUM(sos.Discount) Discount
		FROM 
		(
			SELECT sop1.LocationId, sop1.SaleOrderId, sop1.ProductId, sop1.StockTypeId, SUM(sop1.SoldQuantity) Quantity, SUM(sop1.SoldQuantity * sop1.TP) VALUE--, SUM(sop1.Discount) Discount
			FROM SaleOrderProduct sop1
			WHERE sop1.EndDate IS NULL
			GROUP BY sop1.LocationId, sop1.SaleOrderId, sop1.ProductId, sop1.StockTypeId
		)
		sop 
		INNER JOIN #TempScheme sos ON sos.LocationId = sop.LocationId
		 AND sos.SaleOrderId = sop.SaleOrderId
		 AND sos.ProductId = sop.ProductId
		 AND sos.StockTypeId = sop.StockTypeId
		WHERE sos.IsInvoiceBased = 0 

		UNION ALL

		SELECT 1 [IsReturn],
			   s.LocationId,
			   s.CustomerId,
			   NULL CustomerToBeOpenedName,
			   NULL CustomerToBeOpenedAddress,
			   NULL CustomerToBeOpenedSubAreaId,
			   s.SaleOrderId,
			   so.TransactionDate,
			   so.SalePassDate,
			   so.SaleTypeId,
			   s.IsCash,
			   NULL SchemeGroupId,
			   NULL ClaimGroupId,
			   NULL SchemeId,
			   NULL [SchemeDescription],
			   0 IsInvoiceBased,
			   s.SLNId,
			   s.TransactionDate [SLNDate],
			   bc.BranchClaimId [BCG Id],
		       bc.TransactionDate [BCG Date],
			   s.PrincipalBusinessLineId,
			   s2.ProductId,
			   s2.StockTypeId,
			   -SUM(s2.Quantity) Quantity,
			   -SUM(s2.Quantity * pc.TP) VALUE,
			   -
			   (
   				--SUM
				   (
					   CASE 
							WHEN @SharingBy = 1 THEN s.DiscountUDLPart
							WHEN @SharingBy = 2 THEN s.DiscountPrincipalPart
							ELSE (s.DiscountUDLPart + s.DiscountPrincipalPart)
					   END
				   )
				   /
				   (SELECT COUNT(*) FROM SLNProduct s3 WHERE s3.LocationId = s.LocationId AND s3.SLNId = s.SLNId AND s3.Quantity > 0 AND s3.IsFree = 0) 
			   ) [Discount]
		FROM SLN s
		INNER JOIN SLNProduct s2 ON s2.LocationId = s.LocationId 
		 AND s2.SLNId = s.SLNId
		INNER JOIN PriceCatalog pc ON pc.PriceCatalogId = s2.PriceId 
		INNER JOIN dbo.[Split](@LocationIds, ',') fl ON fl.[Data] = s.LocationId
		INNER JOIN dbo.[Split](@PBLIds, ',') fp ON fp.[Data] = s.PrincipalBusinessLineId
		LEFT JOIN SaleOrder so ON so.LocationId = s.LocationId
		 AND so.SaleOrderId = s.SaleOrderId
		LEFT JOIN
		(
			SELECT DISTINCT bc.LocationId, bc.BranchClaimId, bc.TransactionDate, bcbd.SLNId 
			FROM BranchClaimBonusDiscount bcbd
			INNER JOIN BranchClaim bc ON bc.LocationId = bcbd.LocationId AND bc.BranchClaimId = bcbd.BranchClaimId
			INNER JOIN dbo.[Split](@SpecificBCGIds, ',') fbn ON (fbn.[Data] = bc.BranchClaimId OR @SpecificBCGIds = '')
			WHERE ISNULL(bcbd.SLNId, 0) > 0
			AND bcbd.ClaimAmount != 0
			AND bc.IsRollbacked = 0	
		) bc ON bc.LocationId = S.LocationId
		 AND bc.SLNId = S.SLNId 
		WHERE s.CompanyId = @CompanyId
		AND	(DATEDIFF(DAY, @FromDate, s.ApprovalDate) >= 0)
		AND (DATEDIFF(DAY, @ToDate, s.ApprovalDate) <= 0)
		AND	ISNULL(bc.BranchClaimId, 0) >= @FromBCGId 
		AND ISNULL(bc.BranchClaimId, 0) <= @ToBCGId	 
		AND	(DATEDIFF(DAY, @FromBCGDate, ISNULL(bc.TransactionDate, '1900-01-01 00:00:00')) >= 0) 
		AND (DATEDIFF(DAY, @ToBCGDate, ISNULL(bc.TransactionDate, '1900-01-01 00:00:00')) <= 0)	 
		AND @IncludeReturns = 1
		AND s2.IsFree = 0
		AND 
			(
				(
					@SharingBy = 0
					AND (ISNULL(s.DiscountUDLPart, 0) > 0 OR ISNULL(s.DiscountPrincipalPart, 0) > 0)
				)
				OR
				(
					@SharingBy = 1 
					AND ISNULL(s.DiscountUDLPart, 0) > 0
				) 
				OR 
				(
					@SharingBy = 2
					AND ISNULL(s.DiscountPrincipalPart, 0) = 0 
				)
			)
		GROUP BY s.LocationId,
			   s.CustomerId,
			   s.SaleOrderId,
			   so.TransactionDate,
			   so.SalePassDate,
			   so.SaleTypeId,
			   s.IsCash,
			   s.SLNId,
			   s.TransactionDate,
			   bc.BranchClaimId,
		       bc.TransactionDate,
			   s.PrincipalBusinessLineId,
			   s2.ProductId,
			   s2.StockTypeId,
			   s.DiscountUDLPart,
			   s.DiscountPrincipalPart
		HAVING SUM(s2.Quantity) > 0
) A
INNER JOIN Location l ON l.LocationId = a.LocationId
INNER JOIN Customer c ON c.LocationId = a.LocationId
 AND c.CustomerId = a.CustomerId
INNER JOIN uv_CustomerSalesArea csa ON csa.LocationId = A.LocationId 
 AND csa.CustomerId = A.CustomerId 
INNER JOIN SubArea sa ON sa.SubAreaId = ISNULL(a.CustomerToBeOpenedSubAreaId, csa.SubAreaId)
INNER JOIN MainArea ma ON ma.MainAreaId = sa.MainAreaId 
INNER JOIN uv_PrincipalBusinessLine_All pbl ON pbl.PrincipalBusinessLineId = a.PrincipalBusinessLineId

LEFT JOIN uv_Product up ON up.ProductId = a.ProductId
LEFT JOIN StockType st ON st.StockTypeId = a.StockTypeId
  
LEFT JOIN SaleType slt ON slt.SaleTypeId = a.SaleTypeId
LEFT JOIN SchemeGroup sg ON sg.SchemeGroupId = a.SchemeGroupId
LEFT JOIN ClaimGroup cg ON cg.ClaimGroupId = a.ClaimGroupId

ORDER BY ISNULL(l.SequenceId, 9999 + L.LocationId), c.CustomerId, a.[IsReturn], a.SaleOrderId, a.SchemeId, a.SLNId

DROP TABLE #TempScheme

 GO 

--CREATE PROC usp_Report_PaidDCReport @LocationIds varchar(100),@SupplierIds varchar(100),@SaleTypeIds varchar(100),@FromDate datetime,
--@ToDate datetime,@DCSelectAll int,@DCRange varchar(1000), @FromDCID varchar(100), @ToDCID varchar(100)
--AS 

DECLARE  @LocationIds  varchar(1000),@SupplierIds  varchar(1000),@SaleTypeIds  varchar(1000),@FromDate datetime, @ToDate datetime,@DCSelectAll int,
@DCRange varchar(1000), @FromDCID varchar(100), @ToDCID varchar(100)

SET @LocationIds='14'
SET @SupplierIds=''
SET @SaleTypeIds=''
SET @FromDate='2012-07-20'
SET @ToDate='2014-01-20'
SET @DCSelectAll=0
SET @DCRange = '1'
SET @FromDCID = '1'
SET @ToDCID = '9999'

--SELECT    st.Code AS [Sale Type],
--		A.LocationId, 
--		l.ShortName AS [Location Name],
--		A.DeliveryChallanId AS [DC No], 
--		CONVERT(varchar(12),A.TransactionDate,103)  AS [DC Date],
--		CONVERT(varchar(12),A.ExpectedReturnDate,103) AS [ExpectedReturnDate], 
--		A.[Payment Id],-- AS [Payment Id], 
--		CONVERT(varchar(12),A.[Payment Date],103) AS [Payment Date], 
--		A.SupplierId,
--		us.Name AS [Supplier Name],		
--		sop.PrincipalBusinessLineId,
--		up.PBLShortName AS [PBL Name],
--		sop.ProductId,
--		up.Name AS [Product Name],
--		sop.StockTypeId,st2.Name AS [Stock Type],
--		sum(sop.SoldQuantity) AS SoldQuantity,
--		sum(sop.TP*sop.SoldQuantity) AS [TP Value],
--		sum(sop.Discount) AS [Discount],
--		sum(sop.TotalOutputTaxGST+sop.TotalOutputTaxOther) AS [Tax],
--		sum(A.TotalNet) TotalNet,
--		sum((sop.TP*sop.SoldQuantity)-sop.Discount +(sop.TotalOutputTaxGST+sop.TotalOutputTaxOther)) AS [Total-SOP]
SELECT *		
FROM    
(
	
	SELECT dc.LocationId,
		dc.DeliveryChallanId,
	    dc.TransactionDate,
		dc.ExpectedReturnDate, 
		CSP.TransactionDate AS [Payment Date],
		csp.CashSalePaymentId AS [Payment Id], 
		csp.IsApproved,
		csp.IsRollbacked, 
		dc.SupplierId,
		DC.TotalNet
	FROM DeliveryChallan dc 
	INNER JOIN CashSalePayment csp ON csp.LocationId = dc.LocationId AND csp.DeliveryChallanId = dc.DeliveryChallanId 
	--INNER JOIN Location l ON l.LocationId = dc.LocationId
	INNER JOIN DBO.Split(@LocationIds, ',') LOC ON   (LOC.Data = dc.LocationId OR @LocationIds = '')
	INNER JOIN DBO.Split(@SaleTypeIds, ',') SaleType ON   (SaleType.Data = dc.SaleTypeId OR @SaleTypeIds = '')
	INNER JOIN DBO.Split(@SupplierIds, ',') UDLSupplier ON (UDLSupplier.Data = dc.SupplierId OR @SupplierIds = '')
	WHERE   csp.IsRollbacked = 0
	--AND csp.IsApproved=1
	AND 
	  (
		@DCSelectAll = 0
		OR (@DCSelectAll = 2 AND ((@FromDCID = '0' OR  DC.DeliveryChallanId >= @FromDCID) AND  (@ToDCID = '0' OR  DC.DeliveryChallanId <= @ToDCID)))
		OR (@DCSelectAll = 1 AND  DC.DeliveryChallanId IN (SELECT S.DATA FROM   DBO.Split(@DCRange, ',') S))
	  ) 
	AND (@FromDate='' OR  DATEDIFF(DAY, csp.TransactionDate,  @FromDate) <= 0)
	AND (@ToDate='' OR  DATEDIFF(DAY, csp.TransactionDate,  @ToDate) >= 0)

	UNION ALL 

	SELECT dc.LocationId,
			dc.DeliveryChallanId,
			DC.TransactionDate,
			DC.ExpectedReturnDate,
			CSP.TransactionDate  AS [Payment Date],
			csp.CashSalePaymentId AS [Payment Id], 
			csp.IsApproved,
			csp.IsRollbacked, 
			dc.SupplierId,
			dc.TotalNet
	FROM DeliveryChallan dc 
	INNER JOIN CashSalePaymentShopSale cspss ON cspss.LocationId = dc.LocationId AND cspss.DeliveryChallanId = dc.DeliveryChallanId
	INNER JOIN CashSalePayment csp ON csp.LocationId = cspss.LocationId AND csp.CashSalePaymentId  = cspss.CashSalePaymentId
	--INNER JOIN Location l ON l.LocationId = dc.LocationId
	INNER JOIN DBO.Split(@LocationIds, ',') LOC ON   (LOC.Data = dc.LocationId OR @LocationIds = '')
	INNER JOIN DBO.Split(@SaleTypeIds, ',') SaleType ON   (SaleType.Data = dc.SaleTypeId OR @SaleTypeIds = '')
	WHERE   csp.IsRollbacked = 0
	--AND csp.IsApproved=1
	AND 
	  (
		@DCSelectAll = 0
		OR (@DCSelectAll = 2 AND ((@FromDCID = '0' OR  DC.DeliveryChallanId >= @FromDCID) AND  (@ToDCID = '0' OR  DC.DeliveryChallanId <= @ToDCID)))
		OR (@DCSelectAll = 1 AND  DC.DeliveryChallanId IN (SELECT S.DATA FROM   DBO.Split(@DCRange, ',') S))
	  ) 
	AND (@FromDate='' OR  DATEDIFF(DAY, csp.TransactionDate,  @FromDate) <= 0)
	AND (@ToDate='' OR  DATEDIFF(DAY, csp.TransactionDate,  @ToDate) >= 0)
) A
		INNER JOIN   SaleOrder so ON   so.LocationId = a.LocationId 
		AND   so.DeliveryChallanId = a.DeliveryChallanId
		INNER JOIN   SaleOrderProduct sop ON   sop.LocationId = so.LocationId 
		AND   sop.SaleOrderId = so.SaleOrderId
		
		INNER JOIN SaleType st ON st.SaleTypeId = so.SaleTypeId
		INNER JOIN uv_Product up ON up.ProductId = sop.ProductId
		INNER JOIN StockType st2 ON st2.StockTypeId = sop.StockTypeId
		--INNER JOIN Location l ON l.LocationId = A.LocationId	
		LEFT  JOIN UDLSalesForce us ON us.LocationId = a.LocationId 
		AND us.UDLSalesForceId = a.SupplierId	
		WHERE sop.EndDate IS NULL
		
--GROUP BY
--		a.LocationId,  l.ShortName,l.SequenceId,
--		a.DeliveryChallanId,
--		a.TransactionDate,
--		a.ExpectedReturnDate, 
--		a.[Payment Id], 
--		a.IsApproved,
--		a.IsRollbacked,
--		A.[Payment Date], 
--		a.SupplierId,
--		sop.PrincipalBusinessLineId,
--		up.PBLShortName,
--		sop.ProductId,
--		up.Name,
--		sop.StockTypeId,st2.Name,
--		us.Name,
--		st.Code
		
--		ORDER BY l.SequenceId
 GO 
SELECT s.SICId
	,s.PrincipalBusinessLineId
	,sp.SICProductId
	,sp.Quantity
  FROM SIC s inner join SICProduct sp on s.LocationId = sp.LocationId AND s.SICId = sp.SICId
  INNER JOIN SICType sict ON s.SICTypeId= sict.SICTypeId
  INNER JOIN StockType st ON st.StockTypeId = s.ToStockTypeId
  INNER JOIN uv_product up ON up.ProductId = sp.ProductId
  INNER JOIN batch b ON b.ProductId = sp.ProductId AND b.BatchNumber = sp.BatchNumber
--INNER JOIN PriceCatalog pc ON pc.PriceCatalogId = sp.PriceId
--INNER JOIN Location l ON l.LocationId = s.LocationId
  WHERE s.locationid = 14 AND s.PrincipalBusinessLineId = 3
  SELECT * FROM SICProduct s WHERE s.SICId = 18
  SELECT * FROM sic WHERE LocationId = 14 AND PrincipalBusinessLineId = 3 AND IsRollbacked = 0
 GO 
--SELECT so.LocationId,so.SaleorderId,so.TotalNet AS SOAmount,SUM((sop.SoldQuantity * sop.TP)+(sop.TP/(sop.WHTRate*100))) AS SOProductAmount
--FROM Saleorder so 
--INNER JOIN SaleOrderProduct sop 
--	ON so.locationId = sop.LocationId
--	AND so.SaleOrderId = sop.SaleOrderId
--INNER JOIN PriceCatalog pc 
--	ON pc.PriceCatalogId = sop.PriceId
--WHERE   so.IsRollbacked = 0 
--		AND sop.SoldQuantity > 0
--		AND so.SalePassDate IS NOT NULL 
--		AND sop.EndDate IS  NULL
--		AND sop.WHTRate > 0 
--GROUP BY so.LocationId,so.SaleOrderId,so.TotalNet,sop.TP,sop.WHTRate
--HAVING  sum(so.TotalNet) <> SUM((sop.SoldQuantity * sop.TP)+ (sop.TP/(sop.WHTRate*100)))

SELECT * FROM (
SELECT sln.LocationId,sln.SLNId,sln.TransactionDate,sln.TotalNet as SLNAmount,SUM(sln.Quantity * pc.TP) AS SLNProductAmount,(sln.TotalNet+sln.DiscountUDLPart+sln.DiscountPrincipalPart) - SUM((sln.Quantity * pc.TP)+sln.OutputTaxAmount)  AS AmountDiff
FROM uv_sales_SLN sln 
INNER JOIN PriceCatalog pc 
	ON pc.PriceCatalogId = sln.PriceId
WHERE   sln.IsRollbacked = 0 
		AND sln.Quantity > 0 
		--AND locationId = 36 AND SLNID = 6
GROUP BY sln.LocationId,sln.SLNId,sln.TransactionDate,sln.TotalNet,sln.DiscountUDLPart,sln.DiscountPrincipalPart
)
a
WHERE a.AmountDiff>1
ORDER BY a.LocationId,a.SLNId

SELECT * FROM uv_Sales_SLN uss WHERE locationId = 12 AND SLNID = 18 
 GO 
/************************************************************
 * Code formatted by SoftTree SQL Assistant � v4.6.12
 * Time: 6/18/2014 11:06:23 AM
 ************************************************************/

DECLARE @FromDate     DATETIME,
        @ToDate       DATETIME,
        @IsCash       BIT,
        @IsCredit     BIT,
        @LocationIds  NVARCHAR(MAX),
        @PBLIds       NVARCHAR(MAX),
        @CustomerIds  NVARCHAR(MAX),
        @MainAreaIds  nvarchar(MAX),
        @SubAreaIds   NVARCHAR(MAX),
        @Product      NVARCHAR(MAX),
        @CompanyId    INT,
        @SaleTpyeIds  VARCHAR(50)

SET @FromDate = '2014-06-01'
SET @ToDate = '2014-06-17'
SET @IsCash = 1
SET @IsCredit = 1

SELECT l.ShortName,
       l.Name,
       l.SequenceId,
       sln.CustomerId,
       ucsa.[Customer Name],
       ucsa.[Sub Area],
       ucsa.[Main Area],
       sln.ProductId,
       up.Name AS ProductName,
       sln.PrincipalBusinessLineId,
       sln.PriceId,
       sln.Quantity,
       pc.TP,
       sln.Quantity * pc.TP AS [TP VALUE],
       sln.SLNId,
       sln.CompanyId
FROM   uv_Sales_SLN AS sln
       INNER JOIN Location AS l
            ON  sln.LocationId = l.LocationId
       INNER JOIN uv_CustomerSalesArea AS ucsa
            ON  sln.CustomerId = ucsa.CustomerId
       INNER JOIN uv_Product AS up
            ON  sln.ProductId = up.ProductId
            AND sln.PrincipalBusinessLineId = up.PrincipalBusinessLineId
       INNER JOIN PriceCatalog AS pc
            ON  sln.PriceId = pc.PriceCatalogId
WHERE  (sln.IsCash = 1 AND @IsCash = 1) OR (sln.IsCash = 0 AND @IsCredit = 1)
       AND (sln.IsRollbacked = 0)
       AND DATEDIFF(d, sln.TransactionDate, @FromDate) >= 0
       AND DATEDIFF(d, sln.TransactionDate, @ToDate) <= 0 
ORDER BY l.SequenceId,ucsa.MainAreaId,ucsa.SubAreaId,ucsa.CustomerId

 GO 
SELECT * FROM saleorder so 
WHERE locationid = 11 
	AND customerid = 8170
	AND saleorderid = 7
----------------------------
SELECT * FROM customer
WHERE customerid = 8170
	AND locationid = 11
----------------------------
SELECT * 
FROM saleorder so
WHERE so.LocationId = 11
	AND so.CustomerId = 6678
----------------------------
SELECT * 
FROM Creditcollection cc
WHERE cc.locationid = 11 
	AND	cc.CreditCollectionId = 6
 GO 
SELECT * FROM Resource
SELECT * FROM resource r WHERE r.resourceid = 685
SELECT * FROM resource r WHERE r.ParentId = 542 ORDER BY r.SortOrderNo

SELECT * FROM Privilege p

--UPDATE resource 
--SET [Type] = 'REPORTS', [Name] = 'Gross Sale and Gross &Margin'
--WHERE ResourceId = 685
 GO 
INSERT INTO [DBSV2_Live].[dbo].[Resource]
           ([FormFileName]
           ,[Name]
           ,[Code]
           ,[ParentId]
           ,[Type]
           ,[Depth]
           ,[SortOrderNo]
           ,[ShowInMenu]
           ,[ShortcutKey]
           ,[SeperatorInMenu]
           ,[IsStockReleatedScreen]
           ,[IsCustomerReleatedScreen]
           ,[IsConsignment]
           ,[IsCommercial]
           ,[IsUsageLoggingRequired]
           ,[ModuleId]
           ,[Parameter]
           ,[AllowDuringDayCycleOnly]
           ,[OnLoadBehaviorId]
           ,[OnSaveBehaviorId]
           ,[AllowProductOnes]
           ,[InsertDate]
           ,[InsertedBy]
           ,[UpdateDate]
           ,[UpdatedBy]
           ,[ToSend]
           ,[CommunicationId])
     VALUES(
           'frmGrossSaleAndGrossMargin'
           ,'Gross Sale and Gross Margin'
           ,'R174-'
           ,542
           ,'REPORT'
           ,3
           ,13
           ,1
           ,NULL
           ,0
           ,0
           ,0
           ,1
           ,1
           ,0
           ,6
           ,NULL
           ,0
           ,2
           ,2
           ,0
           ,'2013-05-18 14:17:33.697'
           ,1
           ,NULL
           ,0
           ,1
           ,NULL)
GO



 GO 
SELECT SUM(sop.SoldQuantity),sum(so.TotalOutputTax)
FROM saleorder so 
  INNER JOIN SaleOrderProduct sop  on so.locationid= sop.LocationId AND so.saleorderid = sop.SaleOrderId
  --INNER JOIN SaleOrderTax sot ON so.LocationId = sot.LocationId AND so.SaleOrderId = sot.SaleOrderId
  --INNER JOIN ProductTax pt ON sot.ProductTaxId =pt.ProductTaxId AND sop.ProductId = pt.ProductId 
  --INNER JOIN Tax t ON pt.TaxId = t.TaxId
WHERE so.LocationId = 11 AND sop.ProductId = 993 AND so.SalePassDate BETWEEN '2014-04-01 00:00:00.000' AND '2014-04-15 23:59:00.000'

SELECT slnp.productId,SUM(slnp.Quantity),SUM(slnp.InputTaxAmount),SUM(slnp.OutputTaxAmount)
FROM SLN sln 
  INNER JOIN SLNProduct slnp  on sln.locationid= slnp.LocationId AND sln.SLNID= slnp.SLNID
  --INNER JOIN SaleOrderTax sot ON sln.LocationId = sot.LocationId AND sln.SaleOrderId = slnp.SaleOrderId
  --INNER JOIN ProductTax pt ON sot.ProductTaxId =pt.ProductTaxId AND sop.ProductId = pt.ProductId 
  --INNER JOIN Tax t ON pt.TaxId = t.TaxId
WHERE sln.IsRollbacked = 0 and sln.TransactionDate BETWEEN '2014-04-01 00:00:00.000' AND '2014-04-15 23:59:00.000'
GROUP BY slnp.ProductId
HAVING SUM(slnp.InputTaxAmount)> 0 Or SUM(slnp.OutputTaxAmount)>0 

SELECT up.PrincipalBusinessLineId FROM uv_Product up WHERE up.ProductId IN (1523
,1977
,1978
,2161
,2465
,2520
,2526
,2527
,2532
,2545
,2546
,2549
,2555
,2556
,2561
,2566
,2577
,2578
,2698
,2701)




SELECT * FROM uv_Product up WHERE up.ProductId = 2545

 GO 
SELECT * FROM INFORMATION_SCHEMA.TABLES t
WHERE t.table_NAME LIKE '%inter%Branch%'
ORDER BY t.TABLE_NAME

SELECT * FROM InterBranchCollection 
SELECT * FROM InterBranchCollectionSaleOrder


SELECT * FROM SnDInterBranchCollection sdbc
 GO 
SELECT * FROM saleorder so WHERE so.LocationId = 14 AND so.SaleTypeId = (SELECT st.saletypeId FROM SaleType st WHERE st.Code = 'SPL')
SELECT * FROM SaleOrderProduct sop WHERE sop.LocationId = 14 AND sop.SaleOrderId = 2156

SELECT * FROM saleorder so --WHERE so.LocationId = 14 AND so.SaleTypeId = (SELECT st.saletypeId FROM SaleType st WHERE st.Code = 'SPL')) 
inner join saleorderscheme sos ON so.locationid = sos.locationid AND  so.saleorderid = sos.saleorderId
INNER JOIN SCHEME s ON sos.schemeId = s.SchemeId 
WHERE sos.locationid = 14 and s.IsDiscountBased = 0 AND s.IsInvoiceBased = 0 AND s.IsMBI=0 

SELECT * FROM schemeDetail sd WHERE sd.appliedQuantity <5 AND sd.appliedQuantity >0

SELECT * FROM saleorder so inner join saleorderscheme sos 
on so.locationid= sos.locationid and sos.saleorderid = so.saleorderid
INNER JOIN SCHEME s ON sos.schemeId = s.schemeId   
WHERE so.locationid = 14 AND so.deliverychallanId =251--IN (88,158,251,255)

SELECT * FROM SaleOrderProduct sop WHERE sop.LocationId = 14 AND sop.SaleOrderId = 251
 GO 
DECLARE @FromDate DATETIME, @ToDate DATETIME
SET @FromDate = '2009-12-26 00:00:00.000'--'2013-11-01 00:00:00'
SET @ToDate = '2011-01-01 23:59:59.000'

--/*NO CRITERIA*/
--SELECT * FROM SaleOrder so
--INNER JOIN SaleOrderProduct sop ON sop.LocationId = so.LocationId
--AND sop.SaleOrderId = so.SaleOrderId

--/*DATEDIFF*/
--SELECT * FROM SaleOrder so
--INNER JOIN SaleOrderProduct sop ON sop.LocationId = so.LocationId
--AND sop.SaleOrderId = so.SaleOrderId
--WHERE DATEDIFF(DAY, so.SalePassDate,  @FromDate) <= 0
--AND  DATEDIFF(DAY, so.SalePassDate,  @ToDate) >= 0

/*BETWEEN*/
SELECT * FROM SaleOrder so
INNER JOIN SaleOrderProduct sop ON sop.LocationId = so.LocationId
AND sop.SaleOrderId = so.SaleOrderId
WHERE so.SalePassDate BETWEEN @FromDate AND @ToDate



CHECKPOINT; 
GO 
DBCC DROPCLEANBUFFERS; 
GO
DBCC FREEPROCCACHE
GO

 GO 
--usp_Report_SNDOpeningBalance

--exec usp_Report_SNDOpeningBalance 5,58,29
CREATE PROC dbo.usp_Report_SNDOpeningBalance @CompanyId int, @LocationId int,@SNDID int
AS

Declare		@PreviousSNDID		numeric(5,0),
			@PreviousSndToDate	datetime,
			@OB_DD				numeric(15,2)
	
SELECT @PreviousSNDID = MAX(sndid),
		@PreviousSndToDate = ISNULL(MAX(s.ToDate), (SELECT MIN(sd.ToDate) FROM SnD sd WHERE sd.CompanyId = @CompanyId  
AND sd.LocationId = @LocationId AND sd.RollbackDate IS NULL))
FROM snd s WHERE s.CompanyId = @CompanyId  
AND s.LocationId=@LocationId AND s.SnDId < @SNDID AND s.RollbackDate IS NULL


--Create temp table
CREATE TABLE #TempSNDOpeningBalance (CompanyID numeric(9,0),LocationID numeric(9,0),SNDID numeric(9,0),
								Cash numeric(15,2),Cheque numeric(15,2),Vault numeric(15,2),DD_PO numeric(15,2),TC numeric(15,2),OtherDocument numeric(15,2)
								,BalanceDeposited numeric(15,2),BankBalance numeric(15,2),TotalBankBalance numeric(15,2),
								ReturnDocument numeric(15,2),BankCharges numeric(15,2),Shortage numeric(15,2),DirectlyRemitted numeric(15,2),
								Customer_ADJ numeric(15,2), OS_ADV_ADJ numeric(15,2), SLN_ADJ numeric(15,2), CN_ADJ numeric(15,2),
								WHT_ADJ numeric(15,2), IBC_ADJ numeric(15,2), ROUNDOFF numeric(15,2))


--Working for opening balance
--===========================
--Cash and Vault
INSERT INTO #TempSNDOpeningBalance (CompanyID,LocationID,SNDID,Cash,Vault)
(
SELECT	@CompanyId,@LocationId,@SNDID,
		OpeningBalanceSafe,OpeningBalanceVault 
FROM	SnD s inner JOIN SnDCashDetail scd ON s.LocationId = scd.LocationId AND s.SnDId = scd.SnDId
WHERE	s.CompanyId=@CompanyId AND s.LocationId=@LocationId AND s.SnDId=@SNDID AND s.RollbackDate IS NULL
)


--CHEQUE,DD_PO,TC,OTHER
INSERT INTO #TempSNDOpeningBalance (CompanyID,LocationID,SNDID,CHEQUE,DD_PO,TC,OtherDocument)
(
SELECT	@CompanyId,@LocationId,@SNDID,
		ISNULL(sum((CASE WHEN pm.typecode='CHQ' AND sdm.Type='D' THEN sdm.Amount ELSE 0 END)),0) AS CHEQUE,
		ISNULL(sum((CASE WHEN pm.typecode IN ('DD','PO') AND sdm.Type='D' THEN sdm.Amount ELSE 0 END)),0) AS DD,
		ISNULL(sum((CASE WHEN pm.typecode IN ('TC') AND sdm.Type='D' THEN sdm.Amount ELSE 0 END)),0) AS TC,
		ISNULL(sum((CASE WHEN pm.typecode NOT IN ('TC','CHQ','DD','PO','TC') AND sdm.Type='D' THEN sdm.Amount ELSE 0 END)),0) AS OTHER

FROM snd s
		INNER JOIN SnDBankDocMovement sdm ON sdm.LocationId = s.LocationId AND sdm.SnDId = s.SnDId
		INNER JOIN PaymentTransaction pt ON pt.LocationId = sdm.LocationId AND pt.PaymentTransactionId = sdm.PaymentTransactionId
		INNER JOIN PaymentMode pm ON pm.PaymentModeId=pt.PaymentModeId
WHERE	s.CompanyId=@CompanyId and	s.LocationId=@LocationId AND s.SnDId < @SNDID AND (sdm.DepositedSnDId >=@SNDID OR sdm.DepositedSnDId IS null) 
		AND s.RollbackDate IS null
)

--DD_PO,TC,OTHER (Other Doc Remit to HO)
INSERT INTO #TempSNDOpeningBalance (CompanyID,LocationID,SNDID,DD_PO,TC,OtherDocument)
(
SELECT @CompanyId,@LocationId,@SNDID,
		ISNULL(sum((CASE WHEN pm.typecode IN ('DD','PO') THEN v.AdjustedAmount ELSE 0 END)),0) AS DD,
		ISNULL(sum((CASE WHEN pm.typecode IN ('TC') THEN v.AdjustedAmount ELSE 0 END)),0) AS TC,
		ISNULL(sum((CASE WHEN pm.typecode NOT IN ('TC','DD','PO') THEN v.AdjustedAmount ELSE 0 END)),0) AS OTHER 
FROM snd s
		INNER JOIN uv_SNDPaymentTransaction v ON v.CompanyId=s.CompanyId AND  v.LocationId = s.LocationId AND v.SnDId = s.SnDId 
INNER JOIN PaymentTransaction pt ON pt.CompanyId = v.CompanyId AND pt.LocationId = v.LocationId AND pt.PaymentTransactionId = v.PaymentTransactionId
INNER JOIN PaymentMode pm ON pm.PaymentModeId = pt.PaymentModeId
WHERE  s.CompanyId=@CompanyId and	s.LocationId=@LocationId AND s.SnDId < @SNDID AND pm.IsToBeRemitted=1 AND s.RollbackDate IS null
AND Not exists (SELECT PaymentTransactionId FROM SnDRemittanceOtherDoc sdod  INNER JOIN SnD sdo ON sdo.LocationId = sdod.LocationId AND sdo.SnDId = sdod.SnDId
                WHERE  sdod.LocationId=v.LocationId and v.PaymentTransactionId=sdod.PaymentTransactionId   AND sdod.SnDId < @SNDID  AND sdo.RollbackDate IS null)
)

--CASH DD OB
INSERT INTO #TempSNDOpeningBalance (CompanyID,LocationID,SNDID,DD_PO)
(
SELECT	@CompanyId,@LocationId,@SNDID,
		ISNULL(sum(sdd.Amount),0)
FROM snd s
		INNER JOIN SnDCashDD sdd ON sdd.LocationId = s.LocationId AND sdd.SnDId = s.SnDId
WHERE	s.CompanyId=@CompanyId and	s.LocationId=@LocationId AND s.SnDId < @SNDID  AND s.RollbackDate IS null
)
--BANK DD OB
INSERT INTO #TempSNDOpeningBalance (CompanyID,LocationID,SNDID,DD_PO)
(
SELECT	@CompanyId,@LocationId,@SNDID,
		ISNULL(sum(sdd.Amount),0)
FROM snd s
		INNER JOIN SnDBankDD sdd ON sdd.LocationId = s.LocationId AND sdd.SnDId = s.SnDId
WHERE	s.CompanyId=@CompanyId and	s.LocationId=@LocationId AND s.SnDId < @SNDID  AND s.RollbackDate IS null
)
--CASH DD & BANK DD Remittance OB
INSERT INTO #TempSNDOpeningBalance (CompanyID,LocationID,SNDID,DD_PO)
(
SELECT	@CompanyId,@LocationId,@SNDID,
		(ISNULL(sum(sr.TotalCashDD),0)*-1 ) + (ISNULL(sum(sr.TotalbankDD),0)*-1 )
FROM snd s
		INNER JOIN SnDRemittance sr ON sr.LocationId = s.LocationId AND sr.SnDId = s.SnDId
WHERE	s.CompanyId=@CompanyId and	s.LocationId=@LocationId AND s.SnDId < @SNDID  AND s.RollbackDate IS null
)





--BalanceDeposited, BankBalance
--INSERT INTO #TempSNDOpeningBalance (CompanyID,LocationID,SNDID,BalanceDeposited,BankBalance)
--(
--SELECT	@CompanyId,@LocationId,@SNDID,	
--		isnull(sum(isnull(BalanceDeposited,0)),0) ,isnull(sum(isnull(BankBalance,0)),0)
--FROM	#TempBankBalance 
--WHERE	OB = 1
--)


--RETURN CHQ, BANK CHARGES
INSERT INTO #TempSNDOpeningBalance (CompanyID,LocationID,SNDID,ReturnDocument,BankCharges)
(
SELECT	@CompanyId,@LocationId,@SNDID,	
		sdb.BalanceReturned,sdb.TotalBankCharges
FROM	snd s inner JOIN SnDBankDetail sdb ON sdb.LocationId = s.LocationId AND sdb.SnDId = s.SnDId 
WHERE	s.CompanyId=@CompanyId and sdb.LocationId=@LocationId AND s.SnDId = @PreviousSNDID AND s.RollbackDate IS null
)

--Shortage OB from O/B Shortage

--Shortage OB from cash sale payment
INSERT INTO #TempSNDOpeningBalance (CompanyID,LocationID,SNDID,Shortage)
(
SELECT	@CompanyId,@LocationId,@SNDID,	
		SHORTAGE=ISNULL(sum(ISNULL(csp.Shortage,0)),0)
FROM	CashSalePayment csp 
		INNER JOIN SnDCashSalePayment sdsp ON sdsp.LocationId=csp.LocationId AND sdsp.CashSalePaymentId=csp.CashSalePaymentId
		INNER JOIN snd s ON s.LocationId = sdsp.LocationId AND s.SnDId = sdsp.SnDId
WHERE	s.CompanyId=@CompanyId  AND s.LocationId=@LocationId AND s.SnDId < @SNDID AND s.RollbackDate IS NULL AND csp.Shortage>0


--Shortage OB from credit collection

UNION all
SELECT	@CompanyId,@LocationId,@SNDID,	
		SHORTAGE=ISNULL(sum(ISNULL(cc.Shortage,0)),0)
FROM	CreditCollection cc 
		INNER JOIN SnDCreditCollection scc ON scc.LocationId=cc.LocationId AND scc.CreditCollectionId=cc.CreditCollectionId
		INNER JOIN snd s ON s.LocationId = scc.LocationId AND s.SnDId = scc.SnDId
WHERE	s.CompanyId=@CompanyId  AND s.LocationId=@LocationId AND s.SnDId < @SNDID AND s.RollbackDate IS NULL AND cc.Shortage>0
--Shortage OB from cash reduction
UNION all
SELECT	@CompanyId,@LocationId,@SNDID,	
		SHORTAGE=ISNULL(sum(ISNULL(cr.ReductionAmount,0)),0) 
FROM	SnDCashReduction cr
		INNER JOIN snd s ON s.LocationId = cr.LocationId AND s.SnDId = cr.SnDId
WHERE	s.CompanyId=@CompanyId  AND s.LocationId=@LocationId AND s.SnDId < @SNDID AND s.RollbackDate IS NULL 
--		SND Refrence table missing with opening balance shortage

UNION all
		SELECT  @CompanyId,@LocationId,@SNDID,
				SHORTAGE=ISNULL(sum(ISNULL(obs.Shortageamount,0)),0) FROM obSMShortage obs
		WHERE   obs.LocationId = @LocationId AND obs.CompanyId =@CompanyId 
--Shortage OB from Adjustment
UNION all
SELECT	@CompanyId,@LocationId,@SNDID,	
		SHORTAGE=ISNULL(sum(ISNULL(sc.CollectedAmount,0)),0) * -1 
FROM	SnDShortageCollection sc
		INNER JOIN snd s ON s.LocationId = sc.LocationId AND s.SnDId = sc.SnDId
WHERE	s.CompanyId=@CompanyId  AND s.LocationId=@LocationId AND s.SnDId < @SNDID AND s.RollbackDate IS NULL
)

-- Adjustment SLN, CN, WHT, Advance, OS Advance, IBC
-----------------------------------------------------------------------------------------------
INSERT INTO #TempSNDOpeningBalance (CompanyID,LocationID,SNDID,Customer_ADJ,OS_ADV_ADJ,SLN_ADJ,CN_ADJ,WHT_ADJ,IBC_ADJ)
(

SELECT	@CompanyId,@LocationId,@SNDID,
		ISNULL(sum(sd.CustomerAdvanceAdjusted),0) * -1,
		ISNULL(sum(sd.OutstationAdvanceAdjusted),0) *-1,
		ISNULL(sum(sd.SLNAdjusted),0),
		ISNULL(sum(sd.CustomerCNAdjusted),0),
		ISNULL(sum(sd.WHTDeducted ),0),
		ISNULL(sum(sd.InterBranchCollectionAdjusted ),0) * -1
FROM snd s 
		INNER JOIN SnDCollection sd ON sd.LocationId = s.LocationId AND sd.SnDId = s.SnDId
WHERE	s.CompanyId=@CompanyId  AND s.LocationId=@LocationId AND s.SnDId < @SNDID    AND s.RollbackDate IS null		
GROUP BY s.CompanyId,s.LocationId,s.SnDId

--SELECT	@CompanyId,@LocationId,@SNDID,	
--		ISNULL(sum(ISNULL(csp.CustomerAdvanceAdjusted,0)),0)  * -1 
--		,ISNULL(sum(ISNULL(csp.OSAdvanceAdjusted,0)),0) * -1
--		,ISNULL(sum(ISNULL(csp.SLNAdjusted,0)),0)
--		,ISNULL(sum(ISNULL(csp.CreditNoteAdjusted,0)),0)
--		,ISNULL(sum(ISNULL(csp.WHTAdjusted,0)),0)
--		,0 --IBC
--FROM	CashSalePayment csp 
--		INNER JOIN SnDCashSalePayment sdsp ON sdsp.LocationId=csp.LocationId AND sdsp.CashSalePaymentId=csp.CashSalePaymentId
--		INNER JOIN snd s ON s.LocationId = sdsp.LocationId AND s.SnDId = sdsp.SnDId
--WHERE	s.CompanyId=@CompanyId  AND s.LocationId=@LocationId AND s.SnDId < @SNDID    AND s.RollbackDate IS null
--		AND s.RollbackDate IS null
--GROUP BY s.CompanyId,s.LocationId,s.SnDId
--UNION all

--SELECT	@CompanyId,@LocationId,@SNDID,	
--		sum(ISNULL(cc.CustomerAdvanceAdjusted,0))  * -1
--		,sum(ISNULL(cc.OSAdvanceAdjusted,0))  * -1
--		,sum(ISNULL(cc.SLNAdjusted,0))
--		,sum(ISNULL(cc.CreditNoteAdjusted,0))
--		,sum(ISNULL(cc.WHTAdjusted,0))
--		,sum(ISNULL(cc.InterBranchCollectionAmount,0)) * -1
--FROM	CreditCollection cc 
--		INNER JOIN SnDCreditCollection scc ON scc.LocationId=cc.LocationId AND scc.CreditCollectionId=cc.CreditCollectionId
--		INNER JOIN snd s ON s.LocationId = scc.LocationId AND s.SnDId = scc.SnDId
--WHERE	s.CompanyId=@CompanyId  AND s.LocationId=@LocationId AND s.SnDId < @SNDID  AND s.RollbackDate IS null
--GROUP BY s.CompanyId,s.LocationId,s.SnDId

UNION ALL

SELECT	@CompanyId,@LocationId,@SNDID,	
		sum(ISNULL(da.TotalAdvance,0))  * -1
		,0 --OSAdvanceAdjusted
		,sum(ISNULL(da.TotalSLN,0))
		,sum(ISNULL(da.TotalCreditNote,0))
		,0 --WHTAdjusted
		,0 --InterBranchCollectionAmount
FROM DirectAdjustment da
WHERE da.CompanyId=@CompanyId and da.LocationId=@LocationId AND da.TransactionDate <@PreviousSndToDate AND da.ApprovalDate IS NOT null

UNION ALL
SELECT	@CompanyId,@LocationId,@SNDID,	
		0 -- AdvanceAdjusted
		,0 --OSAdvanceAdjusted
		,0 --SLN Adjusted
		,0 --CN Adjusted
		,sum(ISNULL(ow.Amount,0))   --WHTAdjusted
		,0 --InterBranchCollectionAmount
FROM obWHT ow
WHERE ow.CompanyId=@CompanyId  AND ow.LocationId=@LocationId 


--======================================
--Credit Entry -- Customer CN Adjustment
--======================================

UNION ALL
--Credit Entry -- CN Adjustment
SELECT	@CompanyId,@LocationId,@SNDID,	
		0 -- AdvanceAdjusted
		,0 --OSAdvanceAdjusted
		,0 -- SLN Adjusted
		,sum(ISNULL(cn.amount,0)) * -1
		,0 --WHTAdjusted
		,0 --InterBranchCollectionAmount
FROM CustomerCreditNote cn
WHERE cn.CompanyId=@CompanyId and cn.LocationId=@LocationId AND cn.BranchApprovalDate <@PreviousSndToDate AND cn.BranchApprovalDate IS NOT NULL

--Credit Entry -- SLN Adjustment
UNION all
SELECT	@CompanyId,@LocationId,@SNDID,	
		 0 -- AdvanceAdjusted
		,0 --OSAdvanceAdjusted
		,sum(ISNULL(s.TotalNet,0)) * -1 
		,0 --CN Adjusted
		,0 --WHTAdjusted
		,0 --InterBranchCollectionAmount
FROM SLN s
WHERE s.CompanyId=@CompanyId and s.LocationId=@LocationId AND s.ApprovalDate <@PreviousSndToDate  AND s.RollbackDate IS NULL
UNION ALL

--Credit Entry -- Customer ADV Adjustment
SELECT	@CompanyId,@LocationId,@SNDID,	
		sum(ISNULL(ca.Amount,0)) -- AdvanceAdjusted
		,0 --OSAdvanceAdjusted
		,0 --SLN Adjusted
		,0 --CN Adjusted
		,0 --WHTAdjusted
		,0 --InterBranchCollectionAmount
FROM CustomerAdvance ca
INNER JOIN SnDCustomerAdvance sd ON sd.LocationId = ca.LocationId AND sd.CustomerAdvanceId = ca.CustomerAdvanceId
INNER JOIN snd s ON s.LocationId = sd.LocationId AND s.SnDId = sd.SnDId
WHERE	s.CompanyId=@CompanyId  AND s.LocationId=@LocationId AND s.SnDId < @SNDID AND  s.RollbackDate IS null

UNION ALL

--Credit Entry -- OS ADV Adjustment
SELECT	@CompanyId,@LocationId,@SNDID,	
		0 -- AdvanceAdjusted
		,sum(ISNULL(oa.Amount,0)) --OSAdvanceAdjusted
		,0 --SLN Adjusted
		,0 --CN Adjusted
		,0 --WHTAdjusted
		,0 --InterBranchCollectionAmount
FROM OutstationAdvance oa
INNER JOIN SnDOutstationAdvance sd ON sd.LocationId = oa.LocationId AND sd.OutstationAdvanceId = oa.OutstationAdvanceId
INNER JOIN snd s ON s.LocationId = sd.LocationId AND s.SnDId = sd.SnDId
WHERE	s.CompanyId=@CompanyId  AND s.LocationId=@LocationId AND s.SnDId < @SNDID AND s.ApprovalDate IS NOT NULL  AND s.RollbackDate IS null

UNION ALL
--Credit Entry -- WHT Adjustment

SELECT	@CompanyId,@LocationId,@SNDID,	
		0 -- AdvanceAdjusted
		,0 --OSAdvanceAdjusted
		,0 --SLN Adjusted
		,0 --CN Adjusted
		,sum(ISNULL(ws.adjustedAmount,0))   * -1   --WHTAdjusted
		,0 --InterBranchCollectionAmount
FROM WHTChallan w
INNER JOIN WHTChallanSaleOrder ws ON ws.LocationId = w.LocationId AND ws.WHTChallanId = w.WHTChallanId
INNER JOIN CashSalePayment csp ON csp.LocationId = ws.LocationId AND csp.CashSalePaymentId = ws.CashSalePaymentId
INNER JOIN SnDCashSalePayment scsp ON scsp.LocationId = csp.LocationId AND scsp.CashSalePaymentId = csp.CashSalePaymentId
INNER JOIN snd s ON s.LocationId = scsp.LocationId AND s.SnDId = scsp.SnDId
WHERE s.CompanyId=@CompanyId AND s.LocationId=@LocationId AND s.SnDId<@SNDID AND ws.CashSalePaymentId IS NOT NULL  AND s.RollbackDate IS null

UNION ALL

SELECT	@CompanyId,@LocationId,@SNDID,	
		0 -- AdvanceAdjusted
		,0 --OSAdvanceAdjusted
		,0 --SLN Adjusted
		,0 --CN Adjusted
		,sum(ISNULL(ws.adjustedAmount,0))   * -1   --WHTAdjusted
		,0 --InterBranchCollectionAmount
FROM WHTChallan w
INNER JOIN WHTChallanSaleOrder ws ON ws.LocationId = w.LocationId AND ws.WHTChallanId = w.WHTChallanId
INNER JOIN CreditCollection cc ON cc.LocationId = ws.LocationId AND cc.CreditCollectionId = ws.CreditCollectionId
INNER JOIN SnDCreditCollection scc ON scc.LocationId = cc.LocationId AND scc.CreditCollectionId = cc.CreditCollectionId
INNER JOIN snd s ON s.LocationId = scc.LocationId AND s.SnDId = scc.SnDId
WHERE s.CompanyId=@CompanyId AND s.LocationId=@LocationId AND s.SnDId<@SNDID AND ws.CreditCollectionId IS NOT NULL  AND s.RollbackDate IS null

UNION all
SELECT	@CompanyId,@LocationId,@SNDID,	
		0 -- AdvanceAdjusted
		,0 --OSAdvanceAdjusted
		,0 --SLN Adjusted
		,0 --CN Adjusted
		,sum(ISNULL(wr.AdjustedAmount,0))   * -1   --WHTAdjusted
		,0 --InterBranchCollectionAmount
FROM WHTReversal wr 
INNER JOIN SnDWHTReversal sd ON sd.LocationId = wr.LocationId AND sd.WHTReversalId = wr.WHTReversalId
INNER JOIN snd s ON s.LocationId = sd.LocationId AND s.SnDId = sd.SnDId
WHERE s.CompanyId=@CompanyId AND s.LocationId=@LocationId AND s.SnDId<@SNDID  AND s.RollbackDate IS null




UNION all

SELECT	@CompanyId,@LocationId,@SNDID,	
		0 -- AdvanceAdjusted
		,0 --OSAdvanceAdjusted
		,0 --SLN Adjusted
		,0 --CN Adjusted
		,0 --WHTAdjusted
		,sum(ISNULL(ibc.TotalAmount,0))  --InterBranchCollectionAmount
FROM InterBranchCollection ibc
INNER JOIN SnDInterBranchCollection sibc ON sibc.LocationId = ibc.LocationId AND sibc.InterBranchCollectionId = ibc.InterBranchCollectionId
INNER JOIN snd s ON s.LocationId = sibc.LocationId AND s.SnDId = sibc.SnDId AND s.CompanyId=ibc.CompanyId
WHERE s.CompanyId=@CompanyId AND s.LocationId=@LocationId AND s.SnDId<@SNDID AND s.RollbackDate IS NULL

)

SELECT CompanyID,LocationID,SNDID
		,ISNULL(SUM(ISNULL(Cash,0)),0) AS Cash
		,ISNULL(SUM(ISNULL(Cheque,0)),0) AS Cheque
		,ISNULL(SUM(ISNULL(Vault,0)),0) AS Vault
		,ISNULL(SUM(ISNULL(DD_PO,0)),0) AS DD_PO
		,ISNULL(SUM(ISNULL(TC,0)),0) AS TC
		,ISNULL(SUM(ISNULL(OtherDocument,0)),0) AS OtherDocument
		,ISNULL(SUM(ISNULL(BalanceDeposited,0)),0) AS BalanceDeposited
		,ISNULL(SUM(ISNULL(BankBalance,0)),0) AS BankBalance
		,ISNULL(SUM(ISNULL(TotalBankBalance,0)),0) AS TotalBankBalance
		,ISNULL(SUM(ISNULL(ReturnDocument,0)),0) AS ReturnDocument
		,ISNULL(SUM(ISNULL(BankCharges,0)),0) AS BankCharges
		,ISNULL(SUM(ISNULL(Shortage,0)),0) AS Shortage
		,ISNULL(SUM(ISNULL(DirectlyRemitted,0)),0) AS DirectlyRemitted
		,ISNULL(SUM(ISNULL(Customer_ADJ,0)),0) AS Customer_ADJ
		,ISNULL(SUM(ISNULL(OS_ADV_ADJ,0)),0) AS OS_ADV_ADJ
		,ISNULL(SUM(ISNULL(SLN_ADJ,0)),0) AS SLN_ADJ
		,ISNULL(SUM(ISNULL(CN_ADJ,0)),0) AS CN_ADJ
		,ISNULL(SUM(ISNULL(WHT_ADJ,0)),0) AS WHT_ADJ
		,ISNULL(SUM(ISNULL(IBC_ADJ,0)),0) AS IBC_ADJ
		,ISNULL(SUM(ISNULL(ROUNDOFF,0)),0) AS ROUNDOFF
--INTO #SNDOpeningBalance	
FROM #TempSNDOpeningBalance
GROUP BY CompanyID,LocationID,SNDID

--DELETE FROM #TempSNDOpeningBalance

--INSERT INTO #TempSNDOpeningBalance
--SELECT * FROM #SNDOpeningBalance

--DROP TABLE #SNDOpeningBalance
--SELECT * FROM #TempSNDOpeningBalance
DROP TABLE #TempSNDOpeningBalance

 GO 

CREATE PROCEDURE usp_Report_MonthlyManagementReport @CompanyIds INT, @LocationIds VARCHAR(250),@PBLIds VARCHAR(250),@SelectAll INT,@FromDate DATETIME,@ToDate DATETIME
AS
--DECLARE @CompanyIds INT, @LocationIds VARCHAR(250),@PBLIds VARCHAR(250),@SelectAll INT,@FromDate DATETIME,@ToDate DATETIME
--SET @CompanyIds = 1
--SET @LocationIds = ''
--SET @PBLIds = ''
--SET @SelectAll = 2
--SET @FromDate = '2014-04-01 00:00:00.000'
--SET @ToDate = '2014-04-06 00:00:00.000'


SELECT usso.LocationId, usso.SaleOrderId, usso.PrincipalBusinessLineId, usso.IsCash, SUM(usso.soldquantity*usso.tp) [TotalTP]
INTO #TempSO
FROM uv_Sales_SaleOrder usso
INNER JOIN   DBO.Split(@PBLIds, ',') PBL ON  (PBL.Data = usso.PrincipalBusinessLineId OR @PBLIds = '')
INNER JOIN   DBO.Split(@LocationIds, ',') Location ON  (Location.Data = usso.LocationId OR @LocationIds = '')
WHERE usso.CompanyId = @CompanyIds
AND 
(
	@SelectAll = 0 
	OR ( @SelectAll = 1 AND DATEDIFF(DAY,usso.SalePassDate,@FromDate)=0) 
	OR ( @SelectAll = 2 AND DATEDIFF(DAY,usso.SalePassDate,@FromDate)<=0 AND DATEDIFF(DAY,usso.SalePassDate,@ToDate)>=0)
)
GROUP BY usso.LocationId, usso.SaleOrderId, usso.PrincipalBusinessLineId, usso.IsCash	

SELECT
l.SequenceId,
a.[LocationId],
l.ShortName AS [LOCATION],
upbla.PBLSequenceId,
a.PrincipalBusinessLineId,
upbla.[Name] AS [PBL],
--SUM(a.[GROSS SALE CASH]) AS [GROSS SALE CASH],
--SUM(a.[GROSS SALE CR]) AS [GROSS SALE CR],
--SUM(a.[GROSS UDL DISCOUNT CASH]) AS [GROSS UDL DISCOUNT CASH],
--SUM(a.[GROSS PBL DISCOUNT CASH]) AS [GROSS PBL DISCOUNT CASH],
--SUM(a.[GROSS UDL DISCOUNT CR]) AS [GROSS UDL DISCOUNT CR],
--SUM(a.[GROSS PBL DISCOUNT CR]) AS [GROSS PBL DISCOUNT CR],
--SUM(a.[SLN CASH]) AS [SLN CASH],
--SUM(a.[SLN CR]) AS [SLN CR], 
--SUM(a.[SLN UDL DISCOUNT CASH]) AS [SLN UDL DISCOUNT CASH], 
--SUM(a.[SLN PBL DISCOUNT CASH]) AS [SLN PBL DISCOUNT CASH],
--SUM(a.[SLN UDL DISCOUNT CR]) AS [SLN UDL DISCOUNT CR],
--SUM(a.[SLN PBL DISCOUNT CR]) AS [SLN PBL DISCOUNT CR]
(SUM(a.[GROSS SALE CASH]) -SUM(a.[GROSS UDL DISCOUNT CASH]) - SUM(a.[GROSS PBL DISCOUNT CASH])) AS [CASH SALE],
(SUM(a.[GROSS SALE CR]) - SUM(a.[GROSS UDL DISCOUNT CR]) - SUM(a.[GROSS PBL DISCOUNT CR])) AS [CREDIT SALE],
(SUM(a.[SLN CASH]) - SUM(a.[SLN UDL DISCOUNT CASH]) - SUM(a.[SLN PBL DISCOUNT CASH])) AS [CASH S.RTN],
(SUM(a.[SLN CR]) - SUM(a.[SLN UDL DISCOUNT CR]) - SUM(a.[SLN PBL DISCOUNT CR])) AS [CREDIT S.RTN],
((SUM(a.[GROSS SALE CASH]) - SUM(a.[GROSS UDL DISCOUNT CASH]) - SUM(a.[GROSS PBL DISCOUNT CASH])) + (SUM(a.[GROSS SALE CR]) - SUM(a.[GROSS UDL DISCOUNT CR]) - SUM(a.[GROSS PBL DISCOUNT CR])) -
(SUM(a.[SLN CASH]) - SUM(a.[SLN UDL DISCOUNT CASH]) - SUM(a.[SLN PBL DISCOUNT CASH])) - (SUM(a.[SLN CR]) - SUM(a.[SLN UDL DISCOUNT CR]) - SUM(a.[SLN PBL DISCOUNT CR]))) 
AS [NET SALE],
SUM((a.[GROSS UDL DISCOUNT CASH])) + SUM(a.[GROSS UDL DISCOUNT CR]) - SUM(a.[SLN UDL DISCOUNT CASH]) - SUM(a.[SLN UDL DISCOUNT CR]) AS [UDL DISCOUNT],
SUM(a.[GROSS PBL DISCOUNT CASH]) + SUM(a.[GROSS PBL DISCOUNT CR]) - SUM(a.[SLN PBL DISCOUNT CASH]) - SUM(a.[SLN PBL DISCOUNT CR]) AS [PBL DISCOUNT],
SUM(a.[GROSS SALE CASH]) + SUM(a.[GROSS SALE CR]) - SUM(a.[SLN CASH]) - SUM(a.[SLN CR]) AS [DSP NET SALE]
FROM

(
      SELECT
            usso.LocationId,
            usso.PrincipalBusinessLineId,
            usso.IsCash,
            CASE 
                 WHEN usso.IsCash = 1 THEN usso.TotalTP
                 ELSE 0
            END AS [Gross Sale Cash],
            CASE 
                 WHEN usso.IsCash = 1 THEN 0
                 ELSE usso.TotalTP
            END AS [Gross Sale Cr],
            (
                CASE 
                     WHEN usso.IsCash = 1 THEN ISNULL(disc.[UDL Discount],0)
                     ELSE 0
                END
            ) AS [Gross UDL Discount Cash],
			(
				CASE 
					 WHEN usso.IsCash = 1 THEN ISNULL(disc.[PBL Discount],0)
					 ELSE 0
				END
			) AS [Gross PBL Discount Cash],
			(
				CASE 
					 WHEN usso.IsCash = 1 THEN 0
					 ELSE ISNULL(disc.[UDL Discount],0)
				END
			) AS [Gross UDL Discount Cr],
			(
				CASE 
					 WHEN usso.IsCash = 1 THEN 0
					 ELSE ISNULL(disc.[PBL Discount],0)
				END
			) AS [Gross PBL Discount Cr], 
            0 AS [SLN Cash],
            0 AS [SLN Cr], 
            0 AS [SLN UDL Discount Cash], 
            0 AS [SLN PBL Discount Cash],
            0 AS [SLN UDL Discount Cr],
            0 AS [SLN PBL Discount Cr] 
      FROM 
      (
		SELECT usso.LocationId, usso.PrincipalBusinessLineId, usso.IsCash, SUM([TotalTP]) [TotalTP]
		FROM #TempSO usso
		GROUP BY usso.LocationId, usso.PrincipalBusinessLineId, usso.IsCash
      ) usso
      LEFT JOIN 
      (
		SELECT usso.LocationId,
		s.PrincipalBusinessLineId,
		usso.IsCash,
		ISNULL(SUM(sos.Discount * ((100 - s.UDLPercentage) / 100)), 0) [PBL Discount],
		ISNULL(SUM(sos.Discount * (s.UDLPercentage / 100)), 0) [UDL Discount]

		FROM
		(
			SELECT DISTINCT usso.LocationId, usso.SaleOrderId, usso.IsCash
			FROM #TempSO usso
		) usso
		INNER JOIN SaleOrderScheme sos ON sos.LocationId = usso.LocationId
		AND sos.SaleOrderId = usso.SaleOrderId
		INNER JOIN [Scheme] s ON s.SchemeId = sos.SchemeId 
		WHERE sos.EndDate IS NULL
		AND s.IsDiscountBased = 1
		GROUP BY usso.LocationId, s.PrincipalBusinessLineId, usso.IsCash
      ) disc ON disc.LocationId = usso.LocationId
       AND disc.PrincipalBusinessLineId = usso.PrincipalBusinessLineId
       AND disc.IsCash = usso.IsCash
      
      

UNION ALL

      SELECT 
            sln.LocationId,
            sln.PrincipalBusinessLineId,
            sln.IsCash,
            0 AS [Gross Sale Cash],
            0 AS  [Gross Sale Cr],
            0 AS [Gross UDL Discount Cash],
            0 AS [Gross PBL Discount Cash],
            0 AS [Gross UDL Discount Cr],
            0 AS [Gross PBL Discount Cr],  
            (case when sln.IsCash = 1 then SUM(sln.TotalTP) else 0 end) AS [SLN Cash],
            (case when sln.IsCash = 1 then 0 else SUM(sln.TotalTP) end) AS [SLN Cr], 
            (case when sln.IsCash = 1 then SUM(sln.DiscountUDLPart) else 0 end) AS [SLN UDL Discount Cash], 
            (case when sln.IsCash = 1 then SUM(sln.DiscountPrincipalPart) else 0 end) AS [SLN PBL Discount Cash],
            (case when sln.IsCash = 1 then 0 else SUM(sln.DiscountUDLPart) end) AS [SLN UDL Discount Cr],
            (case when sln.IsCash = 1 then 0 else SUM(sln.DiscountPrincipalPart) end) AS [SLN PBL Discount Cr] 
      FROM 
      (
      	SELECT sln.LocationId, sln.SLNId, sln.PrincipalBusinessLineId, sln.IsCash, isnull(sln.DiscountUDLPart,0) AS DiscountUDLPart, 
      	isnull(sln.DiscountPrincipalPart,0) AS DiscountPrincipalPart, SUM(sln.Quantity * pc.TP) TotalTP
      	FROM uv_Sales_SLN sln
		INNER JOIN PriceCatalog pc ON pc.PriceCatalogId = sln.PriceId
		INNER JOIN   DBO.Split(@PBLIds, ',') PBL ON  (PBL.Data = sln.PrincipalBusinessLineId OR @PBLIds = '')
		INNER JOIN   DBO.Split(@LocationIds, ',') Location ON  (Location.Data = sln.LocationId OR @LocationIds = '')

		WHERE sln.CompanyId = @CompanyIds
		AND (@SelectAll = 0 
			OR ( @SelectAll = 1 AND DATEDIFF(DAY,sln.TransactionDate,@FromDate)=0) 
			OR ( @SelectAll = 2 AND DATEDIFF(DAY,sln.TransactionDate,@FromDate)<=0 AND DATEDIFF(DAY,sln.TransactionDate,@ToDate)>=0))
      	GROUP BY sln.LocationId, sln.SLNId, sln.PrincipalBusinessLineId, sln.IsCash, sln.DiscountUDLPart, 
      	sln.DiscountPrincipalPart			
      ) sln
      GROUP BY sln.IsCash,sln.PrincipalBusinessLineId,sln.LocationId

) a
INNER JOIN Location l ON A.LocationId = l.LocationId
INNER JOIN uv_PrincipalBusinessLine_All upbla ON a.PrincipalBusinessLineId = upbla.PrincipalBusinessLineId
GROUP BY l.SequenceId,
	a.[LocationId],
	l.ShortName,
	upbla.PBLSequenceId,
	a.PrincipalBusinessLineId,
	upbla.[Name] 

ORDER BY l.SequenceId, upbla.PBLSequenceId

DROP TABLE #TempSO
 GO 
DECLARE @CompanyIds varchar(100),
	@PBLIds varchar(100), @LocationIds varchar(100),@ProductIds VARCHAR(500),
	@IsCash bit,
	@IsCredit bit,
	@IsTP bit,
	@SaleCriteria int,
	@SelectAll int,
	@FromDate datetime,
	@ToDate datetime      
 
SET @CompanyIds = '1'
SET @PBLIds = '3'
SET @LocationIds ='11'
SET @ProductIds = '172'

SET @SaleCriteria = 2
SET @SelectAll=2
SET @FromDate = '2014/04/04'
SET @ToDate = '2014/04/15'
SET @IsTP = 1


/*
Sale Criteria 
0-Gross Sale --Only Value
1-Net Sale -- Value-SLN
2-SLN--Only SLN
*/

SELECT 
	[A].CompanyId,
	l.SequenceId AS [LocSeq],	
	l.ShortName AS [Location Name],
	UPBLA.PBLSequenceId,
	upbla.PrincipalBusinessLineId,
	upbla.Name AS [PBL Name],	
	up.ProductSequence ,
	up.ProductId,
	up.Name AS [Product Name],
	--MAX(l.MaxDate) AS [Date],
	CASE WHEN @SaleCriteria=0 THEN sum(A.GrossQuantity)
		 WHEN @SaleCriteria=1 THEN sum(A.GrossQuantity)-SUM(A.SLN)
		 WHEN @SaleCriteria=2 THEN sum(A.SLN)
	END 
	AS [Sale Qty],	
	(CASE WHEN @SaleCriteria=0 THEN sum(A.GrossQuantity * A.Price)
		 WHEN @SaleCriteria=1 THEN sum(A.GrossQuantity * A.Price)-SUM(A.SLN*A.Price)
		 WHEN @SaleCriteria=2 THEN sum(A.SLN * A.Price)
	END 
	)
	AS [Sale Amount]	
FROM   uv_Product up
LEFT OUTER  JOIN   
( 
		SELECT 
		des.CompanyId, 	
		des.LocationId, 			
		des.ProductId,
		CASE WHEN @ISTP=1 THEN (pc.TP) ELSE (PC.PP) END Price,
		SUM
		(
			 isnull(des.BookedLocalCash,0) + isnull(des.BookedOSCash,0) + isnull(des.Shop,0)+ isnull(des.SpotLocal,0)+ isnull(des.SpotOS,0) 
			+ isnull(des.BookedLocalCredit,0)+isnull(des.BookedOSCredit,0) 
		) AS [GrossQuantity], 					
		SUM(isnull((des.SLNCash),0)  + isnull((des.SLNCredit),0) ) AS [SLN]					
		FROM uv_DayEndSale des				
		INNER JOIN PriceCatalog pc ON pc.PriceCatalogId=des.PriceId	
		INNER JOIN   DBO.Split(@CompanyIds, ',') Company ON  (Company.Data = des.companyId OR @CompanyIds = '')
		INNER JOIN   DBO.Split(@LocationIds, ',') Location ON  (Location.Data = des.LocationId OR @LocationIds = '')		
		WHERE		
		 (
			   @SelectAll = 0
			   OR  (
					   @SelectAll = 1
				  AND  (
						   DATEDIFF(DAY,des.[Date],  @FromDate) >= 0
					   )
				   )
			   OR  (
					   @SelectAll = 2
				  AND  (
						   DATEDIFF(DAY,des.[Date],  @FromDate) <= 0
					  AND  DATEDIFF(DAY,des.[Date],  @ToDate) >= 0
					   )
				   )
			 
		 )
		GROUP BY des.CompanyId, 	
		des.LocationId, 			
		des.ProductId,
		CASE WHEN @ISTP=1 THEN (pc.TP) ELSE (PC.PP) END
) AS [A] ON [A].ProductId = up.ProductId
INNER JOIN   DBO.Split(@PBLIds, ',') PBL ON  (PBL.Data = up.PrincipalBusinessLineId OR @PBLIds = '')
INNER JOIN   DBO.Split(@ProductIds, ',') P ON  (P.Data = up.ProductId OR @ProductIds = '')
INNER JOIN uv_PrincipalBusinessLine_All upbla ON upbla.PrincipalBusinessLineId=up.PrincipalBusinessLineId
INNER JOIN (
				SELECT l1.SequenceId,l1.LocationId, l1.ShortName, max (des2.Date) AS MaxDate
				FROM Location l1
				INNER JOIN uv_DayEndSale des2 ON des2.LocationId = l1.LocationId
				WHERE DATEDIFF(DAY, des2.[Date],  @ToDate) >= 0
				GROUP BY l1.SequenceId,l1.LocationId, l1.ShortName
			)l 
ON l.LocationId = [A].LocationId
		
WHERE [A].LocationId IS NOT NULL

GROUP BY
	[A].CompanyId,
	l.SequenceId,	
	l.ShortName,
	UPBLA.PBLSequenceId,
	upbla.PrincipalBusinessLineId,
	upbla.Name,	
	up.ProductSequence ,
	up.ProductId,
	up.Name
	
ORDER BY 
l.SequenceId,
UPBLA.PBLSequenceId,
up.ProductSequence


 GO 
usp_report_DSP
dbo.fn_MonthEnd_Get_ClosingDSP
fn_MonthEnd_Get_DSPByDateRange
 GO 
DECLARE @COMPANYID INT = 1
		,@LOCATIONID INT = 11
		,@SNDID INT = 5
		
--SELECT	@CompanyId,@LocationId,@SNDID,
--		ISNULL(sum(sd.CustomerAdvanceAdjusted),0) * -1,
--		ISNULL(sum(sd.OutstationAdvanceAdjusted),0) *-1,
--		ISNULL(sum(sd.SLNAdjusted),0),
--		ISNULL(sum(sd.CustomerCNAdjusted),0),
--		ISNULL(sum(sd.WHTDeducted ),0),
--		ISNULL(sum(sd.InterBranchCollectionAdjusted ),0) * -1
--FROM snd s 
--		INNER JOIN SnDCollection sd ON sd.LocationId = s.LocationId AND sd.SnDId = s.SnDId
--WHERE	s.CompanyId=@CompanyId  AND s.LocationId=@LocationId AND s.SnDId < @SNDID    AND s.RollbackDate IS null		
--GROUP BY s.CompanyId,s.LocationId,s.SnDId

--SELECT	@CompanyId,@LocationId,@SNDID,	
--		sum(ISNULL(cc.CustomerAdvanceAdjusted,0))  * -1
--		,sum(ISNULL(cc.OSAdvanceAdjusted,0))  * -1
--		,sum(ISNULL(cc.SLNAdjusted,0))
--		,sum(ISNULL(cc.CreditNoteAdjusted,0))
--		,sum(ISNULL(cc.WHTAdjusted,0))
--		,sum(ISNULL(cc.InterBranchCollectionAmount,0)) * -1
--FROM	CreditCollection cc 
--		INNER JOIN SnDCreditCollection scc ON scc.LocationId=cc.LocationId AND scc.CreditCollectionId=cc.CreditCollectionId
--		INNER JOIN snd s ON s.LocationId = scc.LocationId AND s.SnDId = scc.SnDId
--WHERE	s.CompanyId=@CompanyId  AND s.LocationId=@LocationId AND s.SnDId < @SNDID  AND s.RollbackDate IS null
--GROUP BY s.CompanyId,s.LocationId,s.SnDId

SELECT	@CompanyId,@LocationId,@SNDID,	
		 0 --AdvanceAdjusted
		,0 --OSAdvanceAdjusted
		,0 --SLN Adjusted
		,0 --CN Adjusted
		,0 --WHTAdjusted
		,sum(ISNULL(ibc.TotalAmount,0))  --InterBranchCollectionAmount
FROM InterBranchCollection ibc
INNER JOIN SnDInterBranchCollection sibc ON sibc.LocationId = ibc.LocationId AND sibc.InterBranchCollectionId = ibc.InterBranchCollectionId
INNER JOIN snd s ON s.LocationId = sibc.LocationId AND s.SnDId = sibc.SnDId AND s.CompanyId=ibc.CompanyId
WHERE s.CompanyId=@CompanyId AND s.LocationId=@LocationId AND s.SnDId<@SNDID AND s.RollbackDate IS NULL





--SELECT SNDID 
--FROM SnD 
--WHERE SND.LOCATIONID = 11 AND SND.SNDNUMBER = 2

 GO 
SELECT * FROM sndInterBranchCollection sibc
SELECT * FROM InterBranchCollection ibc



SELECT * FROM INFORMATION_SCHEMA.columns 
WHERE column_name LIKE '%open%bal%'--'%inter%Branch%coll%'
	OR TABLE_NAME LIKE '%open%bal%'--'%inter%Branch%coll%'


--SELECT * FROM CreditCollectionInterBranch
SELECT * FROM sndcollection


SELECT * FROM sndremittance
 GO 
SELECT DISTINCT usso.SalePassDate,Count(usso.CustomerId)
  FROM uv_Sales_SaleOrder usso WHERE usso.LocationId = 11 AND usso.BookerId = 1 AND usso.PrincipalBusinessLineId = 3  AND DATEDIFF(DAY, usso.SalePassDate ,  '04/06/2014') <= 0 AND datediff (day,usso.SalePassDate , '04/06/2014') >= 0

GROUP BY usso.SalePassDate
  
  
 GO 



--EXEC usp_Report_SND 5,64,45
--CREATED BY : RIZWAN AHMED KHAN
--DATE       : 16 FEB, 2013
--PURPOSE    : GENERATE SND MAIN REPORT.

--CREATE PROC [dbo].usp_Report_SND @CompanyId int, @LocationId int,@SNDID int AS

DECLARE @CompanyId INT = 1, @LocationId INT = 11,@SNDID INT = 4 

SET @CompanyId = 1--@CompanyId
SET @LocationId = 11--@LocationId
SET @SNDID = 7--@SNDID
--Declaration for Adjustment
--drop table #TempCollectionReceipt

DECLARE
	@Cash					numeric(15,2),
	@Vault					numeric(15,2),
	@Cheque					numeric(15,2),
	@DD_PO					numeric(15,2),
	@TC 					numeric(15,2),
	@RS 					numeric(15,2),
	@DS_HO					numeric(15,2),
	@OtherDocument			numeric(15,2),
	@BalanceDeposited		numeric(15,2),
	@BankBalance			numeric(15,2),
	@TransferBankDOC		numeric(15,2),
	@RertunDocument			numeric(15,2),
	@BankChanrges			numeric(15,2),
	@Customer_ADJ			numeric(15,2),
	@OS_ADV_ADJ				numeric(15,2),
	@SLN_ADJ				numeric(15,2),
	@CN_ADJ					numeric(15,2),
	@WHT_ADJ				numeric(15,2),
	@IBC_ADJ				numeric(15,2),
	@SHORTAGE				numeric(15,2),
	@ROUNDOFF				numeric(15,2),
	@DS_BR					numeric(15,2),
	@ShortageCollection		numeric(15,2),
	@FromDate				datetime,
	@ToDate					datetime,
	
	--Remittance related variable
	@Remittance_OB						numeric(15,2),
	@Remittance_CollAccChqDishonoured	numeric(15,2),
	@Remittance_CollAccChqRedeposited	numeric(15,2),
	@Remittance_CashInHandDepInHOAcc	numeric(15,2),
	@Remittance_HOC						numeric(15,2),
	@Remittance_TC						numeric(15,2),
	@Remittance_DD_PO					numeric(15,2),
	@Remittance_CASH_DD					numeric(15,2),
	@Remittance_BANK_DD					numeric(15,2),
	@Remittance_OtherDocument			numeric(15,2),
	@Remittance_CollAccChqDepInHOAcc	numeric(15,2),
	@Remittance_TTFromCollAcc			numeric(15,2),
	@Remittance_DirectRemToHODS			numeric(15,2),
	@Remittance_DirectRemToHORS			numeric(15,2),
	@Remittance_TOTALREMITTEDTODAY		numeric(15,2),
	@Remittance_CF						numeric(15,2)
	

SELECT	@FromDate=s.FromDate, 
		@ToDate=s.ToDate 
FROM	SnD s
WHERE	s.CompanyId=@CompanyId and s.LocationId=@LocationID AND s.SnDId=@SNDID



SELECT c.Name AS CompanyName,l.ShortName AS LocationName,s.SnDNumber,s.FromDate,s.ToDate 
FROM snd s 
INNER JOIN Company c ON c.CompanyId = s.CompanyId
INNER JOIN Location l ON s.LocationId=l.LocationId
WHERE	s.CompanyId=@CompanyId and s.LocationId=@LocationID AND s.SnDId=@SNDID


--Create table for SND Reconciliation data
CREATE TABLE #SnDReconciliation (GroupID numeric(5,0),GroupDescription Varchar(50),SortID numeric(5,0),SourceReceipt Varchar(100),CompanyID numeric(9,0),LocationID numeric(9,0),SNDID numeric(9,0),
								Cash numeric(15,2),Cheque numeric(15,2),Vault numeric(15,2),DD_PO numeric(15,2),TC numeric(15,2),OtherDocument numeric(15,2)
								,BalanceDeposited numeric(15,2),BankBalance numeric(15,2),TotalBankBalance numeric(15,2),
								ReturnDocument numeric(15,2),BankCharges numeric(15,2),Shortage numeric(15,2),DirectlyRemitted numeric(15,2),
								Customer_ADJ numeric(15,2), OS_ADV_ADJ numeric(15,2), SLN_ADJ numeric(15,2), CN_ADJ numeric(15,2),
								WHT_ADJ numeric(15,2), IBC_ADJ numeric(15,2), ROUNDOFF numeric(15,2), TOTALREMITTABEBALANCE numeric(15,2))

--Create table for SND Remittance data
CREATE TABLE #SnDRemittance    (SortID numeric(5,0),SourceReceipt Varchar(100),CompanyID numeric(9,0),LocationID numeric(9,0),SNDID numeric(9,0),
								TotalAmount numeric(15,2))


----------------------------------------------------------------------------------------------------------------------------------------
-- BEGIN - SND COLLECTION
----------------------------------------------------------------------------------------------------------------------------------------

CREATE TABLE #TempSnDCollection (CompanyID numeric(9,0),LocationID numeric(9,0),SNDID numeric(9,0),SnDNumber numeric(9,0),SortID numeric(5,0),SourceReceipt Varchar(100),
								Cash numeric(15,2),Cheque numeric(15,2),DD_PO numeric(15,2),TC numeric(15,2)
								,RS numeric(15,2),DS_HO numeric(15,2),DS_BR numeric(15,2),OtherDocument  numeric(15,2),
								Customer_ADJ numeric(15,2), OS_ADV_ADJ numeric(15,2), SLN_ADJ numeric(15,2), CN_ADJ numeric(15,2),
								WHT_ADJ numeric(15,2), IBC_ADJ numeric(15,2),Shortage numeric(15,2), ROUNDOFF numeric(15,2), SUBTOTAL numeric(15,2), ALREADYINREMITTABLE numeric(15,2), ADDEDTOREMITTABLE numeric(15,2))

INSERT INTO #TempSnDCollection
exec usp_Report_SNDCollection @CompanyId,@LocationId,@SnDId
SELECT * FROM #TempSnDCollection

----------------------------------------------------------------------------------------------------------------------------------------
-- END - SND COLLECTION
----------------------------------------------------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------------------------------------------------
-- BEGIN - SND BANK BALANCE
----------------------------------------------------------------------------------------------------------------------------------------

CREATE TABLE #TempBankBalance (BankAccountID int, ShortName VarChar(75), OB int, BalanceDeposited numeric(15,4),BankBalance numeric(15,4))
INSERT INTO #TempBankBalance
exec usp_Report_SND_BankBalance @CompanyId,@LocationId,@SnDId

SELECT BankAccountID,ShortName,isnull(sum(isnull(BalanceDeposited,0)) ,0) AS BalanceDeposited
								,isnull(sum(isnull(BankBalance,0)) ,0) AS BankBalance
FROM #TempBankBalance
GROUP BY BankAccountID,ShortName
---------------------------------------------------------------------------------------------------------------------------------------
-- END - SND BANK BALANCE
----------------------------------------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------------------------------------
-- BEGIN - SND RECONCILLIATION OPENING BALANCE
----------------------------------------------------------------------------------------------------------------------------------------

CREATE TABLE #TempSnDOpeningBalance (CompanyID numeric(9,0),LocationID numeric(9,0),SNDID numeric(9,0),
								Cash numeric(15,2),Cheque numeric(15,2),Vault numeric(15,2),DD_PO numeric(15,2),TC numeric(15,2),OtherDocument numeric(15,2)
								,BalanceDeposited numeric(15,2),BankBalance numeric(15,2),TotalBankBalance numeric(15,2),
								ReturnDocument numeric(15,2),BankCharges numeric(15,2),Shortage numeric(15,2),DirectlyRemitted numeric(15,2),
								Customer_ADJ numeric(15,2), OS_ADV_ADJ numeric(15,2), SLN_ADJ numeric(15,2), CN_ADJ numeric(15,2),
								WHT_ADJ numeric(15,2), IBC_ADJ numeric(15,2), ROUNDOFF numeric(15,2))
INSERT INTO #TempSnDOpeningBalance
exec usp_Report_SNDOpeningBalance @CompanyId,@LocationId,@SnDId

-- Bank Balance Updates

UPDATE #TempSnDOpeningBalance SET BalanceDeposited =	(SELECT isnull(sum(isnull(BalanceDeposited,0)),0) FROM #TempBankBalance WHERE OB=1)
UPDATE #TempSnDOpeningBalance SET BankBalance =			(SELECT isnull(sum(isnull(BankBalance,0)),0) FROM #TempBankBalance WHERE OB=1)

--Reconciliation OPENING BALANCE
----------------------------------------------------------------------------------------------------------------------------------------
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,Cash,Cheque,Vault,DD_PO,TC,OtherDocument
								,BalanceDeposited,BankBalance,TotalBankBalance,ReturnDocument,BankCharges,Shortage,DirectlyRemitted,Customer_ADJ
								,OS_ADV_ADJ,SLN_ADJ,CN_ADJ,WHT_ADJ,IBC_ADJ,ROUNDOFF)	
SELECT		1 AS  GroupID, 'OPENING BALANCE' AS  GroupDescription,1 AS SortID,'OPENING BALANCE' AS SourceReceipt,
			CompanyID,LocationID,SNDID,Cash,Cheque,Vault,DD_PO,TC,OtherDocument,BalanceDeposited,BankBalance,TotalBankBalance = 0--BalanceDeposited + BankBalance
			,ReturnDocument,BankCharges,Shortage,DirectlyRemitted,Customer_ADJ,OS_ADV_ADJ,SLN_ADJ,CN_ADJ,WHT_ADJ,IBC_ADJ,ROUNDOFF
FROM #TempSnDOpeningBalance tsdb
----------------------------------------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------------------------------------
-- END - SND RECONCILLIATION OPENING BALANCE
----------------------------------------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------------------------------------
-- BEGIN - SND RECONCILLIATION 
----------------------------------------------------------------------------------------------------------------------------------------

---GET RECONCILIATION DATA
----------------------------------------------------------------------------------------------------------------------------------------
SELECT	 @CASH			=	ISNULL(sum(isnull(Cash,0)),0)
		,@CHEQUE		=	ISNULL(sum(isnull(Cheque,0)),0)
		,@DD_PO			=	ISNULL(sum(isnull(DD_PO,0)),0)
		,@TC			=	ISNULL(sum(isnull(TC,0)),0)
		,@OtherDocument	=	ISNULL(sum(isnull(OtherDocument,0)),0)
		,@Shortage		=	ISNULL(sum(isnull(Shortage,0)),0) --+ ISNULL(sum(isnull(ROUNDOFF,0)),0)
		,@RS			=	ISNULL(sum(isnull(RS,0)),0)
		,@DS_HO			=	ISNULL(sum(isnull(DS_HO,0)),0)
		,@DS_BR			=	ISNULL(sum(isnull(DS_BR,0)),0)
		,@Remittance_DirectRemToHODS	=	ISNULL(sum(isnull(DS_HO,0)),0)
		,@Remittance_DirectRemToHORS	=	ISNULL(sum(isnull(RS,0)),0)
FROM	#TempSnDCollection tsd

--GET REMITTANCE DATA
SELECT	@Remittance_OB						= sr.OpeningBalance
		,@Remittance_TTFromCollAcc			= sr.TotalCollectionAccountRemittance
		,@Remittance_DD_PO					= sr.TotalBankDD + sr.TotalCashDD
		,@Remittance_CASH_DD				= sr.TotalCashDD
		,@Remittance_BANK_DD				= sr.TotalBankDD 
		,@Remittance_CollAccChqDishonoured	= sr.TotalCollectionAccountReturned
		,@Remittance_CollAccChqRedeposited	= sr.TotalCollectionAccountRedeposited 

FROM	snd s 
		INNER JOIN SnDRemittance sr ON sr.LocationId = s.LocationId AND sr.SnDId = s.SnDId
WHERE	s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL


--GET OTHER REMITTANCE DATA
SELECT	 @Remittance_DD_PO			= @Remittance_DD_PO + isnull(sum(isnull(DD_PO,0)),0)
		,@Remittance_TC				= isnull(sum(isnull(TC,0)),0)
		,@Remittance_OtherDocument	= isnull(sum(isnull(OtherDocument,0)),0)
		
from	(
		SELECT	DD_PO = (CASE WHEN pm.TypeCode IN ('DD','PO') THEN isnull(sum(isnull(PT.Amount,0)),0) ELSE 0 END)
				,TC = (CASE WHEN pm.TypeCode='TC' THEN isnull(sum(isnull(PT.Amount,0)),0) ELSE 0 END)
				,OtherDocument = (CASE WHEN pm.TypeCode NOT IN ('DD','PO','TC','RS') THEN isnull(sum(isnull(PT.Amount,0)),0) ELSE 0 END)
				
		FROM snd s 
		INNER JOIN SnDRemittanceOtherDoc ROD ON s.LocationId=ROD.LocationId AND s.SnDId=ROD.SnDId
		INNER JOIN PaymentTransaction pt ON pt.LocationId = ROD.LocationId AND pt.PaymentTransactionId = ROD.PaymentTransactionId
		INNER JOIN PaymentMode pm ON pt.PaymentModeId=pm.PaymentModeId
		WHERE s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL
		GROUP BY pm.TypeCode
		) tmp



----------------------------------------------------------------------------------------------------------------------------------------
--ADDITION-1: RECEIVED TODAY / DIRECT REMITTED
----------------------------------------------------------------------------------------------------------------------------------------

--ADD: RECEIVED TODAY / DIRECT REMITTED
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID
			,Cash,Cheque,DD_PO,TC,OtherDocument,DirectlyRemitted,BankBalance)
(
SELECT	2 AS  GroupID, 'ADDITION' AS  GroupDescription,1 AS SortID,'ADD: RECEIVED TODAY / DIRECT REMITTED' AS SourceReceipt,@CompanyID,@LocationID,@SNDID
		,@CASH,@CHEQUE,@DD_PO,@TC,@OtherDocument,@RS+@DS_HO,@DS_BR
)		



----------------------------------------------------------------------------------------------------------------------------------------
--ADDITION-2: DEPOSITED IN BANK
----------------------------------------------------------------------------------------------------------------------------------------
--		CASH Deposit in Collection A/C

SELECT	@Cash = sum(cash)
		,@Vault = sum(Vault)
FROM
(
SELECT	Cash=(CASE WHEN scd.VaultCompanyId IS NULL then isnull(sum(isnull(DepositAmount ,0)),0) ELSE 0 END),
		Vault=(CASE WHEN scd.VaultCompanyId IS not NULL then isnull(sum(isnull(DepositAmount ,0)),0) ELSE 0 END)
		
FROM	SnD s 
		LEFT Outer JOIN SnDCashDepositBank scd ON s.LocationId = scd.LocationId AND s.SnDId = scd.SnDId
		LEFT Outer JOIN PaymentTransaction pt ON scd.LocationId=pt.LocationId AND scd.PaymentTransactionId=pt.PaymentTransactionId  
		LEFT Outer JOIN BankAccount ba ON  pt.SystemBankAccountId=ba.BankAccountId 
WHERE	s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL AND ba.AccountType='BR'
GROUP BY s.CompanyId,s.LocationId,s.SnDId,scd.VaultCompanyId
) tmp
--ADD: CASH DEPOSITED IN BANK
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,BankBalance)
(
SELECT	2 AS  GroupID, 'ADDITION' AS  GroupDescription,2 AS SortID,'ADD: DEPOSITED IN BANK' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@Cash+@Vault
)
--LESS: DEPOSITED IN COLLECTION A/C
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,Cash,Vault)
(
SELECT	3 AS  GroupID, 'DEDUCTION' AS  GroupDescription,1 AS SortID,'LESS: DEPOSITED IN COLLECTION A/C' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@Cash,@Vault
)





--		DOC Deposit in bank but not credited



SELECT	@Cheque=isnull(sum(isnull(Cheque,0)),0)
		,@DD_PO=isnull(sum(isnull(DD_PO,0)),0)
		,@TC=isnull(sum(isnull(TC,0)),0)
		,@OtherDocument=isnull(sum(isnull(OtherDocument,0)),0)
		,@TransferBankDOC=isnull(sum(isnull(TransferBankDOC,0)),0)
from	(
		SELECT	Cheque = (CASE WHEN sbd.Type='D' AND pm.TypeCode='CHQ' THEN isnull(sum(isnull(sbd.Amount,0)),0) ELSE 0 END)
				,DD_PO = (CASE WHEN sbd.Type='D' AND pm.TypeCode IN ('DD','PO') THEN isnull(sum(isnull(sbd.Amount,0)),0) ELSE 0 END)
				,TC = (CASE WHEN sbd.Type='D' AND pm.TypeCode='TC' THEN isnull(sum(isnull(sbd.Amount,0)),0) ELSE 0 END)
				,OtherDocument = (CASE WHEN sbd.Type='D' AND pm.TypeCode NOT IN ('CHQ','CASH','DD','PO','TC') THEN isnull(sum(isnull(sbd.Amount,0)),0) ELSE 0 END)
				,TransferBankDOC = (CASE WHEN sbd.Type='T' THEN isnull(sum(isnull(sbd.Amount,0)),0) ELSE 0 END)
		FROM snd s 
		LEFT Outer  JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.DepositedSnDId
		LEFT Outer  JOIN PaymentTransaction pt ON pt.LocationId = sbd.LocationId AND pt.PaymentTransactionId = sbd.PaymentTransactionId
		LEFT Outer  JOIN PaymentMode pm ON pt.PaymentModeId=pm.PaymentModeId
		WHERE sbd.Type IN ('D','T') AND pm.IsToBeDeposited=1 
		AND s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL
		GROUP BY pm.TypeCode,sbd.Type
		) tmp
--ADD: DOC DEPOSITED IN BANK
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,BalanceDeposited)
(
SELECT	2 AS  GroupID, 'ADDITION' AS  GroupDescription,2 AS SortID,'ADD: DEPOSITED IN BANK' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@Cheque+@DD_PO+@TC+@OtherDocument+@TransferBankDOC
)
--LESS: DOC DEPOSITED IN COLLECTION A/C
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,Cheque,DD_PO,TC,OtherDocument,BankBalance)
(
SELECT	3 AS  GroupID, 'DEDUCTION' AS  GroupDescription,1 AS SortID,'LESS: DEPOSITED IN COLLECTION A/C' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@Cheque,@DD_PO,@TC,@OtherDocument,@TransferBankDOC
)
----------------------------------------------------------------------------------------------------------------------------------------
--ADD: RETURNED CHQ. REDEPOSITED
----------------------------------------------------------------------------------------------------------------------------------------
SELECT	@Cheque=isnull(sum(isnull(Cheque,0)),0)
		,@DD_PO=isnull(sum(isnull(DD_PO,0)),0)
		,@TC=isnull(sum(isnull(TC,0)),0)
		,@OtherDocument=isnull(sum(isnull(OtherDocument,0)),0)
		,@TransferBankDOC=isnull(sum(isnull(TransferBankDOC,0)),0)
from	(
		SELECT	Cheque = (CASE WHEN sbd.Type='D' AND pm.TypeCode='CHQ' THEN isnull(sum(isnull(sbd.Amount,0)),0) ELSE 0 END)
				,DD_PO = (CASE WHEN sbd.Type='D' AND pm.TypeCode IN ('DD','PO') THEN isnull(sum(isnull(sbd.Amount,0)),0) ELSE 0 END)
				,TC = (CASE WHEN sbd.Type='D' AND pm.TypeCode='TC' THEN isnull(sum(isnull(sbd.Amount,0)),0) ELSE 0 END)
				,OtherDocument = (CASE WHEN sbd.Type='D' AND pm.TypeCode NOT IN ('CHQ','CASH','DD','PO','TC','DS') THEN isnull(sum(isnull(sbd.Amount,0)),0) ELSE 0 END)
				,TransferBankDOC = (CASE WHEN sbd.Type='T' THEN isnull(sum(isnull(sbd.Amount,0)),0) ELSE 0 END)
		FROM snd s 
		LEFT Outer  JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.DepositedSnDId
		LEFT Outer  JOIN PaymentTransaction pt ON pt.LocationId = sbd.LocationId AND pt.PaymentTransactionId = sbd.PaymentTransactionId
		LEFT Outer  JOIN PaymentMode pm ON pt.PaymentModeId=pm.PaymentModeId
		WHERE sbd.Type IN ('D','T') AND pm.IsToBeDeposited=1 
		AND s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND sbd.LastSettlementSnDId=@SNDID AND s.RollbackDate IS NULL
		--All Redeposit Doc
		AND EXISTS (SELECT sbd2.SnDBankDocMovementId FROM SnDBankDocMovement sbd2 
						WHERE sbd2.PaymentTransactionId=sbd.PaymentTransactionId
						AND sbd2.DepositedSnDId=sbd.LastSettlementSnDId)
		GROUP BY pm.TypeCode,sbd.Type
		) tmp


INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,Cheque,DD_PO,TC,OtherDocument,BankBalance)
(
SELECT	2 AS  GroupID, 'ADDITION' AS  GroupDescription,3 AS SortID,'ADD: RETURNED CHQ. REDEPOSITED' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@Cheque,@DD_PO,@TC,@OtherDocument,@TransferBankDOC
)

INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,BankBalance)
(
SELECT	3 AS  GroupID, 'DEDUCTION' AS  GroupDescription,10 AS SortID,'LESS: COLLECTION A/C CHEQUE REDEPOSITED' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@TransferBankDOC
)
--LESS: RETURN DOCUMENT SETTLEMENT
--INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,ReturnDocument)
--(
--SELECT	3 AS  GroupID, 'DEDUCTION' AS  GroupDescription,11 AS SortID,'LESS: DEDUCTED / ADJUSTED /CLEARED'  AS SourceReceipt
--		,@CompanyID,@LocationID,@SNDID, @Cheque + @DD_PO + @TC + @OtherDocument
--)
----------------------------------------------------------------------------------------------------------------------------------------
--ADD: CHEQUE CLEARED & REMITTABLE BY BANK
----------------------------------------------------------------------------------------------------------------------------------------
SELECT	@BankBalance = isnull(sum(isnull(sbd.Amount,0)),0)
FROM snd s 
LEFT Outer  JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.ClearedSnDId
LEFT Outer  JOIN PaymentTransaction pt ON pt.LocationId = sbd.LocationId AND pt.PaymentTransactionId = sbd.PaymentTransactionId
LEFT Outer  JOIN PaymentMode pm ON pt.PaymentModeId=pm.PaymentModeId
WHERE sbd.Type IN ('D','T') AND pm.IsToBeDeposited=1 
AND s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL

INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,BankBalance)
(
SELECT	2 AS  GroupID, 'ADDITION' AS  GroupDescription,4 AS SortID,'ADD: CHEQUE CLEARED & REMITTABLE BY BANK' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@BankBalance
)
--LESS: DOC DEPOSITED IN COLLECTION A/C
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,BalanceDeposited)
(
SELECT	3 AS  GroupID, 'DEDUCTION' AS  GroupDescription,6 AS SortID,'LESS: CHEQUE CLEARED FROM NOT CREDATED' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@BankBalance
)
----------------------------------------------------------------------------------------------------------------------------------------
--ADD: CASH DD / BANK DD PREPARED
----------------------------------------------------------------------------------------------------------------------------------------
SELECT	@Cash=(CASE WHEN scd.VaultCompanyId IS NULL then isnull(sum(isnull(SCD.Amount  ,0)),0) ELSE 0 END),
		@Vault=(CASE WHEN scd.VaultCompanyId IS not NULL then isnull(sum(isnull(SCD.Amount ,0)),0) ELSE 0 END)
FROM	SnD s 
		LEFT Outer  JOIN SnDCashDD scd ON s.LocationId = scd.LocationId AND s.SnDId = scd.SnDId
WHERE	s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL 
GROUP BY s.CompanyId,s.LocationId,s.SnDId,scd.VaultCompanyId

SELECT	@BankBalance=isnull(sum(isnull(bd.Amount  ,0)),0)
FROM	SnD s 
		LEFT Outer  JOIN SnDBankDD bd ON s.LocationId = bd.LocationId AND s.SnDId = bd.SnDId
WHERE	s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL 
GROUP BY s.CompanyId,s.LocationId,s.SnDId

--ADD: CASH DEPOSITED IN BANK
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,DD_PO)
(
SELECT	2 AS  GroupID, 'ADDITION' AS  GroupDescription,5 AS SortID,'ADD: CASH DD / BANK DD PREPARED' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@Cash+@Vault+@BankBalance
)
--LESS: DEPOSITED IN COLLECTION A/C
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,Cash,Vault,BankBalance)
(
SELECT	3 AS  GroupID, 'DEDUCTION' AS  GroupDescription,4 AS SortID,'LESS: CASH DD / BANK DD PREPARED' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@Cash,@Vault,@BankBalance
)

----------------------------------------------------------------------------------------------------------------------------------------
--ADD: COLLECTION A/C CHEQUE RETURN
----------------------------------------------------------------------------------------------------------------------------------------
SELECT	@BankBalance = isnull(sum(isnull(sbd.Amount,0)),0)
FROM snd s 
LEFT Outer  JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.ReturnedSnDId
LEFT Outer  JOIN PaymentTransaction pt ON pt.LocationId = sbd.LocationId AND pt.PaymentTransactionId = sbd.PaymentTransactionId
LEFT Outer  JOIN PaymentMode pm ON pt.PaymentModeId=pm.PaymentModeId
WHERE sbd.Type IN ('R','T') AND pm.IsToBeDeposited=1 
AND s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL

INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,BankBalance)
(
SELECT	2 AS  GroupID, 'ADDITION' AS  GroupDescription,6 AS SortID,'ADD: COLLECTION A/C CHEQUE RETURN' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@BankBalance
)
----------------------------------------------------------------------------------------------------------------------------------------
--ADD: ADDED / RECEIVED
----------------------------------------------------------------------------------------------------------------------------------------
SET @Customer_ADJ=0
SET @OS_ADV_ADJ=0
SET @WHT_ADJ=0
SET @RertunDocument=0
SET @BankChanrges=0
SET @Cash=0
SET @Vault=0


--RETURN CHQ
SELECT	@RertunDocument = isnull(sum(isnull(sbd.Amount,0)),0)
FROM snd s 
LEFT Outer  JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.ReturnedSnDId
LEFT Outer  JOIN PaymentTransaction pt ON pt.LocationId = sbd.LocationId AND pt.PaymentTransactionId = sbd.PaymentTransactionId
LEFT Outer  JOIN PaymentMode pm ON pt.PaymentModeId=pm.PaymentModeId
WHERE sbd.Type IN ('D') AND pm.IsToBeDeposited=1 
AND s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL

--Customer Advance , OS Advance  Receiving and WHT deducted
SELECT	@Customer_ADJ = isnull(sum(isnull(sc.CustomerAdvance ,0)),0)
		,@OS_ADV_ADJ = isnull(sum(isnull(sc.OutstationAdvance ,0)),0)
		,@WHT_ADJ = isnull(sum(isnull(sc.WHTDeducted,0)),0)
FROM snd s 
LEFT Outer  JOIN SnDCollection sc ON s.LocationId=sc.LocationId AND s.SnDId=sc.SnDId
WHERE s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL

--Bank Charges
SELECT	@BankChanrges = isnull(sum(isnull(bc.Amount ,0)),0)
FROM snd s 
LEFT Outer  JOIN SnDBankCharges bc ON s.LocationId=bc.LocationId AND s.SnDId=bc.SnDId
WHERE s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL


--SND Cash Reduction
SELECT	@Cash = isnull(sum(isnull(cr.ReductionAmount ,0)),0)
FROM snd s 
LEFT Outer  JOIN SnDCashReduction cr ON s.LocationId=cr.LocationId AND s.SnDId=cr.SnDId
WHERE s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL

--Cash Deposit in Vault
SELECT	@Vault = isnull(sum(isnull(cd.DepositedInVault ,0)),0)
FROM snd s 
LEFT Outer  JOIN SnDCashDetail cd ON s.LocationId=cd.LocationId AND s.SnDId=cd.SnDId
WHERE s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL


--SLN
SELECT @SLN_ADJ= isnull(sum(isnull(s.TotalNet ,0)),0) --*-1
FROM SLN s
WHERE  s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.BLMApprovalDate BETWEEN @FromDate AND @Todate AND s.totalnet>0

--CN
SELECT @CN_ADJ = isnull(sum(isnull(cn.Amount  ,0)),0) --*-1
FROM CustomerCreditNote cn
WHERE  cn.CompanyId=@CompanyId AND cn.LocationId=@LocationID AND cn.BranchApprovalDate BETWEEN @FromDate AND @Todate AND cn.Amount>0

--IBC --CHANGED BY OVAIS ON 24 OCT 2013
SELECT @IBC_ADJ = isnull(sum(isnull(ibc.TotalAmount  ,0)),0) --* -1
--FROM InterBranchCollection ibc
--WHERE  ibc.CompanyId=@CompanyId AND ibc.LocationId=@LocationID AND ibc.ApprovalDate BETWEEN @FromDate AND @Todate AND ibc.TotalAmount>0
FROM InterBranchCollection ibc
INNER JOIN SnDInterBranchCollection sibc ON sibc.LocationId = ibc.LocationId AND sibc.InterBranchCollectionId = ibc.InterBranchCollectionId
INNER JOIN snd s ON s.LocationId = sibc.LocationId AND s.SnDId = sibc.SnDId AND s.CompanyId=ibc.CompanyId
WHERE s.CompanyId=@CompanyId AND s.LocationId=@LocationId AND s.SnDId = @SNDID AND s.RollbackDate IS NULL


--ADDED / RECEIVED
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,Vault,ReturnDocument,BankCharges
								,Shortage,Customer_ADJ,OS_ADV_ADJ,SLN_ADJ,CN_ADJ,WHT_ADJ,IBC_ADJ)
(
SELECT	2 AS  GroupID, 'ADDITION' AS  GroupDescription,7 AS SortID,'ADD: ADDED / RECEIVED' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@Vault,@RertunDocument,@BankChanrges,@SHORTAGE+@CASH,@Customer_ADJ,@OS_ADV_ADJ,@SLN_ADJ,@CN_ADJ,@WHT_ADJ,@IBC_ADJ
)

--LESS: CHEQUE DISHONOURED
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,BalanceDeposited)
(
SELECT	3 AS  GroupID, 'DEDUCTION' AS  GroupDescription,7 AS SortID,'LESS: CHEQUE DISHONOURED' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@RertunDocument
)
--LESS: BANK CHARGES
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,BankBalance)
(
SELECT	3 AS  GroupID, 'DEDUCTION' AS  GroupDescription,8 AS SortID,'LESS: BANK CHARGES' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@BankChanrges
)
--LESS: CASH DEPOSIT IN VAULT
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,Cash)
(
SELECT	3 AS  GroupID, 'DEDUCTION' AS  GroupDescription,11 AS SortID,'LESS: DEDUCTED / ADJUSTED /CLEARED'  AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@Vault
)


SET @Vault=0
--Cash Received From Vault
SELECT	@Vault = isnull(sum(isnull(cd.ReceivedFromVault ,0)),0)
FROM snd s 
LEFT Outer  JOIN SnDCashDetail cd ON s.LocationId=cd.LocationId AND s.SnDId=cd.SnDId
WHERE s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL
--ADDED / RECEIVED
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,Cash)
(
SELECT	2 AS  GroupID, 'ADDITION' AS  GroupDescription,7 AS SortID,'ADD: ADDED / RECEIVED' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@Vault
)
--LESS: CASH DEPOSIT IN VAULT
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,Vault)
(
SELECT	3 AS  GroupID, 'DEDUCTION' AS  GroupDescription,11 AS SortID,'LESS: DEDUCTED / ADJUSTED /CLEARED'  AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@Vault
)


----------------------------------------------------------------------------------------------------------------------------------------
--LESS: DEPOSITED IN HO A/C
----------------------------------------------------------------------------------------------------------------------------------------
SET @Cash=0
SET @Vault=0
SET @Remittance_CashInHandDepInHOAcc=0
SET @DD_PO=0
SET @TC=0
SET @OtherDocument=0

SELECT	@Cash=(CASE WHEN scd.VaultCompanyId IS NULL then isnull(sum(isnull(DepositAmount ,0)),0) ELSE 0 END)
		,@Vault=(CASE WHEN scd.VaultCompanyId IS not NULL then isnull(sum(isnull(DepositAmount ,0)),0) ELSE 0 END)
		,@Remittance_CashInHandDepInHOAcc = isnull(sum(isnull(DepositAmount ,0)),0)
		
FROM	SnD s 
		LEFT Outer  JOIN SnDCashDepositBank scd ON s.LocationId = scd.LocationId AND s.SnDId = scd.SnDId
		LEFT Outer  JOIN PaymentTransaction pt ON scd.LocationId=pt.LocationId AND scd.PaymentTransactionId=pt.PaymentTransactionId  
		LEFT Outer  JOIN BankAccount ba ON pt.CompanyId=ba.CompanyId and pt.SystemBankAccountId=ba.BankAccountId  AND ba.CloseDate IS null
WHERE	s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL  AND ba.AccountType IN ('HO','HOBR')
GROUP BY s.CompanyId,s.LocationId,s.SnDId,scd.VaultCompanyId

SET @Cash = isnull(@Cash,0)
SET @Vault = isnull(@Vault,0)
SET @Remittance_CashInHandDepInHOAcc = isnull(@Remittance_CashInHandDepInHOAcc,0)

SELECT	@DD_PO			= isnull(sum((CASE WHEN pm.TypeCode IN ('DD','PO') THEN pt.Amount ELSE 0 END)),0) ,
		@TC				= isnull(sum((CASE WHEN pm.TypeCode='TC' THEN pt.Amount ELSE 0 END)),0),
		@OtherDocument	=	isnull(sum((CASE WHEN pm.TypeCode NOT IN ('DD','PO','TC') THEN pt.Amount ELSE 0 END)),0)
FROM	snd s 
		LEFT OUTER JOIN SnDRemittanceOtherDoc sro ON sro.LocationId = s.LocationId AND sro.SnDId = s.SnDId
		LEFT OUTER JOIN PaymentTransaction pt ON pt.LocationId = sro.LocationId AND pt.PaymentTransactionId = sro.PaymentTransactionId 
		LEFT OUTER JOIN PaymentMode pm ON pm.PaymentModeId= pt.PaymentModeId AND pm.IsToBeRemitted=1 
WHERE	s.CompanyId =@CompanyId and s.LocationId=@LocationID AND s.SnDId = @SNDID


--LESS: DEPOSITED IN COLLECTION A/C
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,Cash,Vault,DD_PO,TC,OtherDocument)
(
SELECT	3 AS  GroupID, 'DEDUCTION' AS  GroupDescription,2 AS SortID,'LESS: DEPOSITED IN HO A/C' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@Cash,@Vault,@DD_PO,@TC,@OtherDocument
)



----------------------------------------------------------------------------------------------------------------------------------------
--LESS: WITHDRAWAL AG. HOC
----------------------------------------------------------------------------------------------------------------------------------------
SELECT	@Cash	=	isnull(sum(isnull(h.Amount ,0)),0) 
		,@Remittance_HOC=	isnull(sum(isnull(h.Amount ,0)),0) 
FROM	HOC h 
WHERE	h.CompanyId=@CompanyId AND h.LocationId=@LocationID AND h.WithdrawSnDId=@SNDID AND h.ApprovalDate IS NOT null


--LESS: DEPOSITED IN COLLECTION A/C
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,Cash)
(
SELECT	3 AS  GroupID, 'DEDUCTION' AS  GroupDescription,3 AS SortID,'LESS: WITHDRAWAL AG. HOC' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@Cash
)


----------------------------------------------------------------------------------------------------------------------------------------
--LESS: COLLECTION A/C CHEQUE DEPOSITED
----------------------------------------------------------------------------------------------------------------------------------------
SELECT @Remittance_CollAccChqDepInHOAcc = sum(Remittance_CollAccChqDepInHOAcc)
		,@Remittance_TTFromCollAcc=sum(Remittance_TTFromCollAcc)
FROM
(
SELECT	--@BankBalance = isnull(sum(isnull(sbd.Amount,0)),0)
		Remittance_CollAccChqDepInHOAcc = (CASE WHEN pm.IsDirectRemitted<>1 THEN isnull(sum(isnull(sbd.Amount,0)),0) ELSE 0 END)
		,Remittance_TTFromCollAcc = (CASE WHEN pm.IsDirectRemitted=1 THEN isnull(sum(isnull(sbd.Amount,0)),0) ELSE 0 END)
		
FROM snd s 
LEFT Outer JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.DepositedSnDId
LEFT Outer  JOIN PaymentTransaction pt ON pt.LocationId = sbd.LocationId AND pt.PaymentTransactionId = sbd.PaymentTransactionId
LEFT Outer  JOIN PaymentMode pm ON pt.PaymentModeId=pm.PaymentModeId
WHERE sbd.Type IN ('R') --AND pm.IsToBeDeposited=1 
AND s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL
GROUP BY pm.IsDirectRemitted
) tmp

--LESS: DOC DEPOSITED IN COLLECTION A/C
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,BankBalance)
(
SELECT	3 AS  GroupID, 'DEDUCTION' AS  GroupDescription,9 AS SortID,'LESS: COLLECTION A/C CHEQUE DEPOSITED' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@Remittance_CollAccChqDepInHOAcc
)
----------------------------------------------------------------------------------------------------------------------------------------
--LESS: SENT / TRANSFERRED TO HO
----------------------------------------------------------------------------------------------------------------------------------------

--LESS: SENT / TRANSFERRED TO HO
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,BankBalance, DD_PO)
(
SELECT	3 AS  GroupID, 'DEDUCTION' AS  GroupDescription,5 AS SortID,'LESS: SENT / TRANSFERRED TO HO' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@Remittance_TTFromCollAcc,@Remittance_CASH_DD+@Remittance_BANK_DD
)
--LESS: COLLECTION A/C CHEQUE REDEPOSITED
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,BalanceDeposited)
(
SELECT	3 AS  GroupID, 'DEDUCTION' AS  GroupDescription,10 AS SortID,'LESS: COLLECTION A/C CHEQUE REDEPOSITED' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@Remittance_CollAccChqRedeposited
)


--SELECT * FROM SnDRemittance sdd


----------------------------------------------------------------------------------------------------------------------------------------
--LESS: DEDUCTED / ADJUSTED / CLEARED
----------------------------------------------------------------------------------------------------------------------------------------
--Bank Charges Recorded
--SELECT	@BankBalance = isnull(sum(isnull(bc.Amount ,0)),0)
--FROM snd s 
--LEFT Outer  JOIN SnDBankCharges bc ON s.LocationId=bc.LocationId AND s.SnDId=bc.SnDId
--WHERE s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL

--Bank Charges Collected
--SELECT	@BankChanrges = isnull(sum(isnull(bc.Amount ,0)),0)
--FROM snd s 
--LEFT Outer JOIN SnDBankCharges bc ON s.LocationId=bc.LocationId AND s.SnDId=bc.CollectionSnDId
--WHERE s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL

--SND Cash Reduction
SELECT	@Cash = isnull(sum(isnull(cr.ReductionAmount ,0)),0)
FROM snd s 
LEFT Outer JOIN SnDCashReduction cr ON s.LocationId=cr.LocationId AND s.SnDId=cr.SnDId
WHERE s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL


SELECT	@ShortageCollection = isnull(sum(isnull(SC.CollectedAmount ,0)),0)
FROM snd s 
LEFT Outer JOIN SnDShortageCollection SC ON s.LocationId=SC.LocationId AND s.SnDId=SC.SnDId
WHERE s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL



SELECT	 @RS			=	ISNULL(sum(isnull(RS,0)),0)
		,@DS_HO			=	ISNULL(sum(isnull(DS_HO,0)),0)
		,@IBC_ADJ		=	ISNULL(sum(isnull(IBC_ADJ,0)),0)
		,@Customer_ADJ	=	ISNULL(sum(isnull(Customer_ADJ,0)),0)
		,@OS_ADV_ADJ	=	ISNULL(sum(isnull(OS_ADV_ADJ,0)),0)
		,@SLN_ADJ		=	ISNULL(sum(isnull(SLN_ADJ,0)),0)
		--,@WHT_ADJ		=	ISNULL(sum(isnull(WHT_ADJ,0)),0)
		,@CN_ADJ		=	ISNULL(sum(isnull(CN_ADJ,0)),0)
FROM #TempSnDCollection tsd


SELECT @RertunDocument= isnull(sum(isnull(sd.SettlementAmount, 0) ),0)
FROM    SnD s LEFT Outer JOIN
		SnDBankDocSettlement sd ON sd.LocationId = s.LocationId AND sd.SnDId = s.SnDId
WHERE	s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId=@SNDID AND s.RollbackDate IS NULL

--WHT
SELECT @WHT_ADJ = isnull(sum(isnull(wr.AdjustedAmount  ,0)),0)
FROM WHTReversal wr 
WHERE  wr.CompanyId=@CompanyId AND wr.LocationId=@LocationID AND wr.ApprovalDate BETWEEN @FromDate AND @Todate AND wr.AdjustedAmount>0

SELECT @WHT_ADJ =@WHT_ADJ + isnull(sum(isnull(wso.AdjustedAmount  ,0)),0)
FROM WHTChallanSaleOrder wso 
WHERE  wso.LocationId=@LocationID AND CONVERT(datetime,CONVERT(varchar(10),wso.insertdate,101)) BETWEEN @FromDate AND @Todate AND wso.AdjustedAmount>0


--LESS: DOC DEPOSITED IN COLLECTION A/C
INSERT INTO #SnDReconciliation (GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID,Cash,ReturnDocument
								,Shortage,DirectlyRemitted,Customer_ADJ,OS_ADV_ADJ,SLN_ADJ,CN_ADJ,WHT_ADJ,IBC_ADJ)
(
SELECT	3 AS  GroupID, 'DEDUCTION' AS  GroupDescription,11 AS SortID,'LESS: DEDUCTED / ADJUSTED /CLEARED' AS SourceReceipt
		,@CompanyID,@LocationID,@SNDID,@Cash,@RertunDocument,@ShortageCollection,@DS_HO+@RS
		,@Customer_ADJ,@OS_ADV_ADJ,@SLN_ADJ,@CN_ADJ,@WHT_ADJ,@IBC_ADJ
)

SELECT GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID
		,ISNULL(SUM(ISNULL(Cash,0)),0) AS Cash
		,ISNULL(SUM(ISNULL(Cheque,0)),0) AS Cheque
		,ISNULL(SUM(ISNULL(Vault,0)),0) AS Vault
		,ISNULL(SUM(ISNULL(DD_PO,0)),0) AS DD_PO
		,ISNULL(SUM(ISNULL(TC,0)),0) AS TC
		,ISNULL(SUM(ISNULL(OtherDocument,0)),0) AS OtherDocument
		,ISNULL(SUM(ISNULL(BalanceDeposited,0)),0) AS BalanceDeposited
		,ISNULL(SUM(ISNULL(BankBalance,0)),0) AS BankBalance
		,ISNULL(SUM(ISNULL(TotalBankBalance,0)),0) AS TotalBankBalance
		,ISNULL(SUM(ISNULL(ReturnDocument,0)),0) AS ReturnDocument
		,ISNULL(SUM(ISNULL(BankCharges,0)),0) AS BankCharges
		,ISNULL(SUM(ISNULL(Shortage,0)),0) AS Shortage
		,ISNULL(SUM(ISNULL(DirectlyRemitted,0)),0) AS DirectlyRemitted
		,ISNULL(SUM(ISNULL(Customer_ADJ,0)),0) AS Customer_ADJ
		,ISNULL(SUM(ISNULL(OS_ADV_ADJ,0)),0) AS OS_ADV_ADJ
		,ISNULL(SUM(ISNULL(SLN_ADJ,0)),0) AS SLN_ADJ
		,ISNULL(SUM(ISNULL(CN_ADJ,0)),0) AS CN_ADJ
		,ISNULL(SUM(ISNULL(WHT_ADJ,0)),0) AS WHT_ADJ
		,ISNULL(SUM(ISNULL(IBC_ADJ,0)),0) AS IBC_ADJ
		,ISNULL(SUM(ISNULL(ROUNDOFF,0)),0) AS ROUNDOFF
		,ISNULL(SUM(ISNULL(TOTALREMITTABEBALANCE,0)),0) AS TOTALREMITTABEBALANCE
		
FROM #SnDReconciliation
GROUP BY GroupID,GroupDescription,SortID,SourceReceipt,CompanyID,LocationID,SNDID

---------------------------------------------------------------------------------------------------------------------------------------
-- END - SND RECONCILLIATION 
----------------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------------------------
-- BEGIN - REIMTTANCE RELATED INFORMATION
----------------------------------------------------------------------------------------------------------------------------------------

	--REMITTANCE-1   (REMITTANCE TO HO B/F)
	INSERT INTO #SnDRemittance(SortID,SourceReceipt,CompanyID,LocationID,SNDID,TotalAmount)
	(
	SELECT	1 AS SortID,
			'REMITTANCE TO HO B/F' AS SourceReceipt,
			@CompanyID,
			@LocationID,
			@SNDID,
			isnull(@Remittance_OB,0)
	)
	
	--REMITTANCE-2   (ADD: COLLECTION A/C CHEQUE DISHONOURED)
	INSERT INTO #SnDRemittance(SortID,SourceReceipt,CompanyID,LocationID,SNDID,TotalAmount)
	(
	SELECT	2 AS SortID,'ADD: COLLECTION A/C CHEQUE DISHONOURED' AS SourceReceipt
			,@CompanyID,@LocationID,@SNDID,isnull(@Remittance_CollAccChqDishonoured,0)
	)
	
	--REMITTANCE-3   (LESS: COLLECTION A/C CHEQUE REDEPOSITED)
	INSERT INTO #SnDRemittance(SortID,SourceReceipt,CompanyID,LocationID,SNDID,TotalAmount)
	(
	SELECT	3 AS SortID,'LESS: COLLECTION A/C CHEQUE REDEPOSITED' AS SourceReceipt
			,@CompanyID,@LocationID,@SNDID,isnull(@Remittance_CollAccChqRedeposited,0)
	)
	
	--REMITTANCE-4   (REMITTABLE BALANCE TOTAL:')
	INSERT INTO #SnDRemittance(SortID,SourceReceipt,CompanyID,LocationID,SNDID,TotalAmount)
	(
	SELECT	4 AS SortID,'TOTAL BEFORE TODAY REMITTANCE:' AS SourceReceipt
			,@CompanyID,@LocationID,@SNDID,isnull(@Remittance_OB,0)  + isnull(@Remittance_CollAccChqDishonoured,0) - isnull(@Remittance_CollAccChqRedeposited,0)
	)
	
	--REMITTANCE-5   (ADD: CASH IN HAND DEPOSITED IN HO A/C)
	INSERT INTO #SnDRemittance(SortID,SourceReceipt,CompanyID,LocationID,SNDID,TotalAmount)
	(
	SELECT	5 AS SortID,'CASH IN HAND DEPOSITED IN HO A/C' AS SourceReceipt
			,@CompanyID,@LocationID,@SNDID,isnull(@Remittance_CashInHandDepInHOAcc,0)
	)
	
	--REMITTANCE-6   (REMITTANCE - HOC)
	INSERT INTO #SnDRemittance(SortID,SourceReceipt,CompanyID,LocationID,SNDID,TotalAmount)
	(
	SELECT	6 AS SortID,'HOC' AS SourceReceipt
			,@CompanyID,@LocationID,@SNDID,isnull(@Remittance_HOC,0)
	)
	
	--REMITTANCE-7   (TC)
	INSERT INTO #SnDRemittance(SortID,SourceReceipt,CompanyID,LocationID,SNDID,TotalAmount)
	(
	SELECT	7 AS SortID,'TC' AS SourceReceipt
			,@CompanyID,@LocationID,@SNDID,isnull(@Remittance_TC,0)
	)
	
	--REMITTANCE-8   (DD / PO)
	INSERT INTO #SnDRemittance(SortID,SourceReceipt,CompanyID,LocationID,SNDID,TotalAmount)
	(
	SELECT	8 AS SortID,'DD / PO' AS SourceReceipt
			,@CompanyID,@LocationID,@SNDID,isnull(@Remittance_DD_PO,0)
	)
	
	--REMITTANCE-9   (OTHER DOCUMENT)
	INSERT INTO #SnDRemittance(SortID,SourceReceipt,CompanyID,LocationID,SNDID,TotalAmount)
	(
	SELECT	9 AS SortID,'OTHER DOCUMENT' AS SourceReceipt
			,@CompanyID,@LocationID,@SNDID,isnull(@Remittance_OtherDocument,0)
	)
	
	--REMITTANCE-10   (COLLECTION A/C CHEQUE DEPOSITED IN HO A/C)
	INSERT INTO #SnDRemittance(SortID,SourceReceipt,CompanyID,LocationID,SNDID,TotalAmount)
	(
	SELECT	10 AS SortID,'COLLECTION A/C CHEQUE DEPOSITED IN HO A/C' AS SourceReceipt
			,@CompanyID,@LocationID,@SNDID,isnull(@Remittance_CollAccChqDepInHOAcc,0)
	)

	--REMITTANCE-11   (REMITTANCE FROM COLLECTION A/C (ET/TT/MT))
	INSERT INTO #SnDRemittance(SortID,SourceReceipt,CompanyID,LocationID,SNDID,TotalAmount)
	(
	SELECT	11 AS SortID,'REMITTANCE FROM COLLECTION A/C (ET/TT/MT)' AS SourceReceipt
			,@CompanyID,@LocationID,@SNDID,isnull(@Remittance_TTFromCollAcc,0)
	)

	--REMITTANCE-12   (DIRECT REMITTANCE TO HO - DEPOSIT SLIP)
	INSERT INTO #SnDRemittance(SortID,SourceReceipt,CompanyID,LocationID,SNDID,TotalAmount)
	(
	SELECT	12 AS SortID,'DIRECT REMITTANCE TO HO - DEPOSIT SLIP' AS SourceReceipt
			,@CompanyID,@LocationID,@SNDID,isnull(@Remittance_DirectRemToHODS,0)
	)

	--REMITTANCE-13   (DIRECT REMITTANCE TO HO - REMITTANCE SLIP)
	INSERT INTO #SnDRemittance(SortID,SourceReceipt,CompanyID,LocationID,SNDID,TotalAmount)
	(
	SELECT	13 AS SortID,'DIRECT REMITTANCE TO HO - REMITTANCE SLIP' AS SourceReceipt
			,@CompanyID,@LocationID,@SNDID,isnull(@Remittance_DirectRemToHORS,0)
	)
	
	--REMITTANCE-14   (REMITTED TODAY'S TOTAL)

	SET @Remittance_TOTALREMITTEDTODAY =	isnull(@Remittance_CashInHandDepInHOAcc,0)
											+ isnull(@Remittance_HOC,0)
											+ isnull(@Remittance_DD_PO,0)
											+ isnull(@Remittance_TC,0)
											+ isnull(@Remittance_OtherDocument,0)
											+ isnull(@Remittance_CollAccChqDepInHOAcc,0)
											+ isnull(@Remittance_TTFromCollAcc,0)
											+ isnull(@Remittance_DirectRemToHODS,0)
											+ isnull(@Remittance_DirectRemToHORS,0)

	INSERT INTO #SnDRemittance(SortID,SourceReceipt,CompanyID,LocationID,SNDID,TotalAmount)
	(
	SELECT	14 AS SortID,'TOTAL REMITTED TODAY:' AS SourceReceipt
			,@CompanyID,@LocationID,@SNDID, isnull(@Remittance_TOTALREMITTEDTODAY,0)
	)


	--REMITTANCE-15   (REMITTANCE CF)

	SELECT @Remittance_CF = SUM(ADDEDTOREMITTABLE) FROM #TempSnDCollection 
	SET @Remittance_CF = @Remittance_CF + @Remittance_OB + @Remittance_CollAccChqDishonoured - @Remittance_CollAccChqRedeposited - @Remittance_TOTALREMITTEDTODAY

	INSERT INTO #SnDRemittance(SortID,SourceReceipt,CompanyID,LocationID,SNDID,TotalAmount)
	(
	SELECT	15 AS SortID,'TOTAL REMITTANCE TO HO C/F:' AS SourceReceipt
			,@CompanyID,@LocationID,@SNDID,@Remittance_CF
	)


	SELECT * FROM #SnDRemittance

----------------------------------------------------------------------------------------------------------------------------------------
-- END - REIMTTANCE RELATED INFORMATION
----------------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------------------------
-- BEGIN - SND BANK DEBIT ADVICE
----------------------------------------------------------------------------------------------------------------------------------------

	Declare		@DepositedDate datetime,
				@TransactionDate datetime,
				@PreviousSNDID	numeric(5,0),
				@DayBeforePreviousSNDID	numeric(5,0),
				@DefaultBank numeric(15,4),
				@OtherBank numeric(15,4)

	set  @PreviousSNDID				=	(SELECT max(sndid) FROM snd s WHERE s.CompanyId =@CompanyId  AND s.LocationId=@LocationId AND s.SnDId < @SNDID AND s.RollbackDate IS NULL)
	set  @DayBeforePreviousSNDID	=	(SELECT max(sndid) FROM snd s WHERE s.CompanyId =@CompanyId  AND s.LocationId=@LocationId AND s.SnDId < @PreviousSNDID AND s.RollbackDate IS NULL)


	--CREATE TABLE FOR SND BANK DEBIT ADVICE
	CREATE TABLE #SnDDebitAdvice    (SortID numeric(5,0),SourceReceipt Varchar(100),DepositedDate datetime,TransactionDate datetime,
									 DefaultBankAmount numeric(15,2),OtherBankAmount numeric(15,2))


--CASH DEPOSITED PREVIOUS DAY

	SET		@DepositedDate=null
	SET		@TransactionDate=NULL
	SET		@DefaultBank=0
	SET		@OtherBank=0
		
	
	SELECT	@DepositedDate		=	s.ToDate,
			@TransactionDate	=	s.ToDate,
			@DefaultBank		=	(CASE WHEN bas.IsDefault=1 THEN isnull(sum(isnull(scd.DepositAmount,0)),0)  ELSE 0 END), 
			@OtherBank			=	(CASE WHEN bas.IsDefault<>1 THEN isnull(sum(isnull(scd.DepositAmount,0)),0)  ELSE 0 END)
	FROM snd s 
	INNER JOIN SnDCashDepositBank scd ON s.LocationId=scd.LocationId AND s.SnDId=scd.SnDId
	INNER JOIN PaymentTransaction pt ON pt.LocationId = scd.LocationId AND pt.PaymentTransactionId = scd.PaymentTransactionId
	INNER JOIN uv_SystemBankAccounts sba ON pt.SystemBankAccountId=sba.BankAccountId AND pt.LocationId=sba.LocationId
	INNER JOIN BankAccountSequence bas ON bas.LocationId= sba.LocationId AND bas.BankAccountId= sba.BankAccountId 
	WHERE s.CompanyId=@CompanyId AND s.LocationId=@LocationId AND s.SnDId = @PreviousSNDID 
	GROUP BY s.ToDate,bas.IsDefault
	
	INSERT INTO #SnDDebitAdvice
	SELECT 1,'CASH DEPOSITED PREVIOUS DAY',@DepositedDate,@TransactionDate, @DefaultBank, @OtherBank

uno

	INSERT INTO #SnDDebitAdvice		
	SELECT	1,'CASH DEPOSITED PREVIOUS DAY', DepositedDate		=	s.ToDate,
			TransactionDate	=	s.ToDate,
			DefaultBank		=	(CASE WHEN bas.IsDefault=1 THEN isnull(sum(isnull(spt.AdjustedAmount,0)),0)  ELSE 0 END), 
			OtherBank			=	(CASE WHEN bas.IsDefault<>1 THEN isnull(sum(isnull(spt.AdjustedAmount,0)),0)  ELSE 0 END)
	FROM snd s
	INNER JOIN uv_SNDPaymentTransaction spt ON s.LocationId=spt.LocationId AND s.SnDId=spt.SnDId
	INNER JOIN PaymentTransaction pt ON pt.LocationId = spt.LocationId AND pt.PaymentTransactionId = spt.PaymentTransactionId
	INNER JOIN Paymentmode pm ON pt.PaymentModeId=pm.PaymentModeId
	INNER JOIN uv_SystemBankAccounts sba ON pt.SystemBankAccountId=sba.BankAccountId AND pt.LocationId=sba.LocationId
	INNER JOIN BankAccountSequence bas ON bas.LocationId= sba.LocationId AND bas.BankAccountId= sba.BankAccountId 
	WHERE s.CompanyId=@CompanyId AND s.LocationId=@LocationId AND s.SnDId = @PreviousSNDID   AND s.RollbackDate IS null
	AND pm.IsDirectDeposited=1
	GROUP BY s.ToDate,bas.IsDefault

--CHQS DEPOSITED DAY BEFORE PREVIOUS DAY

	SET		@DepositedDate		= (SELECT todate FROM snd s WHERE s.CompanyId =@CompanyId  AND s.LocationId=@LocationId AND s.SnDId = @DayBeforePreviousSNDID )
	SET		@TransactionDate	= (SELECT todate FROM snd s WHERE s.CompanyId =@CompanyId  AND s.LocationId=@LocationId AND s.SnDId = @SNDID )
	SET		@DefaultBank		= 0
	SET		@OtherBank			= 0
			
	SELECT	@DefaultBank		=	(CASE WHEN bas.IsDefault=1 THEN isnull(sum(isnull(sbd.Amount,0)),0)  ELSE 0 END), 
			@OtherBank			=	(CASE WHEN bas.IsDefault<>1 THEN isnull(sum(isnull(sbd.Amount,0)),0)  ELSE 0 END)
	FROM snd s 
	inner JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.DepositedSnDId
	INNER JOIN uv_SystemBankAccounts usba ON usba.LocationId = sbd.LocationId AND usba.BankAccountId = sbd.BankAccountId
	INNER JOIN BankAccountSequence bas ON bas.LocationId = usba.LocationId AND bas.BankAccountId = usba.BankAccountId
	WHERE sbd.Type = 'D' 
	AND s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId = @DayBeforePreviousSNDID   AND s.RollbackDate IS null
	--Exclude Redeposit Doc
	AND NOT EXISTS (SELECT	sbd2.SnDBankDocMovementId FROM SnDBankDocMovement sbd2 
					WHERE	sbd2.PaymentTransactionId=sbd.PaymentTransactionId
					AND     sbd2.LocationId = sbd.LocationId
					AND		sbd2.DepositedSnDId=sbd.LastSettlementSnDId)
	GROUP BY bas.IsDefault,s.ToDate
	
	INSERT INTO #SnDDebitAdvice
	SELECT 2,'ADD: CHQS DEPOSITED DAY BEFORE PREVIOUS DAY',@DepositedDate,@TransactionDate, @DefaultBank, @OtherBank


--LESS: SAME BANK CHQ. CLEARED PREV. DAY

	SET		@DepositedDate		= (SELECT todate FROM snd s WHERE s.CompanyId =@CompanyId  AND s.LocationId=@LocationId AND s.SnDId = @DayBeforePreviousSNDID )
	SET		@TransactionDate	= (SELECT todate FROM snd s WHERE s.CompanyId =@CompanyId  AND s.LocationId=@LocationId AND s.SnDId = @PreviousSNDID )
	SET		@DefaultBank		= 0
	SET		@OtherBank			= 0
			
	SELECT	@DefaultBank		=	(CASE WHEN bas.IsDefault=1 THEN isnull(sum(isnull(sbd.Amount,0)),0)  * -1  ELSE 0 END), 
			@OtherBank			=	(CASE WHEN bas.IsDefault<>1 THEN isnull(sum(isnull(sbd.Amount,0)),0) * -1  ELSE 0 END)
	FROM snd s 
	inner JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.DepositedSnDId
	INNER JOIN uv_SystemBankAccounts usba ON usba.LocationId = sbd.LocationId AND usba.BankAccountId = sbd.BankAccountId
	INNER JOIN BankAccountSequence bas ON bas.LocationId = usba.LocationId AND bas.BankAccountId = usba.BankAccountId
	WHERE sbd.Type = 'D' 
	AND s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId = @DayBeforePreviousSNDID AND sbd.ClearedSnDId=@PreviousSNDID  AND s.RollbackDate IS null
	--Exclude Redeposit Doc
	AND NOT EXISTS (SELECT	sbd2.SnDBankDocMovementId FROM SnDBankDocMovement sbd2 
					WHERE	sbd2.PaymentTransactionId=sbd.PaymentTransactionId
					AND     sbd2.LocationId = sbd.LocationId
					AND		sbd2.DepositedSnDId=sbd.LastSettlementSnDId)
	GROUP BY bas.IsDefault,s.ToDate
	
	INSERT INTO #SnDDebitAdvice
	SELECT 3,'LESS: SAME BANK CHQ. CLEARED PREV. DAY',@DepositedDate,@TransactionDate, @DefaultBank, @OtherBank


--ADD: SAME BANK CHQ. DEP. PREV. DAY CLEARED

	SET		@DepositedDate		= (SELECT todate FROM snd s WHERE s.CompanyId =@CompanyId  AND s.LocationId=@LocationId AND s.SnDId = @PreviousSNDID )
	SET		@TransactionDate	= (SELECT todate FROM snd s WHERE s.CompanyId =@CompanyId  AND s.LocationId=@LocationId AND s.SnDId = @SNDID )
	SET		@DefaultBank		= 0
	SET		@OtherBank			= 0
			
	SELECT	@DefaultBank		=	(CASE WHEN bas.IsDefault=1 THEN isnull(sum(isnull(sbd.Amount,0)),0)  ELSE 0 END), 
			@OtherBank			=	(CASE WHEN bas.IsDefault<>1 THEN isnull(sum(isnull(sbd.Amount,0)),0)  ELSE 0 END)
	FROM snd s 
	inner JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.DepositedSnDId
	INNER JOIN uv_SystemBankAccounts usba ON usba.LocationId = sbd.LocationId AND usba.BankAccountId = sbd.BankAccountId
	INNER JOIN BankAccountSequence bas ON bas.LocationId = usba.LocationId AND bas.BankAccountId = usba.BankAccountId
	WHERE sbd.Type = 'D' 
	AND s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId = @PreviousSNDID AND sbd.ClearedSnDId = @SNDID  AND s.RollbackDate IS null
	--Exclude Redeposit Doc
	AND NOT EXISTS (SELECT	sbd2.SnDBankDocMovementId FROM SnDBankDocMovement sbd2 
					WHERE	sbd2.PaymentTransactionId=sbd.PaymentTransactionId
					AND     sbd2.LocationId = sbd.LocationId
					AND		sbd2.DepositedSnDId=sbd.LastSettlementSnDId)
	GROUP BY bas.IsDefault,s.ToDate

	INSERT INTO #SnDDebitAdvice
	SELECT 4,'ADD: SAME BANK CHQ. DEP. PREV. DAY CLEARED',@DepositedDate,@TransactionDate, @DefaultBank, @OtherBank


--ADD: SAME BANK CHQ. DEP. PREV. DAY RETURNED

	SET		@DepositedDate		= (SELECT todate FROM snd s WHERE s.CompanyId =@CompanyId  AND s.LocationId=@LocationId AND s.SnDId = @PreviousSNDID )
	SET		@TransactionDate	= (SELECT todate FROM snd s WHERE s.CompanyId =@CompanyId  AND s.LocationId=@LocationId AND s.SnDId = @SNDID )
	SET		@DefaultBank		= 0
	SET		@OtherBank			= 0
			
	SELECT	@DefaultBank		=	(CASE WHEN bas.IsDefault=1 THEN isnull(sum(isnull(sbd.Amount,0)),0)  ELSE 0 END), 
			@OtherBank			=	(CASE WHEN bas.IsDefault<>1 THEN isnull(sum(isnull(sbd.Amount,0)),0)  ELSE 0 END)
	FROM snd s 
	inner JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.DepositedSnDId
	INNER JOIN uv_SystemBankAccounts usba ON usba.LocationId = sbd.LocationId AND usba.BankAccountId = sbd.BankAccountId
	INNER JOIN BankAccountSequence bas ON bas.LocationId = usba.LocationId AND bas.BankAccountId = usba.BankAccountId
	WHERE sbd.Type = 'D' 
	AND s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId = @PreviousSNDID AND sbd.ReturnedSnDId = @SNDID  AND s.RollbackDate IS null
	--Exclude Redeposit Doc
	AND NOT EXISTS (SELECT	sbd2.SnDBankDocMovementId FROM SnDBankDocMovement sbd2 
					WHERE	sbd2.PaymentTransactionId=sbd.PaymentTransactionId
					AND     sbd2.LocationId = sbd.LocationId
					AND		sbd2.DepositedSnDId=sbd.LastSettlementSnDId)
	GROUP BY bas.IsDefault,s.ToDate

	INSERT INTO #SnDDebitAdvice
	SELECT 5,'ADD: SAME BANK CHQ. DEP. PREV. DAY RETURNED',@DepositedDate,@TransactionDate, @DefaultBank, @OtherBank

--ADD: CHQS. PRIOR TO DAY BEFORE PREV. DAY
--Those cheques which is Prior to day before deposited day but not clear and return

	SET		@DepositedDate		=  null
	SET		@TransactionDate	= (SELECT todate FROM snd s WHERE s.CompanyId =@CompanyId  AND s.LocationId=@LocationId AND s.SnDId = @SNDID )
	SET		@DefaultBank		= 0
	SET		@OtherBank			= 0
			
	SELECT	@DefaultBank		=	(CASE WHEN bas.IsDefault=1 THEN isnull(sum(isnull(sbd.Amount,0)),0)  ELSE 0 END), 
			@OtherBank			=	(CASE WHEN bas.IsDefault<>1 THEN isnull(sum(isnull(sbd.Amount,0)),0)  ELSE 0 END)
	FROM snd s 
	inner JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.DepositedSnDId
	INNER JOIN uv_SystemBankAccounts usba ON usba.LocationId = sbd.LocationId AND usba.BankAccountId = sbd.BankAccountId
	INNER JOIN BankAccountSequence bas ON bas.LocationId = usba.LocationId AND bas.BankAccountId = usba.BankAccountId
	WHERE	sbd.Type = 'D' 
	--AND s.CompanyId=5 AND s.LocationId=58 AND s.SnDId=28 AND s.RollbackDate IS NULL
	AND		s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId < @DayBeforePreviousSNDID   AND s.RollbackDate IS null
	AND		(
			ISNULL(SBD.ClearedSnDId, @SNDID+1)	> @SNDID  
			and ISNULL(SBD.ReturnedSnDId,@SNDID+1) > @SNDID
			)
	
	--Exclude Redeposit Doc
	AND NOT EXISTS (SELECT	sbd2.SnDBankDocMovementId FROM SnDBankDocMovement sbd2 
					WHERE	sbd2.PaymentTransactionId=sbd.PaymentTransactionId
					AND     sbd2.LocationId = sbd.LocationId
					AND		sbd2.DepositedSnDId=sbd.LastSettlementSnDId)
	GROUP BY bas.IsDefault,s.ToDate

	INSERT INTO #SnDDebitAdvice
	SELECT 6,'ADD: CHQS. PRIOR TO DAY BEFORE PREV. DAY',@DepositedDate,@TransactionDate, @DefaultBank, @OtherBank



--LESS: CHQS. RET. ALL PREV. DEPOSIT
--Those cheques which is Prior to day before deposited day but return in current SND

	SET		@DepositedDate		=  null
	SET		@TransactionDate	= (SELECT todate FROM snd s WHERE s.CompanyId =@CompanyId  AND s.LocationId=@LocationId AND s.SnDId = @SNDID )
	SET		@DefaultBank		= 0
	SET		@OtherBank			= 0
			
	SELECT	@DefaultBank		=	(CASE WHEN bas.IsDefault=1 THEN isnull(sum(isnull(sbd.Amount,0)),0) * -1   ELSE 0 END), 
			@OtherBank			=	(CASE WHEN bas.IsDefault<>1 THEN isnull(sum(isnull(sbd.Amount,0)),0) * -1  ELSE 0 END)
	FROM snd s 
	inner JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.DepositedSnDId
	INNER JOIN uv_SystemBankAccounts usba ON usba.LocationId = sbd.LocationId AND usba.BankAccountId = sbd.BankAccountId
	INNER JOIN BankAccountSequence bas ON bas.LocationId = usba.LocationId AND bas.BankAccountId = usba.BankAccountId
	WHERE	sbd.Type = 'D' 
	AND		s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId < @DayBeforePreviousSNDID   AND s.RollbackDate IS null
	AND		SBD.ReturnedSnDId = @SNDID
	--Exclude Redeposit Doc
	AND NOT EXISTS (SELECT	sbd2.SnDBankDocMovementId FROM SnDBankDocMovement sbd2 
					WHERE	sbd2.PaymentTransactionId=sbd.PaymentTransactionId
					AND     sbd2.LocationId = sbd.LocationId
					AND		sbd2.DepositedSnDId=sbd.LastSettlementSnDId)
	GROUP BY bas.IsDefault,s.ToDate

	INSERT INTO #SnDDebitAdvice
	SELECT 7,'LESS: CHQS. RET. ALL PREV. DEPOSIT',@DepositedDate,@TransactionDate, @DefaultBank, @OtherBank


--LESS: UNMARKED CHEQUES
--Those cheques which is Prior to day before deposited day but not clear and return

	SET		@DepositedDate		= Null
	SET		@TransactionDate	= Null
	SET		@DefaultBank		= 0
	SET		@OtherBank			= 0
			
	SELECT	@DefaultBank		=	(CASE WHEN bas.IsDefault=1 THEN isnull(sum(isnull(sbd.Amount,0)),0) * -1   ELSE 0 END), 
			@OtherBank			=	(CASE WHEN bas.IsDefault<>1 THEN isnull(sum(isnull(sbd.Amount,0)),0) * -1  ELSE 0 END)
	FROM snd s 
	inner JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.DepositedSnDId
	INNER JOIN uv_SystemBankAccounts usba ON usba.LocationId = sbd.LocationId AND usba.BankAccountId = sbd.BankAccountId
	INNER JOIN BankAccountSequence bas ON bas.LocationId = usba.LocationId AND bas.BankAccountId = usba.BankAccountId
	WHERE	sbd.Type = 'D' 
	AND		s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId <= @DayBeforePreviousSNDID   AND s.RollbackDate IS null
	AND		(
			ISNULL(SBD.ClearedSnDId, @SNDID+1)	> @SNDID  
			and ISNULL(SBD.ReturnedSnDId,@SNDID+1) > @SNDID
			)
	--Exclude Redeposit Doc
	AND NOT EXISTS (SELECT	sbd2.SnDBankDocMovementId FROM SnDBankDocMovement sbd2 
					WHERE	sbd2.PaymentTransactionId=sbd.PaymentTransactionId
					AND     sbd2.LocationId = sbd.LocationId
					AND		sbd2.DepositedSnDId=sbd.LastSettlementSnDId)
	GROUP BY bas.IsDefault,s.ToDate
	
	INSERT INTO #SnDDebitAdvice
	SELECT 8,'LESS: UNMARKED CHEQUES',@DepositedDate,@TransactionDate, @DefaultBank, @OtherBank


	--GET DATA
	SELECT SortID,SourceReceipt,DepositedDate,TransactionDate,sum(isnull(DefaultBankAmount,0)) AS DefaultBank,sum(isnull(OtherBankAmount,0)) AS OtherBank 
	FROM #SnDDebitAdvice
	GROUP BY SortID,SourceReceipt,DepositedDate,TransactionDate
	
----------------------------------------------------------------------------------------------------------------------------------------
-- END - SND BANK DEBIT ADVICE
----------------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------------------------
-- BEGIN - BREAKUP OF DAY BEFORE PREV. DAY DEPOSITED CHQS
----------------------------------------------------------------------------------------------------------------------------------------

	--CREATE TABLE FOR SND BANK DEBIT ADVICE
	CREATE TABLE #SnDepositedChequeDetail(SortID numeric(5,0),SourceReceipt Varchar(100),DepositedDate datetime,TransactionDate datetime,
	DefaultBankAmount numeric(15,2),OtherBankAmount numeric(15,2))

--CHQS DEPOSITED DAY BEFORE PREVIOUS DAY

	SET		@DepositedDate		= Null
	SET		@TransactionDate	= Null
	SET		@DefaultBank		= 0
	SET		@OtherBank			= 0
			
	SELECT	@DepositedDate		=   s.ToDate,
			@DefaultBank		=	(CASE WHEN bas.IsDefault=1 THEN isnull(sum(isnull(sbd.Amount,0)),0) * -1   ELSE 0 END), 
			@OtherBank			=	(CASE WHEN bas.IsDefault<>1 THEN isnull(sum(isnull(sbd.Amount,0)),0) * -1  ELSE 0 END)
	FROM snd s 
	inner JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.DepositedSnDId
	INNER JOIN uv_SystemBankAccounts usba ON usba.LocationId = sbd.LocationId AND usba.BankAccountId = sbd.BankAccountId
	INNER JOIN BankAccountSequence bas ON bas.LocationId = usba.LocationId AND bas.BankAccountId = usba.BankAccountId
	WHERE sbd.Type = 'D' 
	AND s.CompanyId=@CompanyId AND s.LocationId=@LocationID AND s.SnDId = @DayBeforePreviousSNDID   AND s.RollbackDate IS null
	--Exclude Redeposit Doc
	AND NOT EXISTS (SELECT	sbd2.SnDBankDocMovementId FROM SnDBankDocMovement sbd2 
					WHERE	sbd2.PaymentTransactionId=sbd.PaymentTransactionId
					AND     sbd2.LocationId = sbd.LocationId
					AND		sbd2.DepositedSnDId=sbd.LastSettlementSnDId)
	GROUP BY bas.IsDefault,s.ToDate
	
	INSERT INTO #SnDepositedChequeDetail
	SELECT 1,'ADD: CHQS DEPOSITED ON',@DepositedDate,@TransactionDate, @DefaultBank, @OtherBank
	
--CHQS CLEARED - NORMAL CLEARING

	SET		@DepositedDate		= Null
	SET		@TransactionDate	= (SELECT todate FROM snd s WHERE s.CompanyId =@CompanyId  AND s.LocationId=@LocationId AND s.SnDId = @SNDID )
	SET		@DefaultBank		= 0
	SET		@OtherBank			= 0
			
	SELECT	@DepositedDate		=   s.ToDate,
			@DefaultBank		=	(CASE WHEN bas.IsDefault=1 THEN isnull(sum(isnull(sbd.Amount,0)),0)    ELSE 0 END), 
			@OtherBank			=	(CASE WHEN bas.IsDefault<>1 THEN isnull(sum(isnull(sbd.Amount,0)),0)   ELSE 0 END)
	FROM snd s 
	inner JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.DepositedSnDId
	INNER JOIN uv_SystemBankAccounts usba ON usba.LocationId = sbd.LocationId AND usba.BankAccountId = sbd.BankAccountId
	INNER JOIN BankAccountSequence bas ON bas.LocationId = usba.LocationId AND bas.BankAccountId = usba.BankAccountId
	WHERE sbd.Type			=	'D' 
	AND s.CompanyId			=	@CompanyId 
	AND s.LocationId		=	@LocationID 
	AND s.SnDId				=	@DayBeforePreviousSNDID 
	AND sbd.ClearedSnDId	<=	@SNDID 
	AND s.RollbackDate		IS null
	--Exclude Redeposit Doc
	AND NOT EXISTS (SELECT	sbd2.SnDBankDocMovementId FROM SnDBankDocMovement sbd2 
					WHERE	sbd2.PaymentTransactionId=sbd.PaymentTransactionId
					AND     sbd2.LocationId = sbd.LocationId
					AND		sbd2.DepositedSnDId=sbd.LastSettlementSnDId)
	GROUP BY bas.IsDefault,s.ToDate
	
	INSERT INTO #SnDepositedChequeDetail
	SELECT 2,'LESS: CHQ. CLEARED',@DepositedDate,@TransactionDate, @DefaultBank, @OtherBank

----LESS: CHQS CLEARED - SAME BANK

--	SET		@DepositedDate		= Null
--	SET		@TransactionDate	= (SELECT todate FROM snd s WHERE s.CompanyId =@CompanyId  AND s.LocationId=@LocationId AND s.SnDId = @PreviousSNDID )
--	SET		@DefaultBank		= 0
--	SET		@OtherBank			= 0
			
--	SELECT	@DepositedDate		=   s.ToDate,
--			@DefaultBank		=	(CASE WHEN bas.IsDefault=1 THEN isnull(sum(isnull(sbd.Amount,0)),0) * -1   ELSE 0 END), 
--			@OtherBank			=	(CASE WHEN bas.IsDefault<>1 THEN isnull(sum(isnull(sbd.Amount,0)),0) * -1  ELSE 0 END)
--	FROM snd s 
--	inner JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.DepositedSnDId
--	INNER JOIN uv_SystemBankAccounts usba ON usba.LocationId = sbd.LocationId AND usba.BankAccountId = sbd.BankAccountId
--	INNER JOIN BankAccountSequence bas ON bas.LocationId = usba.LocationId AND bas.BankAccountId = usba.BankAccountId
--	WHERE sbd.Type = 'D' 
--	AND s.CompanyId=@CompanyId AND s.LocationId=@LocationID    AND s.RollbackDate IS null
--	AND s.SnDId = @DayBeforePreviousSNDID 
--	AND sbd.ClearedSnDId = @PreviousSNDID 
--	--Exclude Redeposit Doc
--	AND NOT EXISTS (SELECT	sbd2.SnDBankDocMovementId FROM SnDBankDocMovement sbd2 
--					WHERE	sbd2.PaymentTransactionId=sbd.PaymentTransactionId
--					AND		sbd2.DepositedSnDId=sbd.LastSettlementSnDId)
--	GROUP BY bas.IsDefault,s.ToDate
	
--	INSERT INTO #SnDepositedChequeDetail
--	SELECT 3,'LESS: CHQS CLEARED - SAME BANK',@DepositedDate,@TransactionDate, @DefaultBank, @OtherBank
	
	--CHQS RETURNED - TODAY snd
	
	SET		@DepositedDate		= Null
	SET		@TransactionDate	= (SELECT todate FROM snd s WHERE s.CompanyId =@CompanyId  AND s.LocationId=@LocationId AND s.SnDId = @SNDID )
	SET		@DefaultBank		= 0
	SET		@OtherBank			= 0
			
	SELECT	@DepositedDate		=   s.ToDate,
			@DefaultBank		=	(CASE WHEN bas.IsDefault=1 THEN isnull(sum(isnull(sbd.Amount,0)),0)    ELSE 0 END), 
			@OtherBank			=	(CASE WHEN isnull(bas.IsDefault,0)<>1 THEN isnull(sum(isnull(sbd.Amount,0)),0)  ELSE 0 END)
	FROM snd s 
	inner JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.DepositedSnDId
	INNER JOIN uv_SystemBankAccounts usba ON usba.LocationId = sbd.LocationId AND usba.BankAccountId = sbd.BankAccountId
	INNER JOIN BankAccountSequence bas ON bas.LocationId = usba.LocationId AND bas.BankAccountId = usba.BankAccountId
	WHERE sbd.Type = 'D' 
	AND s.CompanyId=@CompanyId AND s.LocationId=@LocationID    AND s.RollbackDate IS NULL 
	AND s.SnDId = @DayBeforePreviousSNDID 
	AND sbd.ReturnedSnDId <= @SNDID 
	--Exclude Redeposit Doc
	AND NOT EXISTS (SELECT	sbd2.SnDBankDocMovementId FROM SnDBankDocMovement sbd2 
					WHERE	sbd2.PaymentTransactionId=sbd.PaymentTransactionId
					AND     sbd2.LocationId = sbd.LocationId
					AND		sbd2.DepositedSnDId=sbd.LastSettlementSnDId)
	GROUP BY bas.IsDefault,s.ToDate

	INSERT INTO #SnDepositedChequeDetail
	SELECT 4,'LESS: CHQS RETURNED',@DepositedDate,@TransactionDate, @DefaultBank, @OtherBank
	
----LESS: CHQS ALREADY RETURNED - SAME BANK

--	SET		@DepositedDate		= Null
--	SET		@TransactionDate	= (SELECT todate FROM snd s WHERE s.CompanyId =@CompanyId  AND s.LocationId=@LocationId AND s.SnDId = @PreviousSNDID  )
--	SET		@DefaultBank		= 0
--	SET		@OtherBank			= 0
			
--	SELECT	@DepositedDate		=   s.ToDate,
--			@DefaultBank		=	(CASE WHEN bas.IsDefault=1 THEN isnull(sum(isnull(sbd.Amount,0)),0) * -1   ELSE 0 END), 
--			@OtherBank			=	(CASE WHEN bas.IsDefault<>1 THEN isnull(sum(isnull(sbd.Amount,0)),0) * -1  ELSE 0 END)
--	FROM snd s 
--	inner JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.DepositedSnDId
--	INNER JOIN uv_SystemBankAccounts usba ON usba.LocationId = sbd.LocationId AND usba.BankAccountId = sbd.BankAccountId
--	INNER JOIN BankAccountSequence bas ON bas.LocationId = usba.LocationId AND bas.BankAccountId = usba.BankAccountId
--	WHERE sbd.Type = 'D' 
--	AND s.CompanyId=@CompanyId AND s.LocationId=@LocationID    AND s.RollbackDate IS null
--	AND s.SnDId = @DayBeforePreviousSNDID 
--	AND sbd.ReturnedSnDId = @PreviousSNDID 
--	--Exclude Redeposit Doc
--	AND NOT EXISTS (SELECT	sbd2.SnDBankDocMovementId FROM SnDBankDocMovement sbd2 
--					WHERE	sbd2.PaymentTransactionId=sbd.PaymentTransactionId
--					AND		sbd2.DepositedSnDId=sbd.LastSettlementSnDId)
--	GROUP BY bas.IsDefault,s.ToDate		
	
--	INSERT INTO #SnDepositedChequeDetail
--	SELECT 5,'LESS: CHQS RETURNED - SAME BANK',@DepositedDate,@TransactionDate, @DefaultBank, @OtherBank
	
	--LESS: CHQS UNMARKED
	
	SET		@DepositedDate		= Null
	SET		@TransactionDate	= Null
	SET		@DefaultBank		= 0
	SET		@OtherBank			= 0
			
	SELECT	@DefaultBank		=	(CASE WHEN bas.IsDefault=1 THEN isnull(sum(isnull(sbd.Amount,0)),0)    ELSE 0 END), 
			@OtherBank			=	(CASE WHEN isnull(bas.IsDefault,0)<>1 THEN isnull(sum(isnull(sbd.Amount,0)),0)   ELSE 0 END)
	FROM snd s 
	inner JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.DepositedSnDId
	INNER JOIN uv_SystemBankAccounts usba ON usba.LocationId = sbd.LocationId AND usba.BankAccountId = sbd.BankAccountId
	INNER JOIN BankAccountSequence bas ON bas.LocationId = usba.LocationId AND bas.BankAccountId = usba.BankAccountId
	WHERE sbd.Type = 'D' 
	AND s.CompanyId=@CompanyId AND s.LocationId=@LocationID    AND s.RollbackDate IS null
	AND s.SnDId = @DayBeforePreviousSNDID 
	AND		(
			ISNULL(SBD.ClearedSnDId, @SNDID+1)	> @SNDID  
			and ISNULL(SBD.ReturnedSnDId,@SNDID+1) > @SNDID
			)
	--Exclude Redeposit Doc
	AND NOT EXISTS (SELECT	sbd2.SnDBankDocMovementId FROM SnDBankDocMovement sbd2 
					WHERE	sbd2.PaymentTransactionId=sbd.PaymentTransactionId
					AND     sbd2.LocationId = sbd.LocationId
					AND		sbd2.DepositedSnDId=sbd.LastSettlementSnDId)
	GROUP BY bas.IsDefault,s.ToDate	
	
	INSERT INTO #SnDepositedChequeDetail
	SELECT 6,'LESS: CHQS UNMARKED',@DepositedDate,@TransactionDate, @DefaultBank, @OtherBank
	
	
--GET DATA
	SELECT SortID,SourceReceipt,DepositedDate,TransactionDate,sum(isnull(DefaultBankAmount,0)) AS DefaultBank,sum(isnull(OtherBankAmount,0)) AS OtherBank 
	FROM #SnDepositedChequeDetail
	GROUP BY SortID,SourceReceipt,DepositedDate,TransactionDate
	
	----------------------------------------------------------------------------------------------------------------------------------------
-- END - BREAKUP OF DAY BEFORE PREV. DAY DEPOSITED CHQS
----------------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------------------------
-- BEGIN - ALL INCLEARING CHEQUES
----------------------------------------------------------------------------------------------------------------------------------------
	
	SET  @DepositedDate	= 	(SELECT todate FROM snd s WHERE s.CompanyId =@CompanyId  AND s.LocationId=@LocationId AND s.SnDId = @SNDID )

	SELECT	1 AS SORTID,
			'CHQS DEPOSITED ON:' AS SourceReceipt,
			S.ToDate AS Depositeddate,
			DefaultBank	=	(CASE WHEN bas.IsDefault=1 THEN isnull(sum(isnull(sbd.Amount,0)),0)   ELSE 0 END), 
			OtherBank	=	(CASE WHEN isnull(bas.IsDefault,0)<>1 THEN isnull(sum(isnull(sbd.Amount,0)),0)   ELSE 0 END)
	FROM snd s 
	inner JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.DepositedSnDId
	left JOIN uv_SystemBankAccounts usba ON usba.LocationId = sbd.LocationId AND usba.BankAccountId = sbd.BankAccountId
	left JOIN BankAccountSequence bas ON bas.LocationId = usba.LocationId AND bas.BankAccountId = usba.BankAccountId
	WHERE sbd.Type = 'D' 
	AND s.CompanyId=@CompanyId AND s.LocationId=@LocationID   AND s.RollbackDate IS NULL  AND s.SnDId  <= @SNDID
	AND		
	(
			ISNULL(SBD.ClearedSnDId, @SNDID+1)	> @SNDID  
			and ISNULL(SBD.ReturnedSnDId,@SNDID+1) > @SNDID
	)
	AND s.ToDate > @DepositedDate - 3
	--Exclude Redeposit Doc
	--AND NOT EXISTS (SELECT	sbd2.SnDBankDocMovementId FROM SnDBankDocMovement sbd2 
	--				WHERE	sbd2.PaymentTransactionId=sbd.PaymentTransactionId
	--				AND     sbd2.LocationId = sbd.LocationId
	--				AND		sbd2.DepositedSnDId=sbd.LastSettlementSnDId)
	AND sbd.SnDBankDocMovementId NOT IN 
	(
		SELECT	sbd2.SnDBankDocMovementId 
        FROM SnDBankDocMovement sbd2 
		WHERE sbd2.LocationId = sbd.LocationId
		AND	sbd2.DepositedSnDId=sbd.LastSettlementSnDId
		AND	sbd2.RefSnDBankDocMovementId IS NOT NULL 
	)
	GROUP BY s.ToDate,bas.IsDefault	
	
	
	UNION ALL
	
	
	SELECT  2 AS SORTID,
			'CHQS DEPOSITED LESS THEN:' AS SourceReceipt,
			@DepositedDate AS Depositeddate,
			DefaultBank	=	(CASE WHEN bas.IsDefault=1 THEN isnull(sum(isnull(sbd.Amount,0)),0)   ELSE 0 END), 
			OtherBank	=	(CASE WHEN isnull(bas.IsDefault,0)<>1 THEN isnull(sum(isnull(sbd.Amount,0)),0)   ELSE 0 END)
	FROM snd s 
	inner JOIN SnDBankDocMovement sbd ON s.LocationId=sbd.LocationId AND s.SnDId=sbd.DepositedSnDId
	left JOIN uv_SystemBankAccounts usba ON usba.LocationId = sbd.LocationId AND usba.BankAccountId = sbd.BankAccountId
	left JOIN BankAccountSequence bas ON bas.LocationId = usba.LocationId AND bas.BankAccountId = usba.BankAccountId
	WHERE sbd.Type = 'D' 
	AND s.CompanyId=@CompanyId AND s.LocationId=@LocationID  AND s.RollbackDate IS NULL   AND s.SnDId  <= @SNDID
	AND		
	(
			ISNULL(SBD.ClearedSnDId, @SNDID+1)	> @SNDID  
			and ISNULL(SBD.ReturnedSnDId,@SNDID+1) > @SNDID
	)
	AND s.ToDate < @DepositedDate - 4
	--Exclude Redeposit Doc
	--AND NOT EXISTS 
	--(
	--	SELECT	sbd2.SnDBankDocMovementId FROM SnDBankDocMovement sbd2 
	--	WHERE	
	--	sbd2.PaymentTransactionId=sbd.PaymentTransactionId
	--	AND sbd2.LocationId = sbd.LocationId
	--	AND		sbd2.DepositedSnDId=sbd.LastSettlementSnDId
	--)
	AND sbd.SnDBankDocMovementId NOT IN 
	(
		SELECT	sbd2.SnDBankDocMovementId 
        FROM SnDBankDocMovement sbd2 
		WHERE sbd2.LocationId = sbd.LocationId
		AND	sbd2.DepositedSnDId=sbd.LastSettlementSnDId
		AND	sbd2.RefSnDBankDocMovementId IS NOT NULL 
	)
					
	GROUP BY bas.IsDefault	
	ORDER BY SORTID ,Depositeddate desc
	
	DROP TABLE #SnDReconciliation
	DROP TABLE #SnDRemittance
	DROP TABLE #TempSnDCollection
	DROP TABLE #TempBankBalance
	DROP TABLE #TempSnDOpeningBalance
	DROP TABLE #SnDDebitAdvice
	DROP TABLE #SnDepositedChequeDetail
 GO 
SELECT *--max(LEN(p.[Name])) 
FROM Product p 
WHERE p.ProductId = 2406

UPDATE product SET [Name] =  [Name] + '1234567890'
WHERE ProductId = 2406  
 GO 
SELECT
				usso.LocationId,
				usso.PrincipalBusinessLineId,
				usso.ProductId,
				--Case When @SalesCriteria  = 0 then SUM(usso.SoldQuantity) 
				--     When @SalesCriteria  = 1 then SUM(usso.SoldQuantity)
				--     When @SalesCriteria  = 2 then 0 END 
				--AS [Quantity],
				usso.SalePassDate AS [Date],
				pc.PP,				
				pc.TP
			FROM uv_Sales_SaleOrder usso 
			INNER JOIN PriceCatalog pc ON usso.PriceId = pc.PriceCatalogId
		
			--INNER JOIN   DBO.Split(@ProductIds, ',') Product ON  (Product.Data = usso.ProductId OR @ProductIds = '')
			--INNER JOIN   DBO.Split(@PBLIds, ',') PBL ON  (PBL.Data = usso.PrincipalBusinessLineId OR @PBLIds = '')
			--INNER JOIN   DBO.Split(@LocationIds, ',') Location ON  (Location.Data = usso.LocationId OR @LocationIds = '')
			--WHERE 
			--(  @SelectAll = 0	  
			-- OR  (@SelectAll = 1 AND ( DATEDIFF(DAY, usso.SalePassDate,  @FromDate) = 0 ))
			-- OR  (@SelectAll = 2 AND ( DATEDIFF(DAY, usso.SalePassDate,  @FromDate) <= 0 AND DATEDIFF(day, usso.SalePassDate, @ToDate) >= 0 ))   
			--) AND usso.IsRollbacked = 0
		  --  GROUP BY 
				--usso.LocationId,
				--usso.PrincipalBusinessLineId,
				--usso.ProductId,
				--usso.SalePassDate,
				--pc.PP,
				
				usp_Report_GrossSaleAndMargin
				--pc.TP
 GO 
DECLARE @PrincipalTeamIds varchar(max),
		@SalesForce  varchar(max),
		@PBLIds  varchar(max),
		@Locations  varchar(max),
		@IsTemporary bit,
		@IsShopSale bit,
		@IsUnTagg bit,       		        
		@FromDate datetime,
		@ToDate datetime 
SET @PrincipalTeamIds =''--'36,32,33,34,35'
SET @SalesForce = ''--'4,26,28,73,75,95,96,102,108,113,116,118,119,141,146,153,181,196,199,205,11,18,45,47,53,57,66,78,89,93,122,130,133,158,164,171,179,188,191,206,1,12,14,16,34,36,58,63,87,91,120,123,145,170,186,197,202,208,210,219,2,22,27,35,46,49,67,70,107,126,131,134,135,144,149,177,180,182,216,217,'
SET @PBLIds='28,55'
SET @Locations='14'
SET @IsTemporary = 1
SET @IsShopSale = 1
SET @IsUnTagg = 1
SET @FromDate = '2013-11-23 00:00:00.000'
SET @ToDate = '2013-11-26 00:00:00.000'

SELECT 
	L.Name AS [Location Name],
	P.PBLSequenceId,
	P.[Principal Business Line], 
	P.DeliveryChallanId,
	P.PrincipalTeamId,
	P.[Principal Team],
	P.ProductId, 
	P.[Product Name],
	P.ProductSequence,
	P.[SoldQuantity],
	P.[Value],
	P.FFId,
	P.FFName,
	P.FFName AS [FFSeq],
	P.LocationId
	INTO #Temp
FROM 
(
	SELECT upbla.PBLSequenceId,upbla.Name AS [Principal Business Line],SOPROD.DeliveryChallanId, 
	       TeamProduct.PrincipalTeamId,TeamProduct.[Principal Team],
		   TeamProduct.ProductId, 
		   up.ShortName AS [Product Name],up.ProductSequence,
		   SUM(ISNULL(SOProd.SoldQuantity,0)) AS [SoldQuantity],
		   SUM(ISNULL(SOProd.SoldQuantity,0) * ISNULL(SOProd.TP,0)) AS [Value],
		   SOProd.FFId,
		   SOProd.FFName,
		   SOProd.FFName AS [FFSeq],
		   LocationId
	FROM   
	(
		 SELECT  ptp.PrincipalTeamProductId, ptp.PrincipalTeamId,ptt.ShortName AS [Principal Team],
		 ptp.ToBeDeleted,ptp.ProductId
		 FROM PrincipalTeamProduct ptp
		 INNER JOIN PrincipalTeam ptt ON ptt.PrincipalTeamId = ptp.PrincipalTeamId
		 INNER JOIN   DBO.Split(@PrincipalTeamIds, ',' ) PT ON ( PT.Data = ptp.PrincipalTeamId OR @PrincipalTeamIds = '' )         
		 WHERE  ptp.ToBeDeleted = 0          
		 AND DATEDIFF(day, ptt.EffectiveDate,GETDATE())>= 0
		 AND  DATEDIFF(day,GETDATE(), isnull( ptt.EndDate,GETDATE()+1))> 0
	)  TeamProduct
	LEFT JOIN 
	(
			SELECT so.LocationId,so.DeliveryChallanId, so.SaleOrderId,so.SalePassDate, so.IsCash, st.Code AS [Sale Type], sop.ProductId, 
			sop.SoldQuantity, so.CustomerId, sfo.PrincipalTeamId, sop.tp AS [TP],
			( CASE  WHEN st.Code = 'SHP' THEN -1 WHEN c.IsTemporary = 1 THEN -2 ELSE ISNULL(sfo.SalesForceId,-3) END ) AS FFId,
			( CASE  WHEN st.Code = 'SHP' THEN 'SHOP' WHEN c.IsTemporary = 1 THEN 'NEW' ELSE ISNULL(sfo.[FieldForceName],'UNTAG') END ) AS FFName,
			st.Code,
			c.IsTemporary
			FROM   SaleOrder so
			INNER JOIN DBO.Split(@Locations, ',' ) Loc ON   ( Loc.Data = so.LocationId OR @Locations = '' )
			INNER JOIN  SaleType st ON   so.SaleTypeId = st.SaleTypeId
			INNER JOIN  Customer c ON   ( c.CustomerId = so.CustomerId AND   c.LocationId = so.LocationId )
			INNER JOIN  SaleOrderProduct sop ON   ( sop.LocationId = so.LocationId AND   sop.SaleOrderId = so.SaleOrderId  AND sop.EndDate IS NULL )
			LEFT JOIN  
			(
				SELECT DISTINCT sfc.LocationId, sfc.CustomerId, sfc.PrincipalTeamId, sf.SalesForceId, sf.ShortName [FieldForceName],ptp.ProductId
				FROM SalesForceCustomer sfc
				INNER JOIN SalesForce sf ON sf.LocationId = sfc.LocationId
				AND sf.SalesForceId = sfc.SalesForceId
				INNER JOIN PrincipalTeam ptt ON ptt.PrincipalTeamId=sf.PrincipalTeamId
				INNER JOIN PrincipalTeamProduct ptp ON ptt.PrincipalTeamId=ptp.PrincipalTeamId AND ptp.ToBeDeleted=0			
				INNER JOIN DBO.Split(@PrincipalTeamIds, ',' ) PT ON ( PT.Data = sfc.PrincipalTeamId OR @PrincipalTeamIds = '' )  		 
				INNER JOIN DBO.Split(@SalesForce, ',' ) ff ON   ( ff.Data = sfc.SalesForceId OR @SalesForce = '' )	
				INNER JOIN DBO.Split(@Locations, ',' ) Loc ON   ( Loc.Data = sf.LocationId OR @Locations = '' )
				
				WHERE sfc.ToBeDeleted = 0
				    /*AND DATEDIFF(day, sf.EffectiveDate,ISNULL(@FromDate,GETDATE()))>= 0
					AND  DATEDIFF(day,ISNULL(@ToDate,GETDATE()), isnull( sf.EndDate,@ToDate+1))> 0*/
					AND DATEDIFF(day, sf.EffectiveDate,GETDATE())>= 0
					AND  DATEDIFF(day,GETDATE(), isnull( sf.EndDate,GETDATE()+1))> 0					  	
					AND DATEDIFF(day, ptt.EffectiveDate,GETDATE())>= 0
					AND  DATEDIFF(day,GETDATE(), isnull( ptt.EndDate,GETDATE()+1))> 0
					
			) SFO
			ON ( SFO.LocationId = so.LocationId AND SFO.Customerid = so.CustomerId  AND sop.ProductId=SFO.ProductId)
			WHERE   (DATEDIFF(DAY,so.SalePassDate,  @FromDate) <= 0 AND  DATEDIFF(DAY,so.SalePassDate,  @ToDate) >= 0)				   
			AND
			(
					(@IsTemporary = 1	OR (@IsTemporary = 0	AND  c.IsTemporary = 0))
				AND (@IsShopSale = 1	OR (@IsShopSale = 0		AND  st.Code <> 'SHP')	)
				AND (@IsUnTagg = 1		OR (@IsUnTagg = 0		AND  sfo.PrincipalTeamId IS NOT NULL))
			)
			
	) SOProd ON TeamProduct.ProductId = SOProd.ProductId 
	AND (TeamProduct.PrincipalTeamId = SOProd.PrincipalTeamId OR SOProd.PrincipalTeamId IS NULL)	
	INNER JOIN   uv_Product up ON   TeamProduct.ProductId = up.ProductId
    INNER JOIN uv_PrincipalBusinessLine_All upbla ON upbla.PrincipalBusinessLineId = up.PrincipalBusinessLineId   
    INNER JOIN   DBO.Split(@PBLIds, ',' ) PBL ON   ( PBL.Data = up.PrincipalBusinessLineId OR @PBLIds = '' )
     	
	GROUP BY
	upbla.PBLSequenceId,upbla.Name,
	SOPROD.DeliveryChallanId,
	SOProd.FFId, SOProd.FFName,
	TeamProduct.PrincipalTeamId,
	TeamProduct.[Principal Team],
	up.ProductSequence,
	TeamProduct.ProductId, 
	up.ShortName,
	SOProd.CustomerId,SOProd.LocationId


	UNION ALL

	SELECT upbla.PBLSequenceId,upbla.Name AS [Principal Business Line],so.DeliveryChallanId,99999 AS PrincipalTeamId,
	[Product].[Principal Team], [Product].ProductId,[Product].Name ,[Product].ProductSequence,
	sum(sop.SoldQuantity) AS [SoldQuantity],
	sum(sop.SoldQuantity*sop.TP) AS [Amount],
	( CASE  WHEN st.Code = 'SHP' THEN -1 WHEN c.IsTemporary = 1 THEN -2 ELSE ISNULL(sf.SalesForceId,-3) END ) AS FFId,
	( CASE  WHEN st.Code = 'SHP' THEN 'SHOP' WHEN c.IsTemporary = 1 THEN 'NEW' ELSE ISNULL(sf.Name,'UNTAG') END ) AS FFName,
	( CASE  WHEN st.Code = 'SHP' THEN 'SHOP' WHEN c.IsTemporary = 1 THEN 'NEW' ELSE ISNULL(sf.Name,'UNTAG') END ) AS FFSeq	
	,SO.LocationId
	FROM 
	(
		SELECT up.ProductId, 
		up.Name,
		isnull(up.ProductSequence,99999) AS ProductSequence,
		ISNULL(pt.ShortName,'UNTAGGED PRODUCT') AS [Principal Team],
		up.PrincipalBusinessLineId,pt.PrincipalTeamId
		FROM uv_Product up
		LEFT OUTER JOIN PrincipalTeamProduct ptp ON ptp.ProductId = up.ProductId AND ptp.ProductSequence = up.ProductSequence
		AND ptp.ToBeDeleted = 0
		LEFT OUTER JOIN PrincipalTeam pt ON pt.PrincipalTeamId = ptp.PrincipalTeamId			
	   -- AND DATEDIFF(day, pt.EffectiveDate,ISNULL(@FromDate,GETDATE()))>= 0
	    --AND  DATEDIFF(day,ISNULL(@ToDate,GETDATE()), isnull( pt.EndDate,@ToDate+1))> 0	  
	     AND DATEDIFF(day, pt.EffectiveDate,GETDATE())>= 0
		 AND  DATEDIFF(day,GETDATE(), isnull( pt.EndDate,GETDATE()+1))> 0
		WHERE pt.PrincipalTeamId IS NULL	  
	) AS [Product] 
	INNER JOIN SaleOrderProduct sop ON Product.ProductId=sop.ProductId /*AND sop.EndDate IS NULL*/
	INNER JOIN SaleOrder so ON (so.SaleOrderId = sop.SaleOrderId AND so.LocationId = sop.LocationId)
	INNER JOIN SaleType st ON st.SaleTypeId=so.SaleTypeId
	INNER JOIN Customer c ON   ( c.CustomerId = so.CustomerId AND   c.LocationId = so.LocationId )
	INNER JOIN   DBO.Split(@Locations, ',' ) Loc ON   ( Loc.Data =so.LocationId OR @Locations = '' )
	LEFT OUTER  JOIN   SalesForceCustomer sfc ON   ( sfc.LocationId = so.LocationId AND   sfc.Customerid = so.CustomerId 
	AND sfc.ToBeDeleted=0 AND sfc.SalesForceCustomerId IS  null)
	LEFT OUTER JOIN   SalesForce sf ON   ( sf.LocationId = sfc.LocationId AND   sf.SalesForceId = sfc.SalesForceId )
	--INNER JOIN   DBO.Split(@SalesForce, ',' ) ff ON   ( ff.Data = sfc.SalesForceId OR @SalesForce = '' )
   INNER JOIN uv_PrincipalBusinessLine_All upbla ON upbla.PrincipalBusinessLineId =  [Product].PrincipalBusinessLineId
   INNER JOIN   DBO.Split(@PBLIds, ',' ) PBL ON   ( PBL.Data = [Product].PrincipalBusinessLineId OR @PBLIds = '' )
    	
    WHERE    
    (DATEDIFF(DAY,so.SalePassDate,  @FromDate) <= 0 
	AND  DATEDIFF(DAY,so.SalePassDate,  @ToDate) >= 0)			      
    AND
		(
			(@IsTemporary=0 OR (@IsTemporary=1 AND c.IsTemporary=1))
		 OR (@IsShopSale=0 OR (@IsShopSale=1 AND st.Code='SHP'))
		 OR (@IsUnTagg=0 OR (@IsUnTagg=1 AND sfc.SalesForceCustomerId IS NULL))		 		
		)
		
	GROUP BY
		upbla.PBLSequenceId,
		upbla.Name,
		SO.DeliveryChallanId,
		[Product].[Principal Team], 
		[Product].ProductId,
		[Product].Name ,
		[Product].ProductSequence,
		st.Code,
		c.IsTemporary,
		sf.Name,
		sf.SalesForceId,
		SO.LocationId
		
	HAVING 
		sum(sop.SoldQuantity)>0 

)AS P
INNER JOIN Location l ON l.LocationId=P.LocationId
	


SELECT 
DISTINCT
IDENTITY(INT, 1,1) Id,
PrincipalTeamId,
[Principal Team]
INTO #tblLoop
FROM #Temp t

DECLARE @Count INT, @QUERY VARCHAR(max), @PrincipalTeam VARCHAR(50), 
@colFF VARCHAR(MAX),@colFFNonZeroQty VARCHAR(MAX),@colFFZeroQty VARCHAR(MAX)
,@PvtSummary VARCHAR(MAX)
,@PvtSummaryThousand VARCHAR(MAX)
,@colTQty varchar(max),@colSUMTQty varchar(max)

SET @Count = 1
WHILE @Count <= (SELECT COUNT(*) FROM #tblLoop)
	BEGIN
		
		SET @PrincipalTeam = (SELECT [Principal Team] FROM #tblLoop WHERE Id = @Count)	   			
		SET @colFF =
		ISNULL(( 
			SELECT DISTINCT '['+FFName + '], '
			FROM #tblLoop L 
			INNER JOIN #TEMP T ON l.PrincipalTeamId = t.PrincipalTeamId
			WHERE Id = @Count
			AND FFName NOT IN ('SHOP', 'NEW', 'UNTAG')
			FOR XML PATH('' ) 
		),'')
		SET @colFF = @colFF + ' [SHOP], [NEW], [UNTAG]'		
	
		SET @colFFNonZeroQty = 
		ISNULL(( 
			SELECT DISTINCT '['+FFName + '], 0 [' + FFName + ' Value], ' 
			FROM #tblLoop L 
			INNER JOIN #TEMP T ON l.PrincipalTeamId = t.PrincipalTeamId
			WHERE Id = @Count
			AND FFName NOT IN ('SHOP', 'NEW', 'UNTAG')
			FOR XML PATH('' ) 
		),'')                            
		SET @colFFNonZeroQty =@colFFNonZeroQty + ' [SHOP], 0 [SHOP Value], [NEW], 0 [NEW Value], [UNTAG], 0 [UNTAG Value]'
				
		SET @colFFZeroQty = 
		ISNULL(( 
			SELECT DISTINCT '0 ['+FFName + '], ['+FFName + '] [' + FFName + ' Value], ' 
			FROM #tblLoop L 
			INNER JOIN #TEMP T ON l.PrincipalTeamId = t.PrincipalTeamId
			WHERE Id = @Count
			AND FFName NOT IN ('SHOP', 'NEW', 'UNTAG')
			FOR XML PATH('' ) 
		),'')                            
		SET @colFFZeroQty = @colFFZeroQty + ' 0 [SHOP], [SHOP] [SHOP Value], 0 [NEW], [NEW] [NEW Value], 0 [UNTAG], [UNTAG] [UNTAG Value]'
		
		SET @PvtSummary = 
		ISNULL(( 
			SELECT DISTINCT 'SUM(['+FFName + ']) AS ['+FFName + '],' 
			FROM #tblLoop L 
			INNER JOIN #TEMP T ON l.PrincipalTeamId = t.PrincipalTeamId
			WHERE Id = @Count
			AND FFName NOT IN ('SHOP', 'NEW', 'UNTAG')
			FOR XML PATH('' ) 
		),'')              
		SET @PvtSummary = @PvtSummary+ ' ISNULL(SUM([SHOP]),0) [SHOP], ISNULL(SUM([NEW]),0) [NEW], ISNULL(SUM([UNTAG]),0) [UNTAG]'
	
		SET @PvtSummaryThousand = 
		ISNULL(( 
			SELECT DISTINCT 'SUM(['+FFName + '])/1000 AS ['+FFName + '],' 
			FROM #tblLoop L 
			INNER JOIN #TEMP T ON l.PrincipalTeamId = t.PrincipalTeamId
			WHERE Id = @Count
			AND FFName NOT IN ('SHOP', 'NEW', 'UNTAG')
			FOR XML PATH('' ) 
		),'')              
			
		SET @PvtSummaryThousand =@PvtSummaryThousand + ' SUM([SHOP])/1000 [SHOP], SUM([NEW])/1000 [NEW], SUM([UNTAG])/1000 [UNTAG]'		
		
		SET @colSUMTQty = 'SUM(' +
		ISNULL(( 
			SELECT DISTINCT + 'ISNULL(['+ FFName + '],0)+ ' 
			FROM #tblLoop L 
			INNER JOIN #TEMP T ON l.PrincipalTeamId = t.PrincipalTeamId
			WHERE Id = @Count
			AND FFName NOT IN ('SHOP', 'NEW', 'UNTAG')
			FOR XML PATH('' ) 
		),'')                            
		SET @colSUMTQty = @colSUMTQty+ ' ISNULL([SHOP],0)+ ISNULL([NEW],0)+ ISNULL([UNTAG],0)' + ')'
	
		SET @colTQty =
		ISNULL(( 
			SELECT DISTINCT + 'ISNULL(['+ FFName + '],0)+ ' 
			FROM #tblLoop L 
			INNER JOIN #TEMP T ON l.PrincipalTeamId = t.PrincipalTeamId
			WHERE Id = @Count
			AND FFName NOT IN ('SHOP', 'NEW', 'UNTAG')
			FOR XML PATH('' ) 
		),'')                            
		SET @colTQty = @colTQty+ ' ISNULL([SHOP],0)+ ISNULL([NEW],0)+ ISNULL([UNTAG],0)'
		
					
		SET @QUERY = 
		(
		'		
		 SELECT * 
		 FROM
		 (			
		 SELECT A.[Location Name],A.DeliveryChallanId, A.ProductSequence ,A.PrincipalTeamId,A.[Principal Team], A.[Code],A.[Product Name],'+@PvtSummary+', SUM(A.[T.QTY]) [T.QTY], SUM(A.[T.VALUE]) [T.VALUE]
		 FROM
		 (
			SELECT [Location Name],st.DeliveryChallanId,PrincipalTeamId,''Team: '+ @PrincipalTeam +''' AS [Principal Team], ProductSequence , ProductId [Code], [Product Name], '+@colFFNonZeroQty+', '+@colTQty+' AS [T.QTY],0 AS [T.VALUE]
			FROM
			(
				SELECT t.[Location Name],t.DeliveryChallanId,t.PrincipalTeamId,
					   t.[Principal Business Line], CONVERT(char(11),t.ProductId) as [ProductId],t.[Product Name],  
					   T.FFName, ISNULL(SoldQuantity,0) as [SoldQuantity] ,
					   T.ProductSequence
				FROM #tblLoop L 
				INNER JOIN #TEMP T ON l.PrincipalTeamId = t.PrincipalTeamId
				WHERE Id = ' + CONVERT(VARCHAR(10), @Count) + '
			)ST
			PIVOT
			(SUM(SOLDQUANTITY) FOR FFName IN ('+@colFF+')) AS PVT
			
			UNION ALL
			
			SELECT [Location Name],st.DeliveryChallanId,,PrincipalTeamId,''Team: '+ @PrincipalTeam +''' AS [Principal Team], ProductSequence , ProductId [Code], [Product Name], '+@colFFZeroQty+', 0 AS [T.QTY], '+@colTQty+' AS [T.VALUE]
			FROM
			(
				SELECT t.[Location Name],t.PrincipalTeamId,
					   t.[Principal Business Line],t.DeliveryChallanId, CONVERT(char(11),t.ProductId) as [ProductId],t.[Product Name],  
					   T.FFName, ISNULL(Value,0) as [Value], 
					   T.ProductSequence
				FROM #tblLoop L 
				INNER JOIN #TEMP T ON l.PrincipalTeamId = t.PrincipalTeamId
				WHERE Id = ' + CONVERT(VARCHAR(10), @Count) + '
			)ST
			PIVOT
			(SUM(Value) FOR FFName IN ('+@colFF+')) AS PVT		
		 ) AS [A]
		 GROUP BY
		 A.[Location Name],A.PrincipalTeamId,A.[Principal Team], A.[Code],A.[Product Name] , A.ProductSequence
		 		 
		 )SA
		 
		 UNION ALL
	
		SELECT [Location Name],st.DeliveryChallanId 99999 ProductSequence ,99999 AS PrincipalTeamId,'''' AS [Principal Team],'''' as  [Code],''Team: '+ @PrincipalTeam +' VALUES(''''000)'' AS [Product Name], '+@PvtSummaryThousand+', 0 AS [T.QTY], '+@colSUMTQty+' AS [T.VALUE]
		FROM
		(
			SELECT t.[Location Name], t.PrincipalTeamId,
				   t.[Principal Business Line],t.DeliveryChallanId, CONVERT(char(11),t.ProductId) as [ProductId],t.[Product Name],  
				   T.FFName, ISNULL(Value,0) as [Value] ,
				   T.ProductSequence
			FROM #tblLoop L 
			INNER JOIN #TEMP T ON l.PrincipalTeamId = t.PrincipalTeamId
			WHERE Id = ' + CONVERT(VARCHAR(10), @Count) + '
			
		)ST
		
		PIVOT
		(SUM(Value) FOR FFName IN ('+@colFF+')) AS PVT
		GROUP BY [Location Name]
		Order by  ProductSequence
		 '
		)
				
		BEGIN TRY
			EXEC (@QUERY)			
		END TRY		
		BEGIN CATCH
			PRINT ('eRROR')
			PRINT (@QUERY)
		END CATCH
			
		
		SET @Count = @Count + 1	
	  	
	END				
	
--DROP TABLE #tblLoop					
--DROP TABLE #Temp
SELECT a.DeliveryChallanId,sum(a.SoldQuantity) AS [R59 Quantity]--SUM(a.SoldQuantity) 
FROM #TEMP a WHERE a.ProductId = 14 AND PrincipalTeamId <> 99999
GROUP BY a.DeliveryChallanId
--AND a.DeliveryChallanId IN  

SELECT so.DeliveryChallanId,SUM(sop.SoldQuantity) AS [DC Quantity]
FROM dbo.SaleOrder so INNER JOIN dbo.SaleOrderProduct sop ON so.LocationId = sop.LocationId AND so.SaleOrderId = sop.SaleOrderId
--GROUP BY so.DeliveryChallanId
WHERE (DATEDIFF(DAY,so.SalePassDate,  '2013/11/23') <= 0 AND  DATEDIFF(DAY,so.SalePassDate,  '2013/11/26') >= 0) AND sop.ProductId = 14 AND sop.SoldQuantity>0
GROUP BY so.DeliveryChallanId
 GO 
DECLARE @PBLIds varchar(1000), @LocationIds varchar(1000), @RecLocationIds varchar(1000),
		@SelectAll int,@FromDate datetime,@ToDate datetime, 
		@TRSelectAll int,@TRFromDate datetime,@TRToDate datetime,
		@SelectAllDoc int,@DocRange  varchar(50),@FromDoc int,@ToDoc int, 
		@TOStatus  varchar(5),
		@Status  varchar(5),
		@IsCombineCorrection bit 

SET @PBLIds = '4'
SET @LocationIds = '11,14,29,17,19,21,28,23,12,38,26,42,15,35,18,37,43,30,36,22,24,44,13,32,27,16'
SET @RecLocationIds = '11,14,29,17,19,21,28,23,12,38,26,42,15,35,18,37,43,30,36,22,24,44,13,32,27,16'
SET @SelectAll=0
SET @FromDate = '2013-11-01 '
SET @ToDate = '2013-11-30 '
SET @TRSelectAll=0
SET @TRFromDate = '2013-11-01'
SET @TRToDate = '2013-12-31'
SET @SelectAllDoc=2
SET @DocRange='162'
SET @FromDoc = '162'
SET @ToDoc = '247' 
SET @TOStatus = 'AP'
SET @Status = ''
SET @IsCombineCorrection = 1

SELECT * FROM TransferOut to1
INNER JOIN   (
           SELECT to1.LocationId,
                  to1.TransferOutId,
                  to1.ReferenceTransferOutId
           FROM   TransferOut to1
           INNER JOIN   DBO.Split(@LocationIds, ',' ) LOC
             ON   (
                      LOC.Data = to1.LocationId OR @LocationIds = ''
                  )
           INNER JOIN   DBO.Split(@RecLocationIds, ',' ) RecLOC
             ON   (
                      RecLOC.Data = to1.ToLocationId OR @RecLocationIds = ''
                  )
           INNER JOIN   DBO.Split(@PBLIds, ',' ) PBL
             ON   (
                      PBL.Data = to1.PrincipalBusinessLineId 
                      OR @PBLIds = ''
                  )
           WHERE 
               (
                      @TOStatus = '' 
					OR (@TOStatus='AP' AND to1.IsRollbacked=0)
					OR (@TOStatus='P' AND to1.IsApproved=0 AND to1.IsRollbacked=0)
					OR (@TOStatus='A' AND to1.IsApproved=1 AND to1.IsRollbacked=0)
					OR (@TOStatus='R' AND to1.IsApproved=0 AND to1.IsRollbacked=1)
                )
            AND (
                      @Status = ''
                  OR  (
                          @Status = 'R'
                     AND  To1.TransferOutId IS NOT 
                     NULL
                      )
                  OR  (
                          @Status = 'I'
                     AND  To1.TransferOutId IS  NULL
                      )
                  OR  (
                          @Status = 'P'
                     AND  to1.TREntryDate IS NULL
                      )
               ) 
           	AND (
					   @SelectAll = 0
				   OR  (
						   @SelectAll = 1 AND  ( DATEDIFF(DAY, to1.TransactionDate,  @FromDate) = 0 /* only FOR one day*/)
					   )
				   OR  (
						   @SelectAll = 2 AND   
							(
								DATEDIFF(DAY, to1.TransactionDate,  @FromDate) <= 0
								AND 
								(
									(@IsCombineCorrection = 1 AND to1.ReferenceTransferOutId IS NOT NULL) 
									OR   datediff (day,to1.TransactionDate, @ToDate) >= 0
								)
							)  				
					   )   
				)    
			AND (
					   @TRSelectAll = 0
				   OR  (
						   @TRSelectAll = 1
					  AND  ( DATEDIFF(DAY,to1.TREntryDate,  @TRFromDate) = 0 /* only FOR one day*/)
					   )
				   OR  (
						   @TRSelectAll = 2
						   AND  (DATEDIFF(DAY,to1.TREntryDate,  @TRFromDate) <= 0AND  DATEDIFF(DAY,to1.TREntryDate,  @TRToDate) >= 0)										
					   )   
				)      			
			AND (
					   @SelectAllDoc = 0 
				   OR (
						@SelectAllDoc = 1 AND  to1.TransferOutId IN (SELECT S.DATA FROM   DBO.Split(@DocRange, ',') S)
					  )
					OR(
					  @SelectAllDoc = 2 AND ( (@FromDoc = '0'OR to1.TransferOutId>= @FromDoc) AND  (@ToDoc = '0' OR to1.TransferOutId <= @ToDoc))
					  )
				)            
       ) AS RefTI
  ON   (
           (
               to1.TransferOutId = RefTI.TransferOutId OR( @IsCombineCorrection = 1 
               AND   to1.ReferenceTransferOutId = RefTI.TransferOutId )
           )AND   to1.LocationId = RefTI.LocationId
  )
WHERE (ISNULL(RefTI.ReferencetransferOutId, 0) = CASE WHEN (@IsCombineCorrection  = 1) THEN  0 ELSE 1 END) 
   OR  
   (ISNULL(RefTI.ReferencetransferOutId, 1) > CASE WHEN (@IsCombineCorrection  = 0) THEN  0 ELSE (refti.transferoutid) END)
  -- AND RefTI.ReferenceTransferOutId IS  NULLIF(@IsCombineCorrection = 1)
  --AND ASE WHEN (@IsCombineCorrection  = 1) THEN refti.referencetransferoutid IS null ELSE refti.referencetransferoutid END 
 GO 
--CREATE   PROCEDURE dbo.usp_UDLSalesForce_ByStatus @IsBooker bit,@IsSupplier bit,@Status varchar(100) AS  

DECLARE @IsBooker bit,@IsSupplier bit,@LocationId  varchar(100) ,@Status varchar(100)  
SET @IsBooker=1  
SET @IsSupplier=1
SET @LocationId='14'  
SET @Status=''  
  
SELECT DISTINCT uf.UDLSalesForceId, uf.Name  
FROM   UDLSalesForceCategoryTagging ufct  
INNER JOIN UDLSalesForce uf ON uf.UDLSalesForceId = ufct.UDLSalesForceId  
INNER JOIN UDLSalesForceCategory ufc ON ufc.UDLSalesForceCategoryId = ufct.UDLSalesForceCategoryId  
INNER JOIN  DBO.Split(@LocationId, ',') Loc ON  (Loc.Data = uf.LocationId OR @LocationId = '')
WHERE (((@IsBooker=1 AND ufc.IsBooker = @IsBooker )OR (@IsSupplier=1 AND  ufc.IsSupplier=@IsSupplier)) OR ufct.UDLSalesForceCategoryId IN (8,9))
AND   @Status = ''  
   OR  (  
           @Status = '0'  
      AND  DATEDIFF(day,uf.EffectiveDate,GETDATE())>= 0  
      AND  DATEDIFF(day,GETDATE(),ISNULL(uf.EndDate, GETDATE()+1))>0  
      AND  DATEDIFF(day,ufct.EffectiveDate,GETDATE())>= 0  
      AND  DATEDIFF(day,GETDATE(),ISNULL(ufct.EndDate,GETDATE()+1))>0  
       )  
   OR  (  
           @Status = '1'  
      AND  DATEDIFF(day,uf.EndDate,ISNULL(GETDATE(), GETDATE()+1))>0          
  AND  DATEDIFF(day,GETDATE(),ISNULL(ufct.EndDate,GETDATE()+1))>0  
   )  
     
ORDER BY uf.Name

 GO 

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'usp_Insert_BankAccountSequence')AND type in (N'P', N'PC'))
DROP PROCEDURE usp_Insert_BankAccountSequence
GO

 CREATE PROCEDURE usp_Insert_BankAccountSequence
@out_error_number INT = 0 OUTPUT,
@LocationId int,
@BankAccountId int,
@SequenceId int,
@IsDefault bit,
@InsertDate datetime,
@UserId int
AS

SET @SequenceId  = (SELECT MAX(SequenceId)+ 1 FROM BankAccountSequence WHERE LocationId = @LocationId )
BEGIN
BEGIN TRY
	Insert into BankAccountSequence (LocationId,BankAccountId,SequenceId,IsDefault,InsertDate,InsertedBy)
	values(@LocationId,@BankAccountId,@SequenceId,@IsDefault,@InsertDate,@UserId)
END TRY
BEGIN CATCH
	SELECT @out_error_number=ERROR_NUMBER()
END CATCH
END
GO

 GO 
--CREATE PROC [dbo].[usp_Report_CustomerPeriodicalSale] 
--	@LocationIds varchar(200), 
--	@CompanyIds varchar(20),  
--	@PBLIds varchar(100),   
--	@SaleTypeIds varchar(100),   
--	@MainAreaIds varchar(MAX),  
--	@SubAreaIds varchar(MAX),  
--	@CustomerIds varchar(MAX),  
--	@ProductIds varchar(MAX), 
--	@FromDate datetime, 
--	@ToDate datetime,   	   
--	@IsCash bit,
--	@IsCredit bit,
--	@CustStatus int
--AS 

DECLARE 
	@LocationIds varchar(1000), 
	@CompanyIds varchar(1000),  
	@PBLIds varchar(1000),   
	@SaleTypeIds varchar(1000),   
	@MainAreaIds varchar(1000),  
	@SubAreaIds varchar(1000),  
	@CustomerIds varchar(1000),  
	@ProductIds varchar(1000),   
	@FromDate datetime, 
	@ToDate datetime,   		      
    @IsCash bit,
	@IsCredit bit,
	@CustStatus INT,
	@Period INT
SET @LocationIds = ''--'11,14'--'11,18,23,28,30,35,37,42,44'  
SET @CompanyIds= '1'
SET @PBLIds = ''--3,4,'--'7,3,5,28,40,4,33,37,38,20,35,41,43,44,45,47,48,49,50,55,57,58,59,60,61,62'
SET @SaleTypeIds = ''--'1,2,3,4,5'
SET @MainAreaIds = ''--'24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43'
SET @SubAreaIds = ''--'149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238'
SET @ProductIds = '' --'2545'
SET @CustomerIds= ''--'2780,2781'
SET @FromDate = '2014-04-01'  
SET @ToDate = GETDATE() 
SET @IsCash= 1
SET @IsCredit= 1
SET @CustStatus = 0
SET @Period  = 0
SELECT 
	L.SequenceId AS [LocationSequence],	
	l.ShortName AS [LOCATION NAME], 	
	A.[SALE DATE],
	Case When @Period = 0 then LEFT(RIGHT(convert(varchar(20),[SALE DATE],06),6),3)+'-'+RIGHT(convert(varchar(20),[SALE DATE],06),2)
	ELSE LEFT(CONVERT(VARCHAR(7), [SALE DATE], 111),4) END 
	AS [PERIOD],            
	A.CustomerId AS [CODE],
	csa.[Customer Name] AS [CUSTOMER NAME],
	csa.[Main Area] AS [MAIN AREA],
	csa.[Sub Area] AS [SUB AREA],
	a.[SALE NATURE] AS [SALE NATURE],	
	up.PBLShortName AS [PBL],
	A.ProductId  AS [PROD ID], 	
	UP.Name  AS [PRODUCT NAME], 		
	sum(a.[TP Value]) [TP VALUE]
	INTO #temp
FROM 
(
	SELECT 
		so.LocationId, 
		SO.SalePassDate AS [SALE DATE],	
		SO.CustomerId,
		sop.PrincipalBusinessLineId, 
		sop.ProductId,  
		CASE WHEN SO.IsCash=1 THEN 'CASH' ELSE 'CREDIT' END AS [SALE NATURE], 			
		ISNULL(sop.SoldQuantity * sop.TP,0)  [TP Value]
	FROM SaleOrder SO INNER JOIN SaleOrderProduct sop ON   sop.LocationId = SO.LocationId 
		 AND   sop.SaleOrderId = SO.SaleOrderId 				
		INNER JOIN   DBO.Split(@CompanyIds, ',' ) Company ON ( Company.Data = SO.CompanyId OR @CompanyIds = '' )	
		INNER JOIN   DBO.Split(@LocationIds, ',' ) Loc ON  ( Loc.Data = SO.LocationId OR @LocationIds = '' )
		INNER JOIN   DBO.Split(@CustomerIds, ',' ) Customer ON ( Customer.Data = SO.CustomerId OR @CustomerIds = '' )						
		INNER JOIN   DBO.Split(@PBLIds, ',' ) PBL ON (PBL.Data = sop.PrincipalBusinessLineId OR @PBLIds = '' )
		INNER JOIN   DBO.Split(@ProductIds, ',' ) Product ON ( Product.Data = sop.ProductId OR @ProductIds = '' )			 
		INNER JOIN   DBO.Split(@SaleTypeIds, ',' ) SaleTypes ON ( SaleTypes.Data = so.SaleTypeId OR @SaleTypeIds = '' )			 
	
	WHERE  SO.IsRollbacked = 0
		AND sop.EndDate IS NULL 
		AND ( DATEDIFF(DAY,SO.SalePassDate,@FromDate) <= 0 AND  DATEDIFF(DAY,SO.SalePassDate,@ToDate) >= 0)                                              	
		AND((@IsCash=1 AND SO.IsCash=1)  OR (@IsCredit=1 AND SO.IsCash=0)) 
			
	UNION ALL
	
	SELECT 
		S.LocationId, 
		S.TransactionDate AS [SALE DATE],	
		s.CustomerId,
		s.PrincipalBusinessLineId, 
		s2.ProductId, 
		CASE WHEN s.IsCash=1 THEN 'CASH' ELSE 'CREDIT' END  AS [SALE NATURE],		
		-1*s2.Quantity * pc.TP  [TP Value]
	FROM SLN s
		INNER JOIN SLNProduct s2 ON s2.LocationId = s.LocationId AND s2.SLNId = s.SLNId   
		INNER JOIN PriceCatalog pc ON  pc.PriceCatalogId=s2.PriceId
		INNER JOIN   DBO.Split(@CompanyIds, ',' ) Company ON ( Company.Data = s.CompanyId OR @CompanyIds = '' )	
		INNER JOIN   DBO.Split(@LocationIds, ',' ) Loc ON  ( Loc.Data = s.LocationId OR @LocationIds = '' )
		INNER JOIN   DBO.Split(@CustomerIds, ',' ) Customer ON ( Customer.Data = s.CustomerId OR @CustomerIds = '' )						
		INNER JOIN   DBO.Split(@PBLIds, ',' ) PBL ON (PBL.Data = s.PrincipalBusinessLineId OR @PBLIds = '' )			 
		INNER JOIN   DBO.Split(@ProductIds, ',' ) Product ON ( Product.Data = s2.ProductId OR @ProductIds = '' )			
		
	WHERE s2.Quantity > 0 
		AND (DATEDIFF(DAY,s.TransactionDate,  @FromDate) <= 0 AND DATEDIFF(DAY,s.TransactionDate,  @ToDate) >= 0)
		AND((@IsCash=1 AND s.IsCash=1)  OR (@IsCredit=1 AND s.IsCash=0)) 
		AND s2.IsFree=0
		AND S.IsRollbacked = 0	
) A 
INNER JOIN  uv_Product up ON  up.ProductId = A.ProductId
INNER JOIN  Location l ON  l.LocationId = A.LocationId
INNER JOIN  uv_CustomerSalesArea csa ON csa.LocationId=A.LocationId AND csa.CustomerId=A.CustomerId
INNER JOIN   DBO.Split(@MainAreaIds, ',' ) MainArea ON ( MainArea.Data = csa.MainAreaId OR @MainAreaIds = '' )
INNER JOIN   DBO.Split(@SubAreaIds, ',' ) SubArea ON ( SubArea.Data = csa.SubAreaId OR @SubAreaIds = '' )

WHERE
		( @CustStatus = 0 OR ( @CustStatus = 1 AND ( DATEDIFF(day, csa.[Cus Effective Date],GETDATE())>= 0 AND DATEDIFF(day,GETDATE(), isnull( csa.[Cus End Date],GETDATE()+1))> 0))
	OR ( @CustStatus = 2 AND  DATEDIFF(day,csa.[Cus End Date],ISNULL(GETDATE(), GETDATE()+1))>0 ))
 	
GROUP BY L.SequenceId ,	
	l.ShortName , 	
	A.[SALE DATE],            
	A.CustomerId,
	csa.[Customer Name] ,
	csa.[Main Area] ,
	csa.[Sub Area] ,
	a.[SALE NATURE],
	up.PBLShortName,
	A.ProductId,   	
	UP.Name    
	
DECLARE @pvtPERIOD NVARCHAR(MAX)
SET @pvtPERIOD = (SELECT DISTINCT '[' +PERIOD+  '], '
					FROM #TEMP 
                    FOR XML PATH(''), root('MyString'), type).value('/MyString[1]','varchar(max)')               
SET @pvtPERIOD= LEFT( @pvtPERIOD,LEN(@pvtPERIOD)-1 )  
--SELECT @pvtPERIOD
DECLARE @Query NVARCHAR(MAX)
SET @Query = '
SELECT [LocationSequence],[LOCATION NAME],[CODE],[CUSTOMER NAME],[MAIN AREA],[SUB AREA],[SALE NATURE],[PBL],[PROD ID],[PRODUCT NAME],'+@pvtPERIOD+'
FROM
(	SELECT	[LocationSequence],[LOCATION NAME],[CODE],[CUSTOMER NAME],[MAIN AREA],[SUB AREA],[SALE NATURE],[PBL],[PROD ID],[PRODUCT NAME],Isnull([TP VALUE],0) as [TP VALUE],PERIOD
	FROM #TEMP 
 	Where [LocationSequence]= 52
)a
PIVOT(SUM([TP VALUE])  FOR a.PERIOD IN ('+@pvtPERIOD+')) as PVT '
 
--SELECT Distinct PERIOD,CONVERT(Date,'01-'+Period,112) AS sodate
--INTO #tblLoop 
--FROM #TEMP
--ORDER BY 
--CONVERT(Date,'01-'+Period,112)

DECLARE @PeriodCount INT
SET @PeriodCount =  1

--WHILE @PeriodCount <= (SELECT COUNT(*) FROM #tblLoop) 
BEGIN
  EXEC(@Query)
  PRINT(@Query)
--SET @PeriodCount = @PeriodCount + 1
END




 GO 
CREATE PROC [dbo].[usp_Report_CustomerPeriodicalSale] 
	@CompanyIds varchar(20), 
	@LocationIds varchar(200), 
	@PBLIds varchar(100),
	@ProductIds varchar(MAX), 
	@MainAreaIds varchar(MAX),  
	@SubAreaIds varchar(MAX),  
	@CustomerIds varchar(MAX),
	@SaleTypeIds varchar(100),   
	@SaleCriteria int, 
	@FromDate datetime, 
	@ToDate datetime,   	   
	@IsCash bit,
	@IsCredit bit,
	@CustStatus int
AS 
--DECLARE @PBLIds varchar(100),
--@ProductIds nvarchar(MAX),
--        @LocationIds varchar(100),@MainAreaIds NVARCHAR(MAX), @SubAreaIds NVARCHAR(MAX),
--        @CustomerIds varchar(100),
--        @SaleCriteria int,
--        @SaleTypeIds varchar(100),
--        @IsCash bit,
--        @IsCredit bit,
--        @FromDate datetime,
--        @ToDate datetime,@CustStatus int  
--SET @PBLIds =''
--SET @LocationIds = ''
--SET @CustomerIds =''
--SET @MainAreaIds  = '' 
--set @SubAreaIds=''
--SET @SaleCriteria =1
--SET @SaleTypeIds = ''--'1,2,3,4,5'
--SET @IsCash = 1
--SET @IsCredit =1
--SET @FromDate = '2014-04-01 00:00:00'
--SET @ToDate = '2014-06-17 00:00:00'
--SET @CustStatus =0
--SET @ProductIds = ''
/*
Sale Criteria 
0-Gross Sale --Only Value
1-Net Sale -- Value-SLN
2-SLN--Only SLN
*/

SELECT 
    [tbl].LocationId,  
	l.ShortName AS [Location Name], 
	l.SequenceId AS [Loc Seq],
	[tbl].IsCash, 
	[tbl].CustomerId,
	c.[Customer Name],
	c.[Main Area],
	c.[Sub Area],
	[tbl].[Date],
	sum([Amount]) AS [Amount]
	INTO #TEMP
FROM 
(
	SELECT 
	SO.LocationId AS LocationId,  
	so.IsCash,
	so.CustomerId,
	so.PrincipalBusinessLineId, 
	so.ProductId,
	RIGHT(CONVERT(char(11),so.SalePassDate,13),8) AS [Date],
	so.SalePassDate AS TransactionDate,
	so.TP* so.SoldQuantity AS [Amount]
	FROM uv_Sales_SaleOrder so
		INNER JOIN   DBO.Split(@LocationIds, ',' ) Loc ON   ( Loc.Data = so.LocationId OR @LocationIds = '' )
		INNER JOIN   DBO.Split(@PBLIds, ',' ) PBL ON   ( PBL.Data = so.PrincipalBusinessLineId OR @PBLIds = '' )
		INNER JOIN 	 DBO.Split(@ProductIds, ',' ) Product ON   ( Product.Data = so.ProductId OR @ProductIds= '' )
		INNER JOIN   DBO.Split(@CustomerIds, ',' ) Cus ON   ( Cus.Data = so.CustomerId OR @CustomerIds = '' )
		INNER JOIN   DBO.Split(@SaleTypeIds, ',' ) SaleType ON   ( SaleType.Data = so.SaleTypeId OR @SaleTypeIds = '' )
	WHERE  
		DATEDIFF(DAY, so.SalePassDate,  @FromDate ) <= 0 
		AND  DATEDIFF(DAY,  so.SalePassDate,  @ToDate ) >= 0 	
		AND so.IsRollbacked = 0
		AND ((@IsCash=1 AND so.IsCash=1)  OR (@IsCredit=1 AND so.IsCash=0))
		AND @SaleCriteria <> 2 /*--to show Only SLN--*/
		
		
	/*------ SLN PRODUCT ------*/
	UNION ALL 

	SELECT 
		S.LocationId AS LocationId, 
		S.IsCash,
		s.CustomerId,
		S.PrincipalBusinessLineId,
		s.ProductId, 
		RIGHT(CONVERT(char(11),s.TransactionDate,13),8) AS [Date],
		s.TransactionDate, 
		CASE WHEN s.IsFree=0 THEN (PC.TP * CASE WHEN @SaleCriteria=1 THEN  -1 * s.Quantity ELSE s.Quantity END)	ELSE 0 END  AS [Amount]
	FROM uv_Sales_SLN s
		INNER JOIN   PriceCatalog pc ON   pc.PriceCatalogId = s.PriceId
		INNER JOIN   DBO.Split(@LocationIds, ',' ) Loc ON   ( Loc.Data = S.LocationId OR @LocationIds = '' )
		INNER JOIN   DBO.Split(@PBLIds, ',' ) PBL ON   ( PBL.Data = S.PrincipalBusinessLineId OR @PBLIds = '' )
		INNER JOIN 	 DBO.Split(@ProductIds, ',' ) Product ON   ( Product.Data = S.ProductId OR @ProductIds= '' )
		INNER JOIN   DBO.Split(@CustomerIds, ',' ) Cus ON   ( Cus.Data = S.CustomerId OR @CustomerIds = '' )
		
	WHERE  
		DATEDIFF(DAY, S.TransactionDate,  @FromDate ) <= 0 
		AND  DATEDIFF(DAY, S.TransactionDate,  @ToDate ) >= 0
		AND s.IsFree = 0
		AND  s.IsRollbacked = 0
		AND @SaleCriteria <> 0
		
			
)AS [tbl]
INNER JOIN Location l ON   l.LocationId = [tbl].LocationId
INNER JOIN uv_CustomerSalesArea c ON c.LocationId=[tbl].LocationId AND c.CustomerId=[tbl].CustomerId
INNER JOIN   DBO.Split(@MainAreaIds, ',' ) MainArea ON ( MainArea.Data = c.MainAreaId OR @MainAreaIds = '' )
INNER JOIN   DBO.Split(@SubAreaIds, ',' ) SubArea ON ( SubArea.Data = c.SubAreaId OR @SubAreaIds = '' )
WHERE 
 
		(
			   @CustStatus = 0
		   OR  (
				   @CustStatus = 1
			  AND  (
					   DATEDIFF(day, c.[Cus Effective Date],GETDATE())>= 0
					AND  DATEDIFF(day,GETDATE(), isnull( c.[CSA EndDate],GETDATE()+1))> 0
				   )
			   )
		   OR  (
				   @CustStatus = 2
				   AND  DATEDIFF(day,c.[CSA EndDate],ISNULL(GETDATE(), GETDATE()+1))>0               
			   )
		)	

GROUP BY	
    [tbl].LocationId,  
	l.ShortName , 
	l.SequenceId ,
	[tbl].IsCash, 
	[tbl].CustomerId,
	c.[Customer Name],
	c.[Main Area],
	c.[Sub Area],
	[tbl].[Date]

DECLARE @QUERY VARCHAR(8000),@pvtSumIsNullAmount VARCHAR(MAX),@pvtNonZeroAmountDate VARCHAR(MAX)
		
		SET @pvtNonZeroAmountDate = 
		( 
			SELECT  '[' + A.[Date] + '] , '
			FROM
			(
				SELECT DISTINCT t.[Date]
				FROM 
				#TEMP T
			) A
			ORDER BY Year(A.[Date]), Month(A.[Date])
			FOR XML PATH('' ) 
		)                            
		SET @pvtNonZeroAmountDate = LEFT( @pvtNonZeroAmountDate, LEN(@pvtNonZeroAmountDate )-1 )                          
	
		SET @pvtSumIsNullAmount = 
		( 
			SELECT  'ISNULL(SUM([' + A.[Date] + ']), 0) AS ['+A.[Date] +'],'
			FROM
			(
				SELECT DISTINCT t.[Date]
				FROM #TEMP T
			) A
			ORDER BY Year(A.[Date]), Month(A.[Date])
			FOR XML PATH('' ) 
		)                            
		SET @pvtSumIsNullAmount = LEFT( @pvtSumIsNullAmount, LEN(@pvtSumIsNullAmount )-1 )
		
		SET @QUERY = 
			'
			
				SELECT [Loc Seq],[Location Name],[Main Area],[Sub Area],CustomerId,[Customer Name], '+@pvtSumIsNullAmount+' FROM
				(
					SELECT t.[Loc Seq],t.[Location Name],t.[Main Area],t.[Sub Area],t.CustomerId,t.[Customer Name],  T.[Date], isnull(Amount,0) as [Amount] 
					FROM #TEMP T 
				)ST
				PIVOT
				(SUM(Amount) FOR [Date] IN ('+@pvtNonZeroAmountDate+')) AS PVT	
				GROUP BY [Loc Seq],[Location Name],[Main Area],[Sub Area],CustomerId,[Customer Name]
				Order BY [Loc Seq],[Main Area],[Sub Area],[Customer Name]						
			'
			EXEC (@QUERY)
			PRINT (@QUERY)										
DROP TABLE  #TEMP

 GO 
/*
 AUTHOR: SIDRA ASIF
 DATED : 14 January
 PURPOSE :  Update New Product Sequence 
*/

CREATE  PROC [dbo].[usp_Update_ProductSequence]
( @tvpTable utt_ProductSequence_TableType READONLY ,@UpdatedBy int, @EditStartTime DATETIME )
 AS 
BEGIN
	IF DATEDIFF(DAY, @EditStartTime, '1900-01-01') <> 0
	AND DATEDIFF(SECOND, ISNULL(( SELECT MAX(ISNULL(T.UpdateDate,@EditStartTime)) FROM Product AS T INNER JOIN @tvpTable AS TVP ON (T.ProductId=TVP.ProductId) ), @EditStartTime), @EditStartTime) < 0	
	--IF DATEDIFF(SECOND, ISNULL(( SELECT MAX(T.UpdateDate) FROM Product AS T INNER JOIN  @tvpTable AS TVP ON   (T.ProductId = TVP.ProductId )), @EditStartTime), @EditStartTime) < 0
	BEGIN 
		RAISERROR('Error On Update! The record cannot be updated because it has been modified by some other user after it was opened for editing by this user.', 16, 1)
	END
	
    
		UPDATE T
		SET    T.ProductSequence = TVP.ProductSequence,
			   T.UpdateDate = GETDATE(),
			   T.UpdatedBy = @UpdatedBy,
			   T.CommunicationId = NULL,
			   T.ToSend = 1
		FROM   Product AS T
		INNER JOIN   @tvpTable AS TVP
		  ON   (T.ProductId = TVP.ProductId )
		
		SELECT @@ROWCOUNT
    
END

 GO 
DECLARE @CompanyIds varchar(1000),@PBLIds  varchar(1000),@LocationIds  varchar(1000),@SelectAll int,@FromDate datetime, @ToDate datetime
SET @CompanyIds='1' 
SET @PBLIds='28'
SET @LocationIds='14' 
SET @SelectAll=2
SET @FromDate='2013-11-23 00:00:00'
SET @ToDate='2013-11-26 00:00:00'

DECLARE @pvtTotalSaleColumns VARCHAR(MAX),
        @pvtTotalSaleNonZeroColumns VARCHAR(MAX),
        @pvtTotalCreditColumns VARCHAR(MAX),
        @pvtTotalCreditNonZeroColumns VARCHAR(MAX),
        @pvtTotalPercColumns VARCHAR(MAX),
        @pvtTotalPercNonZeroColumns VARCHAR(MAX),
        @pvtMAXColumns VARCHAR(MAX)
        
SELECT
a.LocationId,l.ShortName AS [Location Name],a.PrincipalBusinessLineId,upbla.Name AS [Principal Business Line],
upbla.Name + '!Total Sale' AS [Principal Business Line Total Sale],
upbla.Name + '!Total Credit Sale' AS [Principal Business Line Total Credit Sale],
upbla.Name + '!Total Percentage' AS [Principal Business Line Total Percentage],

--sum(A.[Total Sale]) AS [Total Sale],
--sum(A.[Credit Total Net]) AS [Total Credit Net],
--CASE WHEN isnull(sum(A.[Total Sale]),sum(a.[Credit Total Net])) = 0 THEN 0 ELSE
--Sum(A.[Credit Total Net]) / isnull(sum(A.[Total Sale]),sum(a.[Credit Total Net])) END  AS [Total Percentage]
--INTO #TEMP  
FROM 
(
	SELECT udes.LocationId, udes.Date, udes.CompanyId,up.PrincipalBusinessLineId,udes.
       isnull((udes.GrossValue - udes.SLNCash-udes.SLNCredit),0)*udes.TP AS [Total Sale],
       isnull((udes.BookedLocalCredit+udes.BookedOSCredit - udes.SLNCredit),0)*udes.TP  AS [Credit Total Net]       
	FROM uv_DayEndSale udes
	INNER JOIN uv_Product up ON up.ProductId = udes.ProductId 

	UNION ALL

	SELECT s.LocationId, s.TransactionDate AS [Date],s.CompanyId, s.PrincipalBusinessLineId,
			s.[Total Net] AS [Total Sale],s.[Credit Total Net]
	FROM UV_SLN S	
) A 
	INNER JOIN DBO.Split(@CompanyIds, ',') Company ON   (Company.Data = A.CompanyId OR @CompanyIds = '')  
	INNER JOIN DBO.Split(@LocationIds, ',') LOC ON   (LOC.Data = A.LocationId OR @LocationIds = '')  
	INNER JOIN DBO.Split(@PBLIds, ',') PBL  ON   (PBL.Data = A.PrincipalBusinessLineId OR @PBLIds = '')  
	INNER JOIN uv_PrincipalBusinessLine_All upbla ON upbla.PrincipalBusinessLineId =A.PrincipalBusinessLineId
	INNER JOIN Location l ON l.LocationId=a.LocationId
WHERE
(
	@SelectAll=0 OR
	(
		@SelectAll=2 
		AND (DATEDIFF(DAY, A.Date,  @FromDate) <= 0   AND DATEDIFF(DAY,A.Date,  @ToDate) >= 0)
	)	
)
	
GROUP BY
A.CompanyId,a.LocationId,l.ShortName, A.PrincipalBusinessLineId,upbla.Name--,A.Date

HAVING sum(a.[Total Sale])>0

--SELECT * FROM #TEMP
-----------------------------------Total Sale-------------------------------------
SET @pvtTotalSaleColumns =( SELECT DISTINCT '0 [' +  [Principal Business Line Total Sale] + '], ' FROM   #TEMP FOR XML PATH(''), root('MyString'), type).value('/MyString[1]','varchar(max)')                            
SET @pvtTotalSaleColumns = LEFT(@pvtTotalSaleColumns, LEN(@pvtTotalSaleColumns )-1)

SET @pvtTotalSaleNonZeroColumns =( SELECT DISTINCT '[' +  [Principal Business Line Total Sale] + '], ' FROM   #TEMP FOR XML PATH(''), ro